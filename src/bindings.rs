/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202310;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 1;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 1;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 167] = b"Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this error.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_freestanding_char_traits: u32 = 202306;
pub const __cpp_lib_freestanding_cstdlib: u32 = 202306;
pub const __cpp_lib_freestanding_cstring: u32 = 202306;
pub const __cpp_lib_freestanding_cwchar: u32 = 202306;
pub const __cpp_lib_freestanding_errc: u32 = 202306;
pub const __cpp_lib_freestanding_feature_test_macros: u32 = 202306;
pub const __cpp_lib_freestanding_functional: u32 = 202306;
pub const __cpp_lib_freestanding_iterator: u32 = 202306;
pub const __cpp_lib_freestanding_memory: u32 = 202306;
pub const __cpp_lib_freestanding_operator_new: u32 = 202306;
pub const __cpp_lib_freestanding_ratio: u32 = 202306;
pub const __cpp_lib_freestanding_tuple: u32 = 202306;
pub const __cpp_lib_freestanding_utility: u32 = 202306;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_freestanding_charconv: u32 = 202306;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_hardware_interference_size: u32 = 201703;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_hypot: u32 = 201603;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_launder: u32 = 201606;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const __cpp_lib_sample: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_string_view: u32 = 201803;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_execution: u32 = 201603;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN7: u32 = 1537;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1537;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_WARN: u32 = 0;
pub const _CRT_ERROR: u32 = 1;
pub const _CRT_ASSERT: u32 = 2;
pub const _CRT_ERRCNT: u32 = 3;
pub const _CRTDBG_MODE_FILE: u32 = 1;
pub const _CRTDBG_MODE_DEBUG: u32 = 2;
pub const _CRTDBG_MODE_WNDW: u32 = 4;
pub const _CRTDBG_REPORT_MODE: i32 = -1;
pub const _CRT_RPTHOOK_INSTALL: u32 = 0;
pub const _CRT_RPTHOOK_REMOVE: u32 = 1;
pub const _HOOK_ALLOC: u32 = 1;
pub const _HOOK_REALLOC: u32 = 2;
pub const _HOOK_FREE: u32 = 3;
pub const _CRTDBG_ALLOC_MEM_DF: u32 = 1;
pub const _CRTDBG_DELAY_FREE_MEM_DF: u32 = 2;
pub const _CRTDBG_CHECK_ALWAYS_DF: u32 = 4;
pub const _CRTDBG_RESERVED_DF: u32 = 8;
pub const _CRTDBG_CHECK_CRT_DF: u32 = 16;
pub const _CRTDBG_LEAK_CHECK_DF: u32 = 32;
pub const _CRTDBG_CHECK_EVERY_16_DF: u32 = 1048576;
pub const _CRTDBG_CHECK_EVERY_128_DF: u32 = 8388608;
pub const _CRTDBG_CHECK_EVERY_1024_DF: u32 = 67108864;
pub const _CRTDBG_CHECK_DEFAULT_DF: u32 = 0;
pub const _CRTDBG_REPORT_FLAG: i32 = -1;
pub const _FREE_BLOCK: u32 = 0;
pub const _NORMAL_BLOCK: u32 = 1;
pub const _CRT_BLOCK: u32 = 2;
pub const _IGNORE_BLOCK: u32 = 3;
pub const _CLIENT_BLOCK: u32 = 4;
pub const _MAX_BLOCKS: u32 = 5;
pub const _UNKNOWN_BLOCK: i32 = -1;
pub const _CRT_MSVCP_CURRENT: &[u8; 13] = b"msvcp140.dll\0";
pub const _HAS_ITERATOR_DEBUGGING: u32 = 0;
pub const _SECURE_SCL: u32 = 0;
pub const _ITERATOR_DEBUG_LEVEL: u32 = 0;
pub const _CONTAINER_DEBUG_LEVEL: u32 = 0;
pub const _ENABLE_ATOMIC_REF_ALIGNMENT_CHECK: u32 = 0;
pub const _DEBUG_AFFIX: &[u8; 1] = b"\0";
pub const _IDL_DEFAULT: u32 = 0;
pub const _LIB_STEM: &[u8; 8] = b"libcpmt\0";
pub const _IDL_AFFIX: &[u8; 1] = b"\0";
pub const _LOCK_LOCALE: u32 = 0;
pub const _LOCK_MALLOC: u32 = 1;
pub const _LOCK_STREAM: u32 = 2;
pub const _LOCK_DEBUG: u32 = 3;
pub const _LOCK_AT_THREAD_EXIT: u32 = 4;
pub const _STD_ATOMIC_ALWAYS_USE_CMPXCHG16B: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const _HAS_ARM64_LOAD_ACQUIRE: u32 = 1;
pub const _JBLEN: u32 = 16;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_HINT_T0: u32 = 1;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 3;
pub const _MM_HINT_ENTA: u32 = 4;
pub const _MM_HINT_IT0: u32 = 7;
pub const _MM_HINT_IT1: u32 = 6;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_FROUND_TO_NEAREST_INT: u32 = 0;
pub const _MM_FROUND_TO_NEG_INF: u32 = 1;
pub const _MM_FROUND_TO_POS_INF: u32 = 2;
pub const _MM_FROUND_TO_ZERO: u32 = 3;
pub const _MM_FROUND_CUR_DIRECTION: u32 = 4;
pub const _MM_FROUND_RAISE_EXC: u32 = 0;
pub const _MM_FROUND_NO_EXC: u32 = 8;
pub const _MM_FROUND_NINT: u32 = 0;
pub const _MM_FROUND_FLOOR: u32 = 1;
pub const _MM_FROUND_CEIL: u32 = 2;
pub const _MM_FROUND_TRUNC: u32 = 3;
pub const _MM_FROUND_RINT: u32 = 4;
pub const _MM_FROUND_NEARBYINT: u32 = 12;
pub const _SIDD_UBYTE_OPS: u32 = 0;
pub const _SIDD_UWORD_OPS: u32 = 1;
pub const _SIDD_SBYTE_OPS: u32 = 2;
pub const _SIDD_SWORD_OPS: u32 = 3;
pub const _SIDD_CMP_EQUAL_ANY: u32 = 0;
pub const _SIDD_CMP_RANGES: u32 = 4;
pub const _SIDD_CMP_EQUAL_EACH: u32 = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: u32 = 12;
pub const _SIDD_POSITIVE_POLARITY: u32 = 0;
pub const _SIDD_NEGATIVE_POLARITY: u32 = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: u32 = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: u32 = 48;
pub const _SIDD_LEAST_SIGNIFICANT: u32 = 0;
pub const _SIDD_MOST_SIGNIFICANT: u32 = 64;
pub const _SIDD_BIT_MASK: u32 = 0;
pub const _SIDD_UNIT_MASK: u32 = 64;
pub const _CMP_EQ_OQ: u32 = 0;
pub const _CMP_LT_OS: u32 = 1;
pub const _CMP_LE_OS: u32 = 2;
pub const _CMP_UNORD_Q: u32 = 3;
pub const _CMP_NEQ_UQ: u32 = 4;
pub const _CMP_NLT_US: u32 = 5;
pub const _CMP_NLE_US: u32 = 6;
pub const _CMP_ORD_Q: u32 = 7;
pub const _CMP_EQ_UQ: u32 = 8;
pub const _CMP_NGE_US: u32 = 9;
pub const _CMP_NGT_US: u32 = 10;
pub const _CMP_FALSE_OQ: u32 = 11;
pub const _CMP_NEQ_OQ: u32 = 12;
pub const _CMP_GE_OS: u32 = 13;
pub const _CMP_GT_OS: u32 = 14;
pub const _CMP_TRUE_UQ: u32 = 15;
pub const _CMP_EQ_OS: u32 = 16;
pub const _CMP_LT_OQ: u32 = 17;
pub const _CMP_LE_OQ: u32 = 18;
pub const _CMP_UNORD_S: u32 = 19;
pub const _CMP_NEQ_US: u32 = 20;
pub const _CMP_NLT_UQ: u32 = 21;
pub const _CMP_NLE_UQ: u32 = 22;
pub const _CMP_ORD_S: u32 = 23;
pub const _CMP_EQ_US: u32 = 24;
pub const _CMP_NGE_UQ: u32 = 25;
pub const _CMP_NGT_UQ: u32 = 26;
pub const _CMP_FALSE_OS: u32 = 27;
pub const _CMP_NEQ_OS: u32 = 28;
pub const _CMP_GE_OQ: u32 = 29;
pub const _CMP_GT_OQ: u32 = 30;
pub const _CMP_TRUE_US: u32 = 31;
pub const _XCR_XFEATURE_ENABLED_MASK: u32 = 0;
pub const _XBEGIN_STARTED: i32 = -1;
pub const _XABORT_EXPLICIT: u32 = 1;
pub const _XABORT_RETRY: u32 = 2;
pub const _XABORT_CONFLICT: u32 = 4;
pub const _XABORT_CAPACITY: u32 = 8;
pub const _XABORT_DEBUG: u32 = 16;
pub const _XABORT_NESTED: u32 = 32;
pub const _MM_K0_REG8: u32 = 255;
pub const _MM_K0_REG16: u32 = 65535;
pub const _MM_K0_REG32: u32 = 4294967295;
pub const _MM_K0_REG64: i32 = -1;
pub const _MM_PCOMCTRL_LT: u32 = 0;
pub const _MM_PCOMCTRL_LE: u32 = 1;
pub const _MM_PCOMCTRL_GT: u32 = 2;
pub const _MM_PCOMCTRL_GE: u32 = 3;
pub const _MM_PCOMCTRL_EQ: u32 = 4;
pub const _MM_PCOMCTRL_NEQ: u32 = 5;
pub const _MM_PCOMCTRL_FALSE: u32 = 6;
pub const _MM_PCOMCTRL_TRUE: u32 = 7;
pub const _MM_PERMUTE2_COPY: u32 = 0;
pub const _MM_PERMUTE2_ZEROIF1: u32 = 2;
pub const _MM_PERMUTE2_ZEROIF0: u32 = 3;
pub const _USE_STD_VECTOR_ALGORITHMS: u32 = 1;
pub const _HAS_ALIGNED_NEW: u32 = 1;
pub const _HAS_MEMCPY_MEMMOVE_INTRINSICS: u32 = 1;
pub const _HAS_U8_INTRINSICS: u32 = 0;
pub const _HAS_NEON_INTRINSICS: u32 = 0;
pub const _HAS_COUNTL_ZERO_INTRINSICS: u32 = 1;
pub const _HAS_TZCNT_BSF_INTRINSICS: u32 = 1;
pub const _HAS_POPCNT_INTRINSICS: u32 = 1;
pub const _HAS_CMATH_INTRINSICS: u32 = 0;
pub const TIME_UTC: u32 = 1;
pub const _ATOMIC_HAS_DCAS: u32 = 0;
pub const _STD_ATOMIC_USE_ARM64_LDAR_STLR: u32 = 0;
pub const ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const _CMPXCHG_MASK_OUT_PADDING_BITS: u32 = 0;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MIN: u32 = 0;
pub const LC_MAX: u32 = 5;
pub const _ENABLE_PER_THREAD_LOCALE: u32 = 1;
pub const _DISABLE_PER_THREAD_LOCALE: u32 = 2;
pub const _ENABLE_PER_THREAD_LOCALE_GLOBAL: u32 = 16;
pub const _DISABLE_PER_THREAD_LOCALE_GLOBAL: u32 = 32;
pub const _ENABLE_PER_THREAD_LOCALE_NEW: u32 = 256;
pub const _DISABLE_PER_THREAD_LOCALE_NEW: u32 = 512;
pub const _X_ALL: u32 = 0;
pub const _X_COLLATE: u32 = 1;
pub const _X_CTYPE: u32 = 2;
pub const _X_MONETARY: u32 = 3;
pub const _X_NUMERIC: u32 = 4;
pub const _X_TIME: u32 = 5;
pub const _X_MAX: u32 = 5;
pub const _X_MESSAGES: u32 = 6;
pub const _NCAT: u32 = 7;
pub const _XA: u32 = 256;
pub const _BB: u32 = 32;
pub const _CN: u32 = 8;
pub const _DI: u32 = 4;
pub const _LO: u32 = 2;
pub const _PU: u32 = 16;
pub const _SP: u32 = 64;
pub const _UP: u32 = 1;
pub const _XD: u32 = 128;
pub const _MAX_SIG_DIG_V2: u32 = 768;
pub const _MAX_EXP_DIG: u32 = 8;
pub const _FLOATING_BUFFER_SIZE: u32 = 792;
pub const _MAX_SIG_DIG_V1: u32 = 36;
pub const _ENABLE_V2_BEHAVIOR: u32 = 1000000000;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type std_align_val_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nothrow_t"][::std::mem::size_of::<std_nothrow_t>() - 1usize];
    ["Alignment of std_nothrow_t"][::std::mem::align_of::<std_nothrow_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}?nothrow@std@@3Unothrow_t@1@B"]
    pub static std_nothrow: std_nothrow_t;
}
pub const std__Uninitialized__Noinit: std__Uninitialized = 0;
pub type std__Uninitialized = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct std__Lockit {
    pub _Locktype: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Lockit"][::std::mem::size_of::<std__Lockit>() - 4usize];
    ["Alignment of std__Lockit"][::std::mem::align_of::<std__Lockit>() - 4usize];
    ["Offset of field: std__Lockit::_Locktype"]
        [::std::mem::offset_of!(std__Lockit, _Locktype) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}?_Lockit_ctor@_Lockit@std@@SAXH@Z"]
    pub fn std__Lockit__Lockit_ctor(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?_Lockit_dtor@_Lockit@std@@SAXH@Z"]
    pub fn std__Lockit__Lockit_dtor(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}??0_Lockit@std@@QEAA@XZ"]
    pub fn std__Lockit__Lockit(this: *mut std__Lockit);
}
extern "C" {
    #[link_name = "\u{1}??0_Lockit@std@@QEAA@H@Z"]
    pub fn std__Lockit__Lockit1(this: *mut std__Lockit, arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}??1_Lockit@std@@QEAA@XZ"]
    pub fn std__Lockit__Lockit_destructor(this: *mut std__Lockit);
}
impl std__Lockit {
    #[inline]
    pub unsafe fn _Lockit_ctor(arg1: ::std::os::raw::c_int) {
        std__Lockit__Lockit_ctor(arg1)
    }
    #[inline]
    pub unsafe fn _Lockit_dtor(arg1: ::std::os::raw::c_int) {
        std__Lockit__Lockit_dtor(arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Lockit__Lockit(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Lockit__Lockit1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Lockit__Lockit_destructor(self)
    }
}
pub type std_integral_constant_value_type<_Ty> = _Ty;
pub type std_integral_constant_type = u8;
pub type std_bool_constant = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std_enable_if_t = u8;
pub type std_conditional_type<_Ty1> = _Ty1;
pub type std_conditional_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Ty> = _Ty;
pub type std_remove_const_t = std_remove_const;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Ty> = _Ty;
pub type std_remove_volatile_t = std_remove_volatile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Ty> = _Ty;
pub type std_remove_cv__Apply = u8;
pub type std_remove_cv_t = std_remove_cv;
pub type std__Disjunction_type<_First> = _First;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_disjunction {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Ty> = _Ty;
pub type std_remove_reference__Const_thru_ref_type<_Ty> = _Ty;
pub type std_remove_reference_t = std_remove_reference;
pub type std__Const_thru_ref = std_remove_reference;
pub type std__Remove_cvref_t = std_remove_cv_t;
pub type std_streamoff = ::std::os::raw::c_longlong;
pub type std_streamsize = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_Statetype> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Statetype>>,
    pub _Myoff: std_streamoff,
    pub _Fpos: ::std::os::raw::c_longlong,
    pub _Mystate: _Statetype,
}
pub type std_streampos = std_fpos<_Mbstatet>;
pub type std_wstreampos = std_streampos;
pub type std_u16streampos = std_streampos;
pub type std_u32streampos = std_streampos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_ios = std_basic_ios<::std::os::raw::c_char>;
pub type std_streambuf = std_basic_streambuf<::std::os::raw::c_char>;
pub type std_istream = std_basic_istream<::std::os::raw::c_char>;
pub type std_ostream = std_basic_ostream<::std::os::raw::c_char>;
pub type std_iostream = std_basic_iostream<::std::os::raw::c_char>;
pub type std_stringbuf = std_basic_stringbuf;
pub type std_istringstream = std_basic_istringstream;
pub type std_ostringstream = std_basic_ostringstream;
pub type std_stringstream = std_basic_stringstream;
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wios = std_basic_ios<u16>;
pub type std_wstreambuf = std_basic_streambuf<u16>;
pub type std_wistream = std_basic_istream<u16>;
pub type std_wostream = std_basic_ostream<u16>;
pub type std_wiostream = std_basic_iostream<u16>;
pub type std_wstringbuf = std_basic_stringbuf;
pub type std_wistringstream = std_basic_istringstream;
pub type std_wostringstream = std_basic_ostringstream;
pub type std_wstringstream = std_basic_stringstream;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub const std_float_denorm_style_denorm_indeterminate: std_float_denorm_style = -1;
pub const std_float_denorm_style_denorm_absent: std_float_denorm_style = 0;
pub const std_float_denorm_style_denorm_present: std_float_denorm_style = 1;
pub type std_float_denorm_style = ::std::os::raw::c_int;
pub const std_float_round_style_round_indeterminate: std_float_round_style = -1;
pub const std_float_round_style_round_toward_zero: std_float_round_style = 0;
pub const std_float_round_style_round_to_nearest: std_float_round_style = 1;
pub const std_float_round_style_round_toward_infinity: std_float_round_style = 2;
pub const std_float_round_style_round_toward_neg_infinity: std_float_round_style = 3;
pub type std_float_round_style = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Num_base {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B"]
    pub static std__Num_base_has_denorm: std_float_denorm_style;
}
pub const std__Num_base_has_denorm_loss: bool = false;
pub const std__Num_base_has_infinity: bool = false;
pub const std__Num_base_has_quiet_NaN: bool = false;
pub const std__Num_base_has_signaling_NaN: bool = false;
pub const std__Num_base_is_bounded: bool = false;
pub const std__Num_base_is_exact: bool = false;
pub const std__Num_base_is_iec559: bool = false;
pub const std__Num_base_is_integer: bool = false;
pub const std__Num_base_is_modulo: bool = false;
pub const std__Num_base_is_signed: bool = false;
pub const std__Num_base_is_specialized: bool = false;
pub const std__Num_base_tinyness_before: bool = false;
pub const std__Num_base_traps: bool = false;
extern "C" {
    #[link_name = "\u{1}?round_style@_Num_base@std@@2W4float_round_style@2@B"]
    pub static std__Num_base_round_style: std_float_round_style;
}
pub const std__Num_base_digits: ::std::os::raw::c_int = 0;
pub const std__Num_base_digits10: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_digits10: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_exponent: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_exponent10: ::std::os::raw::c_int = 0;
pub const std__Num_base_min_exponent: ::std::os::raw::c_int = 0;
pub const std__Num_base_min_exponent10: ::std::os::raw::c_int = 0;
pub const std__Num_base_radix: ::std::os::raw::c_int = 0;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Num_base"][::std::mem::size_of::<std__Num_base>() - 1usize];
    ["Alignment of std__Num_base"][::std::mem::align_of::<std__Num_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numeric_limits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Num_int_base {
    pub _address: u8,
}
pub const std__Num_int_base_is_bounded: bool = true;
pub const std__Num_int_base_is_exact: bool = true;
pub const std__Num_int_base_is_integer: bool = true;
pub const std__Num_int_base_is_specialized: bool = true;
pub const std__Num_int_base_radix: ::std::os::raw::c_int = 2;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Num_int_base"][::std::mem::size_of::<std__Num_int_base>() - 1usize];
    ["Alignment of std__Num_int_base"][::std::mem::align_of::<std__Num_int_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Num_float_base {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B"]
    pub static std__Num_float_base_has_denorm: std_float_denorm_style;
}
pub const std__Num_float_base_has_infinity: bool = true;
pub const std__Num_float_base_has_quiet_NaN: bool = true;
pub const std__Num_float_base_has_signaling_NaN: bool = true;
pub const std__Num_float_base_is_bounded: bool = true;
pub const std__Num_float_base_is_iec559: bool = true;
pub const std__Num_float_base_is_signed: bool = true;
pub const std__Num_float_base_is_specialized: bool = true;
extern "C" {
    #[link_name = "\u{1}?round_style@_Num_float_base@std@@2W4float_round_style@2@B"]
    pub static std__Num_float_base_round_style: std_float_round_style;
}
pub const std__Num_float_base_radix: ::std::os::raw::c_int = 2;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Num_float_base"][::std::mem::size_of::<std__Num_float_base>() - 1usize];
    ["Alignment of std__Num_float_base"][::std::mem::align_of::<std__Num_float_base>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_bool__close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_bool__close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_signed_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_signed_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_short_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_short_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_int_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_int_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_float_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_float_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_double_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_double_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_double_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_double_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
pub type std_max_align_t = f64;
pub type std_byte = ::std::os::raw::c_uchar;
pub type std__Conjunction_type<_First> = _First;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_conjunction {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
pub type std__Identity_type<_Ty> = _Ty;
pub type std__Identity_t = std__Identity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Ty> = _Ty;
pub type std_add_const_t = std_add_const;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Ty> = _Ty;
pub type std_add_volatile_t = std_add_volatile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type<_Ty> = _Ty;
pub type std_add_cv_t = std_add_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Add_reference {
    pub _address: u8,
}
pub type std__Add_reference__Lvalue<_Ty> = _Ty;
pub type std__Add_reference__Rvalue<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std_add_lvalue_reference_type = std__Add_reference;
pub type std_add_lvalue_reference_t = std__Add_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_add_rvalue_reference_type = std__Add_reference;
pub type std_add_rvalue_reference_t = std__Add_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Ty> = _Ty;
pub type std_remove_extent_t = std_remove_extent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Ty> = _Ty;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_type<_Ty> = _Ty;
pub type std_remove_pointer_t = std_remove_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Add_pointer {
    pub _address: u8,
}
pub type std__Add_pointer_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_add_pointer_type = std__Add_pointer;
pub type std_add_pointer_t = std__Add_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Arg_types {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_memfunptr {
    pub _address: u8,
}
pub type std__Is_memfunptr__Bool_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_unique_object_representations {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_aggregate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_implicitly_default_constructible {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
pub type std__Is_assignable_no_precondition_check = std_is_assignable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
pub type std__Is_copy_assignable_no_precondition_check = std_is_copy_assignable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
pub type std__Is_move_assignable_no_precondition_check = std_is_move_assignable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
pub type std__Sign_base__Uty = std_remove_cv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
pub type std__Select__Apply<_Ty1> = _Ty1;
pub type std__Make_signed1 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = std_remove_cv;
pub type std_make_signed_t = std_make_signed;
pub type std__Make_unsigned1 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = std_remove_cv;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
pub type std__Aligned_storage__Next = ::std::os::raw::c_char;
extern "C" {
    #[link_name = "\u{1}_Fits"]
    pub static std__Aligned_storage__Fits: bool;
}
pub type std__Aligned_storage_type = u8;
pub type std__Aligned_storage_t = u8;
pub type std_aligned_storage_type = std__Aligned_storage_t;
pub type std_aligned_storage_t = std__Aligned_storage_t;
pub type std_aligned_union_type = std__Aligned_storage_t;
pub type std_aligned_union_t = u8;
pub type std__Underlying_type_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
pub type std_underlying_type_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay__Ty1 = std_remove_reference_t;
pub type std_decay__Ty2 = u8;
pub type std_decay_type = u8;
pub type std_decay_t = std_decay;
pub type std__Conditional_type<_Ty1> = _Ty1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Decayed_cond_oper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
pub type std_common_type_t = std_common_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_common_type_open0_close0"]
        [::std::mem::size_of::<std_common_type>() - 1usize];
    ["Align of template specialization: std_common_type_open0_close0"]
        [::std::mem::align_of::<std_common_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Common_type2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Common_type3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_specialization {
    pub _address: u8,
}
pub const std__Invoker_strategy__Functor: std__Invoker_strategy = 0;
pub const std__Invoker_strategy__Pmf_object: std__Invoker_strategy = 1;
pub const std__Invoker_strategy__Pmf_refwrap: std__Invoker_strategy = 2;
pub const std__Invoker_strategy__Pmf_pointer: std__Invoker_strategy = 3;
pub const std__Invoker_strategy__Pmd_object: std__Invoker_strategy = 4;
pub const std__Invoker_strategy__Pmd_refwrap: std__Invoker_strategy = 5;
pub const std__Invoker_strategy__Pmd_pointer: std__Invoker_strategy = 6;
pub type std__Invoker_strategy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_functor {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_functor@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_functor__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_functor"][::std::mem::size_of::<std__Invoker_functor>() - 1usize];
    ["Alignment of std__Invoker_functor"][::std::mem::align_of::<std__Invoker_functor>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmf_object {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmf_object@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmf_object__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmf_object"][::std::mem::size_of::<std__Invoker_pmf_object>() - 1usize];
    ["Alignment of std__Invoker_pmf_object"]
        [::std::mem::align_of::<std__Invoker_pmf_object>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmf_refwrap {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmf_refwrap@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmf_refwrap__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmf_refwrap"]
        [::std::mem::size_of::<std__Invoker_pmf_refwrap>() - 1usize];
    ["Alignment of std__Invoker_pmf_refwrap"]
        [::std::mem::align_of::<std__Invoker_pmf_refwrap>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmf_pointer {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmf_pointer@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmf_pointer__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmf_pointer"]
        [::std::mem::size_of::<std__Invoker_pmf_pointer>() - 1usize];
    ["Alignment of std__Invoker_pmf_pointer"]
        [::std::mem::align_of::<std__Invoker_pmf_pointer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmd_object {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmd_object@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmd_object__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmd_object"][::std::mem::size_of::<std__Invoker_pmd_object>() - 1usize];
    ["Alignment of std__Invoker_pmd_object"]
        [::std::mem::align_of::<std__Invoker_pmd_object>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmd_refwrap {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmd_refwrap@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmd_refwrap__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmd_refwrap"]
        [::std::mem::size_of::<std__Invoker_pmd_refwrap>() - 1usize];
    ["Alignment of std__Invoker_pmd_refwrap"]
        [::std::mem::align_of::<std__Invoker_pmd_refwrap>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoker_pmd_pointer {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Strategy@_Invoker_pmd_pointer@std@@2W4_Invoker_strategy@2@B"]
    pub static std__Invoker_pmd_pointer__Strategy: std__Invoker_strategy;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Invoker_pmd_pointer"]
        [::std::mem::size_of::<std__Invoker_pmd_pointer>() - 1usize];
    ["Alignment of std__Invoker_pmd_pointer"]
        [::std::mem::align_of::<std__Invoker_pmd_pointer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_nothrow_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoke_convertible {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoke_nothrow_convertible {
    pub _address: u8,
}
pub type std__Invoke_traits_common_type<_Result> = _Result;
pub type std__Invoke_traits_common__Is_invocable = std_true_type;
pub type std__Invoke_traits_common__Is_nothrow_invocable = std_bool_constant;
pub type std__Invoke_traits_common__Is_invocable_r = std_bool_constant;
pub type std__Invoke_traits_common__Is_nothrow_invocable_r = std_bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoke_traits_zero {
    pub _address: u8,
}
pub type std__Invoke_traits_zero__Is_invocable = std_false_type;
pub type std__Invoke_traits_zero__Is_nothrow_invocable = std_false_type;
pub type std__Invoke_traits_zero__Is_invocable_r = std_false_type;
pub type std__Invoke_traits_zero__Is_nothrow_invocable_r = std_false_type;
pub type std__Decltype_invoke_zero<_Callable> = _Callable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Invoke_traits_nonzero {
    pub _address: u8,
}
pub type std__Invoke_traits_nonzero__Is_invocable = std_false_type;
pub type std__Invoke_traits_nonzero__Is_nothrow_invocable = std_false_type;
pub type std__Invoke_traits_nonzero__Is_invocable_r = std_false_type;
pub type std__Invoke_traits_nonzero__Is_nothrow_invocable_r = std_false_type;
pub type std__Decltype_invoke_nonzero = u8;
pub type std__Select_invoke_traits = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
pub type std_result_of_t = std_result_of;
pub type std__Invoke_result_t = std__Select_invoke_traits;
pub type std__Is_invocable_r_ = std__Select_invoke_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_invoke_result {
    pub _address: u8,
}
pub type std_invoke_result_t = std__Select_invoke_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_args {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_argument_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_binary_args {
    pub _address: u8,
}
pub type std__Weak_types = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_has_ctor_from {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Ptr: *mut _Ty,
}
pub type std_reference_wrapper_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Swappable_with_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Swap_cannot_throw {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_nothrow_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_ADL_swap_detail__Has_ADL_swap {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_trivially_swappable {
    pub _address: u8,
}
pub const std__FNV_offset_basis: ::std::os::raw::c_ulonglong = 14695981039346656037;
pub const std__FNV_prime: ::std::os::raw::c_ulonglong = 1099511628211;
pub type std__Conditionally_enabled_hash_argument_type<_Kty> = _Kty;
pub type std__Conditionally_enabled_hash_result_type = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_float_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_float_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_nothrow_hashable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
pub type std_less_first_argument_type<_Ty> = _Ty;
pub type std_less_second_argument_type<_Ty> = _Ty;
pub type std_less_result_type = bool;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Floating_type_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Floating_type_traits_open0_float_close0"]
        [::std::mem::size_of::<std__Floating_type_traits>() - 1usize];
    ["Align of template specialization: std__Floating_type_traits_open0_float_close0"]
        [::std::mem::align_of::<std__Floating_type_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Floating_type_traits_open0_double_close0"]
        [::std::mem::size_of::<std__Floating_type_traits>() - 1usize];
    ["Align of template specialization: std__Floating_type_traits_open0_double_close0"]
        [::std::mem::align_of::<std__Floating_type_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Floating_type_traits_open0_long_double_close0"]
        [::std::mem::size_of::<std__Floating_type_traits>() - 1usize];
    ["Align of template specialization: std__Floating_type_traits_open0_long_double_close0"]
        [::std::mem::align_of::<std__Floating_type_traits>() - 1usize];
};
pub type std__Maybe_const = std_conditional_t;
extern "C" {
    #[link_name = "\u{1}?uncaught_exception@std@@YA_NXZ"]
    pub fn std_uncaught_exception() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?uncaught_exceptions@std@@YAHXZ"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
    pub _Data: __std_exception_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_exception"][::std::mem::size_of::<std_exception>() - 24usize];
    ["Alignment of std_exception"][::std::mem::align_of::<std_exception>() - 8usize];
    ["Offset of field: std_exception::_Data"]
        [::std::mem::offset_of!(std_exception, _Data) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_exception"][::std::mem::size_of::<std_bad_exception>() - 24usize];
    ["Alignment of std_bad_exception"][::std::mem::align_of::<std_bad_exception>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_alloc"][::std::mem::size_of::<std_bad_alloc>() - 24usize];
    ["Alignment of std_bad_alloc"][::std::mem::align_of::<std_bad_alloc>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_array_new_length"]
        [::std::mem::size_of::<std_bad_array_new_length>() - 24usize];
    ["Alignment of std_bad_array_new_length"]
        [::std::mem::align_of::<std_bad_array_new_length>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_exception_ptr {
    pub _Data1: *mut ::std::os::raw::c_void,
    pub _Data2: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_exception_ptr"][::std::mem::size_of::<std_exception_ptr>() - 16usize];
    ["Alignment of std_exception_ptr"][::std::mem::align_of::<std_exception_ptr>() - 8usize];
    ["Offset of field: std_exception_ptr::_Data1"]
        [::std::mem::offset_of!(std_exception_ptr, _Data1) - 0usize];
    ["Offset of field: std_exception_ptr::_Data2"]
        [::std::mem::offset_of!(std_exception_ptr, _Data2) - 8usize];
};
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub _Exc: std_exception_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nested_exception"][::std::mem::size_of::<std_nested_exception>() - 24usize];
    ["Alignment of std_nested_exception"][::std::mem::align_of::<std_nested_exception>() - 8usize];
    ["Offset of field: std_nested_exception::_Exc"]
        [::std::mem::offset_of!(std_nested_exception, _Exc) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__With_nested_v2<_Uty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Uty>>,
    pub _base: _Uty,
    pub _base_1: std_nested_exception,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_variant_access {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_variant_access"][::std::mem::size_of::<std_bad_variant_access>() - 24usize];
    ["Alignment of std_bad_variant_access"]
        [::std::mem::align_of::<std_bad_variant_access>() - 8usize];
};
pub const std_hardware_constructive_interference_size: ::std::os::raw::c_ulonglong = 64;
pub const std_hardware_destructive_interference_size: ::std::os::raw::c_ulonglong = 64;
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}?set_new_handler@std@@YAP6AXXZP6AXXZ@Z"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
extern "C" {
    #[link_name = "\u{1}?get_new_handler@std@@YAP6AXXZXZ"]
    pub fn std_get_new_handler() -> std_new_handler;
}
pub const std_memory_order_memory_order_relaxed: std_memory_order = 0;
pub const std_memory_order_memory_order_consume: std_memory_order = 1;
pub const std_memory_order_memory_order_acquire: std_memory_order = 2;
pub const std_memory_order_memory_order_release: std_memory_order = 3;
pub const std_memory_order_memory_order_acq_rel: std_memory_order = 4;
pub const std_memory_order_memory_order_seq_cst: std_memory_order = 5;
pub type std_memory_order = ::std::os::raw::c_int;
pub type std__Atomic_counter_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _First: *const _Elem,
    pub _Last: *const _Elem,
}
pub type std_initializer_list_value_type<_Elem> = _Elem;
pub type std_initializer_list_reference<_Elem> = *const _Elem;
pub type std_initializer_list_const_reference<_Elem> = *const _Elem;
pub type std_initializer_list_size_type = ::std::os::raw::c_ulonglong;
pub type std_initializer_list_iterator<_Elem> = *const _Elem;
pub type std_initializer_list_const_iterator<_Elem> = *const _Elem;
pub type std_integer_sequence_value_type<_Ty> = _Ty;
pub type std_make_integer_sequence = u8;
pub type std_index_sequence = u8;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_piecewise_construct_t"]
        [::std::mem::size_of::<std_piecewise_construct_t>() - 1usize];
    ["Alignment of std_piecewise_construct_t"]
        [::std::mem::align_of::<std_piecewise_construct_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}?piecewise_construct@std@@3Upiecewise_construct_t@1@B"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
pub type std_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair<_Ty1, _Ty2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty2>>,
    pub first: _Ty1,
    pub second: _Ty2,
}
pub type std_pair_first_type<_Ty1> = _Ty1;
pub type std_pair_second_type<_Ty2> = _Ty2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Unrefwrap_helper {
    pub _address: u8,
}
pub type std__Unrefwrap_helper_type<_Ty> = _Ty;
pub type std__Unrefwrap_t = std__Unrefwrap_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_size_sfinae {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_in_place_t"][::std::mem::size_of::<std_in_place_t>() - 1usize];
    ["Alignment of std_in_place_t"][::std::mem::align_of::<std_in_place_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}?in_place@std@@3Uin_place_t@1@B"]
    pub static std_in_place: std_in_place_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_type_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_allocator_type {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_allocator_arg_t"][::std::mem::size_of::<std_allocator_arg_t>() - 1usize];
    ["Alignment of std_allocator_arg_t"][::std::mem::align_of::<std_allocator_arg_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}?allocator_arg@std@@3Uallocator_arg_t@1@B"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_input_iterator_tag"][::std::mem::size_of::<std_input_iterator_tag>() - 1usize];
    ["Alignment of std_input_iterator_tag"]
        [::std::mem::align_of::<std_input_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_output_iterator_tag"][::std::mem::size_of::<std_output_iterator_tag>() - 1usize];
    ["Alignment of std_output_iterator_tag"]
        [::std::mem::align_of::<std_output_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_forward_iterator_tag"]
        [::std::mem::size_of::<std_forward_iterator_tag>() - 1usize];
    ["Alignment of std_forward_iterator_tag"]
        [::std::mem::align_of::<std_forward_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bidirectional_iterator_tag"]
        [::std::mem::size_of::<std_bidirectional_iterator_tag>() - 1usize];
    ["Alignment of std_bidirectional_iterator_tag"]
        [::std::mem::align_of::<std_bidirectional_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_random_access_iterator_tag"]
        [::std::mem::size_of::<std_random_access_iterator_tag>() - 1usize];
    ["Alignment of std_random_access_iterator_tag"]
        [::std::mem::align_of::<std_random_access_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Iterator_traits_base {
    pub _address: u8,
}
pub type std__Iterator_traits_pointer_base_iterator_category = std_random_access_iterator_tag;
pub type std__Iterator_traits_pointer_base_value_type = std_remove_cv_t;
pub type std__Iterator_traits_pointer_base_difference_type = ::std::os::raw::c_longlong;
pub type std__Iterator_traits_pointer_base_pointer<_Ty> = *mut _Ty;
pub type std__Iterator_traits_pointer_base_reference<_Ty> = *mut _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_first_parameter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Replace_first_parameter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_ptr_difference_type {
    pub _address: u8,
}
pub type std__Get_ptr_difference_type_type = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_rebind_alias {
    pub _address: u8,
}
pub type std__Get_rebind_alias_type = std__Replace_first_parameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Ptr_traits_base {
    pub _address: u8,
}
pub type std__Ptr_traits_base_pointer<_Ty> = _Ty;
pub type std__Ptr_traits_base_element_type<_Elem> = _Elem;
pub type std__Ptr_traits_base_difference_type = std__Get_ptr_difference_type;
pub type std__Ptr_traits_base_rebind = std__Get_rebind_alias;
pub type std__Ptr_traits_base__Reftype = *mut std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Ptr_traits_sfinae_layer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
pub type std_plus_first_argument_type<_Ty> = _Ty;
pub type std_plus_second_argument_type<_Ty> = _Ty;
pub type std_plus_result_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
pub type std_minus_first_argument_type<_Ty> = _Ty;
pub type std_minus_second_argument_type<_Ty> = _Ty;
pub type std_minus_result_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
pub type std_multiplies_first_argument_type<_Ty> = _Ty;
pub type std_multiplies_second_argument_type<_Ty> = _Ty;
pub type std_multiplies_result_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
pub type std_equal_to_first_argument_type<_Ty> = _Ty;
pub type std_equal_to_second_argument_type<_Ty> = _Ty;
pub type std_equal_to_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
pub type std_not_equal_to_first_argument_type<_Ty> = _Ty;
pub type std_not_equal_to_second_argument_type<_Ty> = _Ty;
pub type std_not_equal_to_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
pub type std_greater_first_argument_type<_Ty> = _Ty;
pub type std_greater_second_argument_type<_Ty> = _Ty;
pub type std_greater_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
pub type std_greater_equal_first_argument_type<_Ty> = _Ty;
pub type std_greater_equal_second_argument_type<_Ty> = _Ty;
pub type std_greater_equal_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
pub type std_less_equal_first_argument_type<_Ty> = _Ty;
pub type std_less_equal_second_argument_type<_Ty> = _Ty;
pub type std_less_equal_result_type = bool;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_plus_open0_void_close0"]
        [::std::mem::size_of::<std_plus>() - 1usize];
    ["Align of template specialization: std_plus_open0_void_close0"]
        [::std::mem::align_of::<std_plus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_minus_open0_void_close0"]
        [::std::mem::size_of::<std_minus>() - 1usize];
    ["Align of template specialization: std_minus_open0_void_close0"]
        [::std::mem::align_of::<std_minus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::size_of::<std_multiplies>() - 1usize];
    ["Align of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::align_of::<std_multiplies>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_not_equal_to>() - 1usize];
    ["Align of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_not_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_open0_void_close0"]
        [::std::mem::size_of::<std_greater>() - 1usize];
    ["Align of template specialization: std_greater_open0_void_close0"]
        [::std::mem::align_of::<std_greater>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::size_of::<std_greater_equal>() - 1usize];
    ["Align of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::align_of::<std_greater_equal>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::size_of::<std_less_equal>() - 1usize];
    ["Align of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::align_of::<std_less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Ref_fn<_Fx> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fx>>,
    pub _Fn: *mut _Fx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Unused_parameter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Unused_parameter"][::std::mem::size_of::<std__Unused_parameter>() - 1usize];
    ["Alignment of std__Unused_parameter"]
        [::std::mem::align_of::<std__Unused_parameter>() - 1usize];
};
pub type std__Algorithm_int_t = std_conditional_t;
pub type std__Iter_ref_t = std_iterator_traits;
pub type std__Iter_value_t = std_iterator_traits;
pub type std__Iter_diff_t = std_iterator_traits;
pub type std__Make_unsigned_like_t = std_make_unsigned_t;
pub type std__Common_diff_t = std_common_type_t;
pub type std__Iter_cat_t = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_checked_helper {
    pub _address: u8,
}
pub type std__Unwrapped_t = std__Remove_cvref_t;
pub type std__Unwrapped_unverified_t = std__Remove_cvref_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Distance_unknown {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Distance_unknown"][::std::mem::size_of::<std__Distance_unknown>() - 1usize];
    ["Alignment of std__Distance_unknown"]
        [::std::mem::align_of::<std__Distance_unknown>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_allocator {
    pub _base: std_false_type,
}
pub type std__Guide_key_t = std_remove_const_t;
pub type std__Guide_val_t = std_iterator_traits;
pub type std__Guide_pair_t = std_pair<std_add_const_t, std_iterator_traits>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_execution_policy {
    pub _base: std_false_type,
}
pub type std__Enable_if_execution_policy_t = std_remove_reference_t;
pub type std__Unwrap_enum_type = std_underlying_type_t;
pub type std__Unwrap_enum_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_BidIt> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_BidIt>>,
    pub current: _BidIt,
}
pub type std_reverse_iterator_iterator_type<_BidIt> = _BidIt;
pub type std_reverse_iterator_iterator_category = std__Iter_cat_t;
pub type std_reverse_iterator_value_type = std__Iter_value_t;
pub type std_reverse_iterator_difference_type = std__Iter_diff_t;
pub type std_reverse_iterator_pointer = std_iterator_traits;
pub type std_reverse_iterator_reference = std__Iter_ref_t;
pub type std_reverse_iterator__Prevent_inheriting_unwrap<_BidIt> = std_reverse_iterator<_BidIt>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Default_sentinel {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Default_sentinel"][::std::mem::size_of::<std__Default_sentinel>() - 1usize];
    ["Alignment of std__Default_sentinel"]
        [::std::mem::align_of::<std__Default_sentinel>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Move_iterator_category {
    pub _address: u8,
}
pub type std__Move_iterator_category_iterator_category = std__Iter_cat_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
    pub _Current: std_move_iterator_iterator_type<_Iter>,
}
pub type std_move_iterator_iterator_type<_Iter> = _Iter;
pub type std_move_iterator_value_type = std__Iter_value_t;
pub type std_move_iterator_difference_type = std__Iter_diff_t;
pub type std_move_iterator_pointer<_Iter> = _Iter;
pub type std_move_iterator_reference = std_conditional_t;
pub type std_move_iterator__Prevent_inheriting_unwrap<_Iter> = std_move_iterator<_Iter>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Trivial_cat {
    pub _address: u8,
}
pub type std__Trivial_cat__USource = std__Unwrap_enum_t;
pub type std__Trivial_cat__UDest = std__Unwrap_enum_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__False_trivial_cat {
    pub _address: u8,
}
pub const std__False_trivial_cat__Bitcopy_constructible: bool = false;
pub const std__False_trivial_cat__Bitcopy_assignable: bool = false;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__False_trivial_cat"][::std::mem::size_of::<std__False_trivial_cat>() - 1usize];
    ["Alignment of std__False_trivial_cat"]
        [::std::mem::align_of::<std__False_trivial_cat>() - 1usize];
};
pub type std__Sent_copy_cat = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_character {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Is_character_open0_char_close0"]
        [::std::mem::size_of::<std__Is_character>() - 1usize];
    ["Align of template specialization: std__Is_character_open0_char_close0"]
        [::std::mem::align_of::<std__Is_character>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Is_character_open0_signed_char_close0"]
        [::std::mem::size_of::<std__Is_character>() - 1usize];
    ["Align of template specialization: std__Is_character_open0_signed_char_close0"]
        [::std::mem::align_of::<std__Is_character>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Is_character_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std__Is_character>() - 1usize];
    ["Align of template specialization: std__Is_character_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std__Is_character>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_character_or_bool {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Is_character_or_bool_open0_bool__close0"]
        [::std::mem::size_of::<std__Is_character_or_bool>() - 1usize];
    ["Align of template specialization: std__Is_character_or_bool_open0_bool__close0"]
        [::std::mem::align_of::<std__Is_character_or_bool>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_character_or_byte_or_bool {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Is_character_or_byte_or_bool_open0_std_byte_close0"]
        [::std::mem::size_of::<std__Is_character_or_byte_or_bool>() - 1usize];
    ["Align of template specialization: std__Is_character_or_byte_or_bool_open0_std_byte_close0"]
        [::std::mem::align_of::<std__Is_character_or_byte_or_bool>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Lex_compare_memcmp_classify_pred {
    pub _address: u8,
}
pub type std__Lex_compare_memcmp_classify_pred__Pred = ::std::os::raw::c_void;
pub type std__Lex_compare_memcmp_classify = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Vector_alg_in_find_is_safe_object_pointers {
    pub _base: std_false_type,
}
pub const std__TrimResult__KeepTrimming: std__TrimResult = 0;
pub const std__TrimResult__HaveWorkAfterTrimming: std__TrimResult = 1;
pub const std__TrimResult__ReturnFalse: std__TrimResult = 2;
pub const std__TrimResult__ReturnTrue: std__TrimResult = 3;
pub type std__TrimResult = ::std::os::raw::c_uchar;
extern "C" {
    #[link_name = "\u{1}?_Xbad_alloc@std@@YAXXZ"]
    pub fn std__Xbad_alloc();
}
extern "C" {
    #[link_name = "\u{1}?_Xinvalid_argument@std@@YAXPEBD@Z"]
    pub fn std__Xinvalid_argument(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_Xlength_error@std@@YAXPEBD@Z"]
    pub fn std__Xlength_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_Xout_of_range@std@@YAXPEBD@Z"]
    pub fn std__Xout_of_range(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_Xoverflow_error@std@@YAXPEBD@Z"]
    pub fn std__Xoverflow_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_Xruntime_error@std@@YAXPEBD@Z"]
    pub fn std__Xruntime_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_XGetLastError@std@@YAXXZ"]
    pub fn std__XGetLastError();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Ty> = _Ty;
pub type std_iterator_difference_type<_Diff> = _Diff;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_monostate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_monostate"][::std::mem::size_of::<std_monostate>() - 1usize];
    ["Alignment of std_monostate"][::std::mem::align_of::<std_monostate>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Tidy_guard<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Target: *mut _Ty,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Tidy_deallocate_guard<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Target: *mut _Ty,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Default_allocate_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Default_allocate_traits"]
        [::std::mem::size_of::<std__Default_allocate_traits>() - 1usize];
    ["Alignment of std__Default_allocate_traits"]
        [::std::mem::align_of::<std__Default_allocate_traits>() - 1usize];
};
pub const std__Big_allocation_threshold: ::std::os::raw::c_ulonglong = 4096;
pub const std__Big_allocation_alignment: ::std::os::raw::c_ulonglong = 32;
pub const std__Non_user_size: ::std::os::raw::c_ulonglong = 39;
pub const std__Big_allocation_sentinel: ::std::os::raw::c_ulonglong = 18085043209519168250;
pub type std__Rebind_pointer_t = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_pointer_type {
    pub _address: u8,
}
pub type std__Get_pointer_type_type = *mut [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_const_pointer_type {
    pub _address: u8,
}
pub type std__Get_const_pointer_type__Ptrty = std__Get_pointer_type;
pub type std__Get_const_pointer_type__Valty = [u8; 0usize];
pub type std__Get_const_pointer_type_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_void_pointer_type {
    pub _address: u8,
}
pub type std__Get_void_pointer_type__Ptrty = std__Get_pointer_type;
pub type std__Get_void_pointer_type_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_const_void_pointer_type {
    pub _address: u8,
}
pub type std__Get_const_void_pointer_type__Ptrty = std__Get_pointer_type;
pub type std__Get_const_void_pointer_type_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_difference_type {
    pub _address: u8,
}
pub type std__Get_difference_type__Ptrty = std__Get_pointer_type;
pub type std__Get_difference_type_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_size_type {
    pub _address: u8,
}
pub type std__Get_size_type_type = std_make_unsigned_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_propagate_on_container_copy {
    pub _address: u8,
}
pub type std__Get_propagate_on_container_copy_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_propagate_on_container_move {
    pub _address: u8,
}
pub type std__Get_propagate_on_container_move_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_propagate_on_container_swap {
    pub _address: u8,
}
pub type std__Get_propagate_on_container_swap_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_is_always_equal {
    pub _address: u8,
}
pub type std__Get_is_always_equal_type = std_bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_rebind_type {
    pub _address: u8,
}
pub type std__Get_rebind_type_type = std__Replace_first_parameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_default_allocator {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_no_allocator_construct {
    pub _base: std_true_type,
}
pub type std__Uses_default_construct = std_disjunction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_no_alloc_destroy {
    pub _base: std_true_type,
}
pub type std__Uses_default_destroy = std_disjunction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_allocate_hint {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_max_size {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Has_select_on_container_copy_construction {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Normal_allocator_traits {
    pub _address: u8,
}
pub type std__Normal_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std__Normal_allocator_traits_value_type = [u8; 0usize];
pub type std__Normal_allocator_traits_pointer = std__Get_pointer_type;
pub type std__Normal_allocator_traits_const_pointer = std__Get_const_pointer_type;
pub type std__Normal_allocator_traits_void_pointer = std__Get_void_pointer_type;
pub type std__Normal_allocator_traits_const_void_pointer = std__Get_const_void_pointer_type;
pub type std__Normal_allocator_traits_size_type = std__Get_size_type;
pub type std__Normal_allocator_traits_difference_type = std__Get_difference_type;
pub type std__Normal_allocator_traits_propagate_on_container_copy_assignment =
    std__Get_propagate_on_container_copy;
pub type std__Normal_allocator_traits_propagate_on_container_move_assignment =
    std__Get_propagate_on_container_move;
pub type std__Normal_allocator_traits_propagate_on_container_swap =
    std__Get_propagate_on_container_swap;
pub type std__Normal_allocator_traits_is_always_equal = std__Get_is_always_equal;
pub type std__Normal_allocator_traits_rebind_alloc = std__Get_rebind_type;
pub type std__Normal_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Default_allocator_traits {
    pub _address: u8,
}
pub type std__Default_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std__Default_allocator_traits_value_type = [u8; 0usize];
pub type std__Default_allocator_traits_pointer = *mut std__Default_allocator_traits_value_type;
pub type std__Default_allocator_traits_const_pointer =
    *const std__Default_allocator_traits_value_type;
pub type std__Default_allocator_traits_void_pointer = *mut ::std::os::raw::c_void;
pub type std__Default_allocator_traits_const_void_pointer = *const ::std::os::raw::c_void;
pub type std__Default_allocator_traits_size_type = ::std::os::raw::c_ulonglong;
pub type std__Default_allocator_traits_difference_type = ::std::os::raw::c_longlong;
pub type std__Default_allocator_traits_propagate_on_container_copy_assignment = std_false_type;
pub type std__Default_allocator_traits_propagate_on_container_move_assignment = std_true_type;
pub type std__Default_allocator_traits_propagate_on_container_swap = std_false_type;
pub type std__Default_allocator_traits_is_always_equal = std_true_type;
pub type std__Default_allocator_traits_rebind_alloc = std_allocator;
pub type std__Default_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub const std__Pocma_values__Equal_allocators: std__Pocma_values = 0;
pub const std__Pocma_values__Propagate_allocators: std__Pocma_values = 1;
pub const std__Pocma_values__No_propagate_allocators: std__Pocma_values = 2;
pub type std__Pocma_values = ::std::os::raw::c_int;
pub type std__Rebind_alloc_t = std_allocator_traits;
pub type std__Maybe_rebind_alloc_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Simple_types {
    pub _address: u8,
}
pub type std__Simple_types_value_type<_Value_type> = _Value_type;
pub type std__Simple_types_size_type = ::std::os::raw::c_ulonglong;
pub type std__Simple_types_difference_type = ::std::os::raw::c_longlong;
pub type std__Simple_types_pointer<_Value_type> = *mut std__Simple_types_value_type<_Value_type>;
pub type std__Simple_types_const_pointer<_Value_type> =
    *const std__Simple_types_value_type<_Value_type>;
pub const std__Asan_granularity: ::std::os::raw::c_ulonglong = 8;
pub const std__Asan_granularity_mask: ::std::os::raw::c_ulonglong = 7;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Asan_aligned_pointers {
    pub _First: *const ::std::os::raw::c_void,
    pub _End: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Asan_aligned_pointers"]
        [::std::mem::size_of::<std__Asan_aligned_pointers>() - 16usize];
    ["Alignment of std__Asan_aligned_pointers"]
        [::std::mem::align_of::<std__Asan_aligned_pointers>() - 8usize];
    ["Offset of field: std__Asan_aligned_pointers::_First"]
        [::std::mem::offset_of!(std__Asan_aligned_pointers, _First) - 0usize];
    ["Offset of field: std__Asan_aligned_pointers::_End"]
        [::std::mem::offset_of!(std__Asan_aligned_pointers, _End) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator__From_primary = std_allocator;
pub type std_allocator_value_type<_Ty> = _Ty;
pub type std_allocator_pointer<_Ty> = *mut _Ty;
pub type std_allocator_const_pointer<_Ty> = *const _Ty;
pub type std_allocator_reference<_Ty> = *mut _Ty;
pub type std_allocator_const_reference<_Ty> = *const _Ty;
pub type std_allocator_size_type = ::std::os::raw::c_ulonglong;
pub type std_allocator_difference_type = ::std::os::raw::c_longlong;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type std__Guide_size_type_t = std_allocator_traits;
pub type std__Alloc_ptr_t = std_allocator_traits;
pub type std__Alloc_size_t = std_allocator_traits;
#[repr(C)]
#[derive(Debug)]
pub struct std__Alloc_construct_ptr<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _Al: *mut _Alloc,
    pub _Ptr: std__Alloc_construct_ptr_pointer,
}
pub type std__Alloc_construct_ptr_pointer = std__Alloc_ptr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fake_allocator {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fake_allocator"][::std::mem::size_of::<std__Fake_allocator>() - 1usize];
    ["Alignment of std__Fake_allocator"][::std::mem::align_of::<std__Fake_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Container_base0 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Container_base0"][::std::mem::size_of::<std__Container_base0>() - 1usize];
    ["Alignment of std__Container_base0"][::std::mem::align_of::<std__Container_base0>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Iterator_base0 {
    pub _address: u8,
}
pub const std__Iterator_base0__Unwrap_when_unverified: bool = true;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Iterator_base0"][::std::mem::size_of::<std__Iterator_base0>() - 1usize];
    ["Alignment of std__Iterator_base0"][::std::mem::align_of::<std__Iterator_base0>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Container_proxy {
    pub _Mycont: *const std__Container_base12,
    pub _Myfirstiter: *mut std__Iterator_base12,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Container_proxy"][::std::mem::size_of::<std__Container_proxy>() - 16usize];
    ["Alignment of std__Container_proxy"][::std::mem::align_of::<std__Container_proxy>() - 8usize];
    ["Offset of field: std__Container_proxy::_Mycont"]
        [::std::mem::offset_of!(std__Container_proxy, _Mycont) - 0usize];
    ["Offset of field: std__Container_proxy::_Myfirstiter"]
        [::std::mem::offset_of!(std__Container_proxy, _Myfirstiter) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Container_base12 {
    pub _Myproxy: *mut std__Container_proxy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Container_base12"][::std::mem::size_of::<std__Container_base12>() - 8usize];
    ["Alignment of std__Container_base12"]
        [::std::mem::align_of::<std__Container_base12>() - 8usize];
    ["Offset of field: std__Container_base12::_Myproxy"]
        [::std::mem::offset_of!(std__Container_base12, _Myproxy) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Iterator_base12 {
    pub _Myproxy: *mut std__Container_proxy,
    pub _Mynextiter: *mut std__Iterator_base12,
}
pub const std__Iterator_base12__Unwrap_when_unverified: bool = true;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Iterator_base12"][::std::mem::size_of::<std__Iterator_base12>() - 16usize];
    ["Alignment of std__Iterator_base12"][::std::mem::align_of::<std__Iterator_base12>() - 8usize];
    ["Offset of field: std__Iterator_base12::_Myproxy"]
        [::std::mem::offset_of!(std__Iterator_base12, _Myproxy) - 0usize];
    ["Offset of field: std__Iterator_base12::_Mynextiter"]
        [::std::mem::offset_of!(std__Iterator_base12, _Mynextiter) - 8usize];
};
pub type std__Container_base = std__Container_base0;
pub type std__Iterator_base = std__Iterator_base0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Leave_proxy_unbound {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Leave_proxy_unbound"]
        [::std::mem::size_of::<std__Leave_proxy_unbound>() - 1usize];
    ["Alignment of std__Leave_proxy_unbound"]
        [::std::mem::align_of::<std__Leave_proxy_unbound>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fake_proxy_ptr_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fake_proxy_ptr_impl"]
        [::std::mem::size_of::<std__Fake_proxy_ptr_impl>() - 1usize];
    ["Alignment of std__Fake_proxy_ptr_impl"]
        [::std::mem::align_of::<std__Fake_proxy_ptr_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Basic_container_proxy_ptr12 {
    pub _Ptr: *mut std__Container_proxy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Basic_container_proxy_ptr12"]
        [::std::mem::size_of::<std__Basic_container_proxy_ptr12>() - 8usize];
    ["Alignment of std__Basic_container_proxy_ptr12"]
        [::std::mem::align_of::<std__Basic_container_proxy_ptr12>() - 8usize];
    ["Offset of field: std__Basic_container_proxy_ptr12::_Ptr"]
        [::std::mem::offset_of!(std__Basic_container_proxy_ptr12, _Ptr) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Container_proxy_ptr12<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _base: std__Basic_container_proxy_ptr12,
    pub _Al: *mut _Alloc,
}
extern "C" {
    #[link_name = "\u{1}?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    pub static std__Fake_alloc: std__Fake_allocator;
}
pub type std__Container_proxy_ptr = std__Fake_proxy_ptr_impl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Zero_then_variadic_args_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Zero_then_variadic_args_t"]
        [::std::mem::size_of::<std__Zero_then_variadic_args_t>() - 1usize];
    ["Alignment of std__Zero_then_variadic_args_t"]
        [::std::mem::align_of::<std__Zero_then_variadic_args_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__One_then_variadic_args_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__One_then_variadic_args_t"]
        [::std::mem::size_of::<std__One_then_variadic_args_t>() - 1usize];
    ["Alignment of std__One_then_variadic_args_t"]
        [::std::mem::align_of::<std__One_then_variadic_args_t>() - 1usize];
};
pub type std__Compressed_pair__Mybase<_Ty1> = _Ty1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Move_allocator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Move_allocator_tag"][::std::mem::size_of::<std__Move_allocator_tag>() - 1usize];
    ["Alignment of std__Move_allocator_tag"]
        [::std::mem::align_of::<std__Move_allocator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Uninitialized_backout<_NoThrowFwdIt> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NoThrowFwdIt>>,
    pub _First: _NoThrowFwdIt,
    pub _Last: _NoThrowFwdIt,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Uninitialized_backout_al<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _First: std__Uninitialized_backout_al_pointer,
    pub _Last: std__Uninitialized_backout_al_pointer,
    pub _Al: *mut _Alloc,
}
pub type std__Uninitialized_backout_al_pointer = std__Alloc_ptr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__In_place_key_extract_set {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__In_place_key_extract_map {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Wrap<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Value: _Ty,
}
#[repr(C)]
pub struct std__Alloc_temporary2<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _Al: *mut _Alloc,
    pub __bindgen_anon_1: std__Alloc_temporary2__bindgen_ty_1,
}
pub type std__Alloc_temporary2_value_type = [u8; 0usize];
pub type std__Alloc_temporary2__Traits = std_allocator_traits;
#[repr(C)]
#[repr(align(1))]
pub struct std__Alloc_temporary2__bindgen_ty_1 {
    pub _Value: __BindgenUnionField<std__Alloc_temporary2_value_type>,
    pub bindgen_union_field: [u8; 0usize],
}
pub type std__Normally_bound_ref<_Ty> = _Ty;
pub type std__Ebco_base__Mybase<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Is_transparent {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_constructible_val {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_assignable_val {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_convert_val {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_perfect_val {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Ignore {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Ignore"][::std::mem::size_of::<std__Ignore>() - 1usize];
    ["Alignment of std__Ignore"][::std::mem::align_of::<std__Ignore>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}?ignore@std@@3U_Ignore@1@B"]
    pub static std_ignore: std__Ignore;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_val<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Val: _Ty,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Exact_args_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Exact_args_t"][::std::mem::size_of::<std__Exact_args_t>() - 1usize];
    ["Alignment of std__Exact_args_t"][::std::mem::align_of::<std__Exact_args_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Unpack_tuple_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Unpack_tuple_t"][::std::mem::size_of::<std__Unpack_tuple_t>() - 1usize];
    ["Alignment of std__Unpack_tuple_t"][::std::mem::align_of::<std__Unpack_tuple_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Alloc_exact_args_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Alloc_exact_args_t"][::std::mem::size_of::<std__Alloc_exact_args_t>() - 1usize];
    ["Alignment of std__Alloc_exact_args_t"]
        [::std::mem::align_of::<std__Alloc_exact_args_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Alloc_unpack_tuple_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Alloc_unpack_tuple_t"]
        [::std::mem::size_of::<std__Alloc_unpack_tuple_t>() - 1usize];
    ["Alignment of std__Alloc_unpack_tuple_t"]
        [::std::mem::align_of::<std__Alloc_unpack_tuple_t>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_tuple_open0_close0"]
        [::std::mem::size_of::<std_tuple>() - 1usize];
    ["Align of template specialization: std_tuple_open0_close0"]
        [::std::mem::align_of::<std_tuple>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tuple_element {
    pub _address: u8,
}
pub type std__Tuple_cat1 = u8;
#[repr(C)]
pub struct std_pmr_memory_resource__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_pmr_memory_resource {
    pub vtable_: *const std_pmr_memory_resource__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_pmr_memory_resource"][::std::mem::size_of::<std_pmr_memory_resource>() - 8usize];
    ["Alignment of std_pmr_memory_resource"]
        [::std::mem::align_of::<std_pmr_memory_resource>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_Aligned_get_default_resource"]
    pub fn std_pmr__Aligned_get_default_resource() -> *mut std_pmr_memory_resource;
}
extern "C" {
    #[link_name = "\u{1}_Unaligned_get_default_resource"]
    pub fn std_pmr__Unaligned_get_default_resource() -> *mut std_pmr_memory_resource;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pmr_polymorphic_allocator {
    pub _Resource: *mut std_pmr_memory_resource,
}
pub type std_pmr_polymorphic_allocator_value_type<_Ty> = _Ty;
pub type std_pmr_basic_string = std_basic_string;
pub type std_pmr_string = std_basic_string;
pub type std_pmr_u16string = std_basic_string;
pub type std_pmr_u32string = std_basic_string;
pub type std_pmr_wstring = std_basic_string;
pub type std_pmr_vector = std_vector;
pub type std_pmr_map = std_map;
pub type std_pmr_multimap = std_multimap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Char_traits {
    pub _address: u8,
}
pub type std__Char_traits_char_type<_Elem> = _Elem;
pub type std__Char_traits_int_type<_Int_type> = _Int_type;
pub type std__Char_traits_pos_type = std_streampos;
pub type std__Char_traits_off_type = std_streamoff;
pub type std__Char_traits_state_type = _Mbstatet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__WChar_traits {
    pub _address: u8,
}
pub type std__WChar_traits__Primary_char_traits = std__Char_traits;
pub type std__WChar_traits_char_type<_Elem> = _Elem;
pub type std__WChar_traits_int_type = ::std::os::raw::c_ushort;
pub type std__WChar_traits_pos_type = std_streampos;
pub type std__WChar_traits_off_type = std_streamoff;
pub type std__WChar_traits_state_type = _Mbstatet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Narrow_char_traits {
    pub _address: u8,
}
pub type std__Narrow_char_traits__Primary_char_traits = std__Char_traits;
pub type std__Narrow_char_traits_char_type<_Elem> = _Elem;
pub type std__Narrow_char_traits_int_type<_Int_type> = _Int_type;
pub type std__Narrow_char_traits_pos_type = std_streampos;
pub type std__Narrow_char_traits_off_type = std_streamoff;
pub type std__Narrow_char_traits_state_type = _Mbstatet;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type std__Traits_ch_t = [u8; 0usize];
pub type std__Traits_ptr_t = *const [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__String_view_iterator {
    pub _Myptr: std__String_view_iterator_pointer,
}
pub type std__String_view_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__String_view_iterator_value_type = [u8; 0usize];
pub type std__String_view_iterator_difference_type = ::std::os::raw::c_longlong;
pub type std__String_view_iterator_pointer = *const std__String_view_iterator_value_type;
pub type std__String_view_iterator_reference = *const std__String_view_iterator_value_type;
pub type std__String_view_iterator__Prevent_inheriting_unwrap = std__String_view_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string_view<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Mydata: std_basic_string_view_const_pointer<_Elem>,
    pub _Mysize: std_basic_string_view_size_type,
}
pub type std_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_basic_string_view_value_type<_Elem> = _Elem;
pub type std_basic_string_view_pointer<_Elem> = *mut _Elem;
pub type std_basic_string_view_const_pointer<_Elem> = *const _Elem;
pub type std_basic_string_view_reference<_Elem> = *mut _Elem;
pub type std_basic_string_view_const_reference<_Elem> = *const _Elem;
pub type std_basic_string_view_const_iterator = std__String_view_iterator;
pub type std_basic_string_view_iterator = std_basic_string_view_const_iterator;
pub type std_basic_string_view_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_view_const_iterator>;
pub type std_basic_string_view_reverse_iterator = std_basic_string_view_const_reverse_iterator;
pub type std_basic_string_view_size_type = ::std::os::raw::c_ulonglong;
pub type std_basic_string_view_difference_type = ::std::os::raw::c_longlong;
pub type std_string_view = std_basic_string_view<::std::os::raw::c_char>;
pub type std_u16string_view = std_basic_string_view<u16>;
pub type std_u32string_view = std_basic_string_view<u32>;
pub type std_wstring_view = std_basic_string_view<u16>;
#[repr(C)]
pub struct std__String_const_iterator {
    pub _Ptr: std__String_const_iterator_pointer,
}
pub type std__String_const_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__String_const_iterator_value_type = [u8; 0usize];
pub type std__String_const_iterator_difference_type = [u8; 0usize];
pub type std__String_const_iterator_pointer = [u8; 0usize];
pub type std__String_const_iterator_reference = *const std__String_const_iterator_value_type;
pub type std__String_const_iterator__Prevent_inheriting_unwrap = std__String_const_iterator;
#[repr(C)]
pub struct std__String_iterator {
    pub _base: std__String_const_iterator,
}
pub type std__String_iterator__Mybase = std__String_const_iterator;
pub type std__String_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__String_iterator_value_type = [u8; 0usize];
pub type std__String_iterator_difference_type = [u8; 0usize];
pub type std__String_iterator_pointer = [u8; 0usize];
pub type std__String_iterator_reference = *mut std__String_iterator_value_type;
pub type std__String_iterator__Prevent_inheriting_unwrap = std__String_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__String_iter_types {
    pub _address: u8,
}
pub type std__String_iter_types_value_type<_Value_type> = _Value_type;
pub type std__String_iter_types_size_type<_Size_type> = _Size_type;
pub type std__String_iter_types_difference_type<_Difference_type> = _Difference_type;
pub type std__String_iter_types_pointer<_Pointer> = _Pointer;
pub type std__String_iter_types_const_pointer<_Const_pointer> = _Const_pointer;
#[repr(C)]
pub struct std__String_val {
    pub _Bx: std__String_val__Bxty,
    pub _Mysize: std__String_val_size_type,
    pub _Myres: std__String_val_size_type,
}
pub type std__String_val_value_type = [u8; 0usize];
pub type std__String_val_size_type = [u8; 0usize];
pub type std__String_val_difference_type = [u8; 0usize];
pub type std__String_val_pointer = [u8; 0usize];
pub type std__String_val_const_pointer = [u8; 0usize];
pub type std__String_val_reference = *mut std__String_val_value_type;
pub type std__String_val_const_reference = *const std__String_val_value_type;
#[repr(C)]
pub struct std__String_val__Bxty {
    pub _Buf: __BindgenUnionField<*mut std__String_val_value_type>,
    pub _Ptr: __BindgenUnionField<std__String_val_pointer>,
    pub _Alias: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__String_constructor_concat_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__String_constructor_concat_tag"]
        [::std::mem::size_of::<std__String_constructor_concat_tag>() - 1usize];
    ["Alignment of std__String_constructor_concat_tag"]
        [::std::mem::align_of::<std__String_constructor_concat_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__String_constructor_rvalue_allocator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__String_constructor_rvalue_allocator_tag"]
        [::std::mem::size_of::<std__String_constructor_rvalue_allocator_tag>() - 1usize];
    ["Alignment of std__String_constructor_rvalue_allocator_tag"]
        [::std::mem::align_of::<std__String_constructor_rvalue_allocator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_string {
    pub _Mypair: u8,
}
pub type std_basic_string__Alty = std__Rebind_alloc_t;
pub type std_basic_string__Alty_traits = std_allocator_traits;
pub type std_basic_string__Scary_val = std__String_val;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_allocator_type<_Alloc> = _Alloc;
pub type std_basic_string_value_type<_Elem> = _Elem;
pub type std_basic_string_size_type = std_basic_string__Alty_traits;
pub type std_basic_string_difference_type = std_basic_string__Alty_traits;
pub type std_basic_string_pointer = std_basic_string__Alty_traits;
pub type std_basic_string_const_pointer = std_basic_string__Alty_traits;
pub type std_basic_string_reference<_Elem> = *mut std_basic_string_value_type<_Elem>;
pub type std_basic_string_const_reference<_Elem> = *const std_basic_string_value_type<_Elem>;
pub type std_basic_string_iterator = std__String_iterator;
pub type std_basic_string_const_iterator = std__String_const_iterator;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string__Is_elem_cptr = std_bool_constant;
pub type std_basic_string__Is_string_view_ish = std_enable_if_t;
pub const std_basic_string__Allocation_policy__At_least: std_basic_string__Allocation_policy = 0;
pub const std_basic_string__Allocation_policy__Exactly: std_basic_string__Allocation_policy = 0;
pub type std_basic_string__Allocation_policy = ::std::os::raw::c_int;
pub const std_basic_string__Construct_strategy__From_char: std_basic_string__Construct_strategy = 0;
pub const std_basic_string__Construct_strategy__From_ptr: std_basic_string__Construct_strategy = 0;
pub const std_basic_string__Construct_strategy__From_string: std_basic_string__Construct_strategy =
    0;
pub type std_basic_string__Construct_strategy = ::std::os::raw::c_uchar;
pub type std_string = std_basic_string;
pub type std_wstring = std_basic_string;
pub type std_u16string = std_basic_string;
pub type std_u32string = std_basic_string;
extern "C" {
    #[link_name = "\u{1}__isa_available"]
    pub static mut std___isa_available: ::std::os::raw::c_int;
}
pub const std__Stl_isa_available_sse42: ::std::os::raw::c_int = 2;
pub const std__Stl_isa_available_avx2: ::std::os::raw::c_int = 5;
#[repr(C)]
pub struct std__Vector_const_iterator {
    pub _Ptr: std__Vector_const_iterator__Tptr,
}
pub type std__Vector_const_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__Vector_const_iterator_value_type = [u8; 0usize];
pub type std__Vector_const_iterator_difference_type = [u8; 0usize];
pub type std__Vector_const_iterator_pointer = [u8; 0usize];
pub type std__Vector_const_iterator_reference = *const std__Vector_const_iterator_value_type;
pub type std__Vector_const_iterator__Tptr = [u8; 0usize];
pub type std__Vector_const_iterator__Prevent_inheriting_unwrap = std__Vector_const_iterator;
#[repr(C)]
pub struct std__Vector_iterator {
    pub _base: std__Vector_const_iterator,
}
pub type std__Vector_iterator__Mybase = std__Vector_const_iterator;
pub type std__Vector_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__Vector_iterator_value_type = [u8; 0usize];
pub type std__Vector_iterator_difference_type = [u8; 0usize];
pub type std__Vector_iterator_pointer = [u8; 0usize];
pub type std__Vector_iterator_reference = *mut std__Vector_iterator_value_type;
pub type std__Vector_iterator__Prevent_inheriting_unwrap = std__Vector_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Vec_iter_types {
    pub _address: u8,
}
pub type std__Vec_iter_types_value_type<_Value_type> = _Value_type;
pub type std__Vec_iter_types_size_type<_Size_type> = _Size_type;
pub type std__Vec_iter_types_difference_type<_Difference_type> = _Difference_type;
pub type std__Vec_iter_types_pointer<_Pointer> = _Pointer;
pub type std__Vec_iter_types_const_pointer<_Const_pointer> = _Const_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Value_init_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Value_init_tag"][::std::mem::size_of::<std__Value_init_tag>() - 1usize];
    ["Alignment of std__Value_init_tag"][::std::mem::align_of::<std__Value_init_tag>() - 1usize];
};
#[repr(C)]
pub struct std__Vector_val {
    pub _Myfirst: std__Vector_val_pointer,
    pub _Mylast: std__Vector_val_pointer,
    pub _Myend: std__Vector_val_pointer,
}
pub type std__Vector_val_value_type = [u8; 0usize];
pub type std__Vector_val_size_type = [u8; 0usize];
pub type std__Vector_val_difference_type = [u8; 0usize];
pub type std__Vector_val_pointer = [u8; 0usize];
pub type std__Vector_val_const_pointer = [u8; 0usize];
pub type std__Vector_val_reference = *mut std__Vector_val_value_type;
pub type std__Vector_val_const_reference = *const std__Vector_val_value_type;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector {
    pub _Mypair: u8,
}
pub type std_vector__Alty = std__Rebind_alloc_t;
pub type std_vector__Alty_traits = std_allocator_traits;
pub type std_vector_value_type<_Ty> = _Ty;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
pub type std_vector_pointer = std_vector__Alty_traits;
pub type std_vector_const_pointer = std_vector__Alty_traits;
pub type std_vector_reference<_Ty> = *mut _Ty;
pub type std_vector_const_reference<_Ty> = *const _Ty;
pub type std_vector_size_type = std_vector__Alty_traits;
pub type std_vector_difference_type = std_vector__Alty_traits;
pub type std_vector__Scary_val = std__Vector_val;
pub type std_vector_iterator = std__Vector_iterator;
pub type std_vector_const_iterator = std__Vector_const_iterator;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub const std_vector__Reallocation_policy__At_least: std_vector__Reallocation_policy = 0;
pub const std_vector__Reallocation_policy__Exactly: std_vector__Reallocation_policy = 0;
pub type std_vector__Reallocation_policy = ::std::os::raw::c_int;
pub type std__Vbase = ::std::os::raw::c_uint;
pub const std__VBITS: ::std::os::raw::c_int = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Vbase_compare_three_way {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Wrap_alloc {
    pub _address: u8,
}
pub type std__Wrap_alloc__Alloc<_Alloc0> = _Alloc0;
#[repr(C)]
pub struct std__Vb_iter_base {
    pub _Myptr: *const std__Vbase,
    pub _Myoff: std__Vb_iter_base__Size_type,
}
pub type std__Vb_iter_base__Alvbase = [u8; 0usize];
pub type std__Vb_iter_base__Size_type = [u8; 0usize];
pub type std__Vb_iter_base__Difference_type = [u8; 0usize];
pub type std__Vb_iter_base__Mycont = std_vector;
#[repr(C)]
pub struct std__Vb_reference {
    pub _base: std__Vb_iter_base,
}
pub type std__Vb_reference__Mybase = std__Vb_iter_base;
pub type std__Vb_reference__Mycont = std__Vb_reference__Mybase;
pub type std__Vb_reference__Difference_type = std__Vb_reference__Mybase;
#[repr(C)]
pub struct std__Vb_const_iterator {
    pub _base: std__Vb_iter_base,
}
pub type std__Vb_const_iterator__Mybase = std__Vb_iter_base;
pub type std__Vb_const_iterator__Mycont = std__Vb_const_iterator__Mybase;
pub type std__Vb_const_iterator__Difference_type = std__Vb_const_iterator__Mybase;
pub type std__Vb_const_iterator__Size_type = std__Vb_const_iterator__Mybase;
pub type std__Vb_const_iterator__Reft = std__Vb_reference;
pub type std__Vb_const_iterator_const_reference = bool;
pub type std__Vb_const_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__Vb_const_iterator_value_type = bool;
pub type std__Vb_const_iterator_difference_type = std__Vb_const_iterator__Mybase;
pub type std__Vb_const_iterator_pointer = *mut std__Vb_const_iterator_const_reference;
pub type std__Vb_const_iterator_reference = std__Vb_const_iterator_const_reference;
#[repr(C)]
pub struct std__Vb_iterator {
    pub _base: std__Vb_const_iterator,
}
pub type std__Vb_iterator__Mybase = std__Vb_const_iterator;
pub type std__Vb_iterator__Mycont = std__Vb_iterator__Mybase;
pub type std__Vb_iterator__Difference_type = std__Vb_iterator__Mybase;
pub type std__Vb_iterator__Reft = std__Vb_reference;
pub type std__Vb_iterator_const_reference = bool;
pub type std__Vb_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__Vb_iterator_value_type = bool;
pub type std__Vb_iterator_difference_type = std__Vb_iterator__Mybase;
pub type std__Vb_iterator_pointer = *mut std__Vb_iterator__Reft;
pub type std__Vb_iterator_reference = std__Vb_iterator__Reft;
pub type std__Vb_iterator__Prevent_inheriting_unwrap = std__Vb_iterator;
#[repr(C)]
#[derive(Debug)]
pub struct std__Vb_val {
    pub _Myvec: std__Vb_val__Vectype,
    pub _Mysize: std__Vb_val_size_type,
}
pub type std__Vb_val__Alvbase = std__Rebind_alloc_t;
pub type std__Vb_val__Alvbase_traits = std_allocator_traits;
pub type std__Vb_val__Vectype = std_vector;
pub type std__Vb_val__Alvbase_wrapped = std__Wrap_alloc;
pub type std__Vb_val_size_type = std__Vb_val__Alvbase_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Non_trivial_copy<_Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
    pub _base: _Base,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deleted_copy<_Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
    pub _base: _Base,
}
pub type std__SMF_control_copy = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Non_trivial_move {
    pub _address: u8,
}
pub type std__Non_trivial_move__Mybase = std__SMF_control_copy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deleted_move {
    pub _address: u8,
}
pub type std__Deleted_move__Mybase = std__SMF_control_copy;
pub type std__SMF_control_move = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Non_trivial_copy_assign {
    pub _address: u8,
}
pub type std__Non_trivial_copy_assign__Mybase = std__SMF_control_move;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deleted_copy_assign {
    pub _address: u8,
}
pub type std__Deleted_copy_assign__Mybase = std__SMF_control_move;
pub type std__SMF_control_copy_assign = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Non_trivial_move_assign {
    pub _address: u8,
}
pub type std__Non_trivial_move_assign__Mybase = std__SMF_control_copy_assign;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deleted_move_assign {
    pub _address: u8,
}
pub type std__Deleted_move_assign__Mybase = std__SMF_control_copy_assign;
pub type std__SMF_control_move_assign = std_conditional_t;
pub type std__SMF_control = std__SMF_control_move_assign;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_list {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_front_ {
    pub _address: u8,
}
pub type std__Meta_front = std__Meta_front_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_pop_front_ {
    pub _address: u8,
}
pub type std__Meta_pop_front = std__Meta_pop_front_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_push_front_ {
    pub _address: u8,
}
pub type std__Meta_push_front = std__Meta_push_front_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_quote_helper_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_quote {
    pub _address: u8,
}
pub type std__Meta_quote__Invoke = std__Meta_quote_helper_;
pub type std__Meta_invoke = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_bind_back {
    pub _address: u8,
}
pub type std__Meta_bind_back__Invoke = std__Meta_invoke;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_apply_ {
    pub _address: u8,
}
pub type std__Meta_apply = std__Meta_apply_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_transform_ {
    pub _address: u8,
}
pub type std__Meta_transform = std__Meta_transform_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_repeat_n_c_ {
    pub _address: u8,
}
pub type std__Meta_repeat_n_c = std__Meta_repeat_n_c_;
pub type std__Meta_repeat_first_helper<_Ty> = _Ty;
pub type std__Meta_at_c = u8;
extern "C" {
    #[link_name = "\u{1}?_Meta_npos@std@@3_KB"]
    pub static std__Meta_npos: ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_find_unique_index_ {
    pub _address: u8,
}
pub type std__Meta_find_unique_index__type = u8;
pub type std__Meta_find_unique_index = std__Meta_find_unique_index_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_as_list_ {
    pub _address: u8,
}
pub type std__Meta_as_list = std__Meta_as_list_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_as_integer_sequence_ {
    pub _address: u8,
}
pub type std__Meta_as_integer_sequence = std__Meta_as_integer_sequence_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_concat_ {
    pub _address: u8,
}
pub type std__Meta_concat = std__Meta_concat_;
pub type std__Meta_join = std__Meta_apply;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Meta_cartesian_product_ {
    pub _address: u8,
}
pub type std__Meta_cartesian_product = std__Meta_cartesian_product_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_variant_size {
    pub _address: u8,
}
pub type std_variant_alternative_t = u8;
extern "C" {
    #[link_name = "\u{1}?variant_npos@std@@3_KB"]
    pub static std_variant_npos: ::std::os::raw::c_ulonglong;
}
pub type std__Variant_storage = u8;
pub type std__Variant_tagged_ref_t = u8;
pub type std__Variant_raw_visit_t<_Fn> = _Fn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_raw_dispatch_table1 {
    pub _address: u8,
}
pub const std__Schar_max_as_size: ::std::os::raw::c_ulonglong = 127;
pub const std__Short_max_as_size: ::std::os::raw::c_ulonglong = 32767;
pub type std__Variant_index_t = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_construct_visitor {
    pub _Self: *mut std__Variant_base,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_assign_visitor {
    pub _Self: *mut std__Variant_base,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_base {
    pub _Which: std__Variant_base__Index_t,
}
pub type std__Variant_base__Index_t = std__Variant_index_t;
pub type std__Variant_base__Storage_t = std__Variant_storage;
#[repr(C)]
#[derive(Debug)]
pub struct std__Variant_destroy_layer_ {
    pub _base: std__Variant_base,
}
pub type std__Variant_destroy_layer = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_init_overload_set_ {
    pub _address: u8,
}
pub type std__Variant_init_overload_set = std__Variant_init_overload_set_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_init_helper {
    pub _address: u8,
}
pub type std__Variant_init_type = std__Meta_front;
pub type std__Variant_init_index = std__Meta_front;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_variant {
    pub _address: u8,
}
pub type std_variant__Mybase = std__SMF_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_relop_visitor2 {
    pub _Left: *const std__Variant_storage,
}
pub type std__Variant_visit_result_t<_Callable> = _Callable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_dispatcher {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_dispatch_table {
    pub _address: u8,
}
pub type std__As_variant<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Variant_hash_visitor {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Variant_hash_visitor"]
        [::std::mem::size_of::<std__Variant_hash_visitor>() - 1usize];
    ["Alignment of std__Variant_hash_visitor"]
        [::std::mem::align_of::<std__Variant_hash_visitor>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_monostate_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_monostate_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Insert_return_type<_Iterator, _NodeType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeType>>,
    pub position: _Iterator,
    pub inserted: bool,
    pub node: _NodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Node_handle_map_base {
    pub _address: u8,
}
pub type std__Node_handle_map_base_key_type<_KeyTy> = _KeyTy;
pub type std__Node_handle_map_base_mapped_type<_ValueTy> = _ValueTy;
pub type std__Node_handle_map_base__Pair_type<_KeyTy, _ValueTy> = std_pair<
    std__Node_handle_map_base_key_type<_KeyTy>,
    std__Node_handle_map_base_mapped_type<_ValueTy>,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Node_handle_set_base {
    pub _address: u8,
}
pub type std__Node_handle_set_base_value_type<_ValueTy> = _ValueTy;
#[repr(C)]
#[derive(Debug)]
pub struct std__Node_handle {
    pub _Ptr: std__Node_handle__Nodeptr,
    pub _Alloc_storage: std__Aligned_storage_t,
}
pub type std__Node_handle_allocator_type<_Alloc> = _Alloc;
pub type std__Node_handle__Alty_traits = std_allocator_traits;
pub type std__Node_handle__Alnode = std__Rebind_alloc_t;
pub type std__Node_handle__Alnode_traits = std_allocator_traits;
pub type std__Node_handle__Nodeptr = std__Node_handle__Alnode_traits;
#[repr(C)]
pub struct std__Tree_unchecked_const_iterator<_Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
    pub _base: _Base,
    pub _Ptr: std__Tree_unchecked_const_iterator__Nodeptr,
}
pub type std__Tree_unchecked_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Tree_unchecked_const_iterator__Nodeptr = [u8; 0usize];
pub type std__Tree_unchecked_const_iterator_value_type = [u8; 0usize];
pub type std__Tree_unchecked_const_iterator_difference_type = [u8; 0usize];
pub type std__Tree_unchecked_const_iterator_pointer = [u8; 0usize];
pub type std__Tree_unchecked_const_iterator_reference =
    *const std__Tree_unchecked_const_iterator_value_type;
#[repr(C)]
pub struct std__Tree_unchecked_iterator {
    pub _base: std__Tree_unchecked_const_iterator<_Base>,
}
pub type std__Tree_unchecked_iterator__Mybase = std__Tree_unchecked_const_iterator<_Base>;
pub type std__Tree_unchecked_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Tree_unchecked_iterator__Nodeptr = [u8; 0usize];
pub type std__Tree_unchecked_iterator_value_type = [u8; 0usize];
pub type std__Tree_unchecked_iterator_difference_type = [u8; 0usize];
pub type std__Tree_unchecked_iterator_pointer = [u8; 0usize];
pub type std__Tree_unchecked_iterator_reference = *mut std__Tree_unchecked_iterator_value_type;
#[repr(C)]
pub struct std__Tree_const_iterator {
    pub _base: std__Tree_unchecked_const_iterator<std__Iterator_base>,
}
pub type std__Tree_const_iterator__Mybase = std__Tree_unchecked_const_iterator<std__Iterator_base>;
pub type std__Tree_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Tree_const_iterator__Nodeptr = [u8; 0usize];
pub type std__Tree_const_iterator_value_type = [u8; 0usize];
pub type std__Tree_const_iterator_difference_type = [u8; 0usize];
pub type std__Tree_const_iterator_pointer = [u8; 0usize];
pub type std__Tree_const_iterator_reference = *const std__Tree_const_iterator_value_type;
pub type std__Tree_const_iterator__Prevent_inheriting_unwrap = std__Tree_const_iterator;
#[repr(C)]
pub struct std__Tree_iterator {
    pub _base: std__Tree_const_iterator,
}
pub type std__Tree_iterator__Mybase = std__Tree_const_iterator;
pub type std__Tree_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Tree_iterator__Nodeptr = [u8; 0usize];
pub type std__Tree_iterator_value_type = [u8; 0usize];
pub type std__Tree_iterator_difference_type = [u8; 0usize];
pub type std__Tree_iterator_pointer = [u8; 0usize];
pub type std__Tree_iterator_reference = *mut std__Tree_iterator_value_type;
pub type std__Tree_iterator__Prevent_inheriting_unwrap = std__Tree_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_iter_types {
    pub _address: u8,
}
pub type std__Tree_iter_types_value_type<_Value_type> = _Value_type;
pub type std__Tree_iter_types_size_type<_Size_type> = _Size_type;
pub type std__Tree_iter_types_difference_type<_Difference_type> = _Difference_type;
pub type std__Tree_iter_types_pointer<_Pointer> = _Pointer;
pub type std__Tree_iter_types_const_pointer<_Const_pointer> = _Const_pointer;
pub type std__Tree_iter_types__Nodeptr<_Nodeptr_type> = _Nodeptr_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_node<_Value_type> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value_type>>,
    pub _Left: std__Tree_node__Nodeptr,
    pub _Parent: std__Tree_node__Nodeptr,
    pub _Right: std__Tree_node__Nodeptr,
    pub _Color: ::std::os::raw::c_char,
    pub _Isnil: ::std::os::raw::c_char,
    pub _Myval: std__Tree_node_value_type<_Value_type>,
}
pub type std__Tree_node__Nodeptr = std__Rebind_pointer_t;
pub type std__Tree_node_value_type<_Value_type> = _Value_type;
pub const std__Tree_node__Redbl__Red: std__Tree_node__Redbl = 0;
pub const std__Tree_node__Redbl__Black: std__Tree_node__Redbl = 0;
pub type std__Tree_node__Redbl = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_simple_types {
    pub _address: u8,
}
pub type std__Tree_simple_types__Node = std__Tree_node<_Value_type>;
pub type std__Tree_simple_types__Nodeptr = *mut std__Tree_simple_types__Node;
pub const std__Tree_child__Right: std__Tree_child = 0;
pub const std__Tree_child__Left: std__Tree_child = 1;
pub const std__Tree_child__Unused: std__Tree_child = 2;
pub type std__Tree_child = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_id<_Nodeptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Nodeptr>>,
    pub _Parent: _Nodeptr,
    pub _Child: std__Tree_child,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_find_result<_Nodeptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Nodeptr>>,
    pub _Location: std__Tree_id<_Nodeptr>,
    pub _Bound: _Nodeptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tree_find_hint_result<_Nodeptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Nodeptr>>,
    pub _Location: std__Tree_id<_Nodeptr>,
    pub _Duplicate: bool,
}
#[repr(C)]
pub struct std__Tree_val {
    pub _Myhead: std__Tree_val__Nodeptr,
    pub _Mysize: std__Tree_val_size_type,
}
pub type std__Tree_val__Nodeptr = [u8; 0usize];
pub type std__Tree_val_value_type = [u8; 0usize];
pub type std__Tree_val_size_type = [u8; 0usize];
pub type std__Tree_val_difference_type = [u8; 0usize];
pub type std__Tree_val_pointer = [u8; 0usize];
pub type std__Tree_val_const_pointer = [u8; 0usize];
pub type std__Tree_val_reference = *mut std__Tree_val_value_type;
pub type std__Tree_val_const_reference = *const std__Tree_val_value_type;
pub type std__Tree_val__Unchecked_const_iterator = std__Tree_unchecked_const_iterator<_Base>;
pub type std__Tree_val_const_iterator = std__Tree_const_iterator;
pub const std__Tree_val__Redbl__Red: std__Tree_val__Redbl = 0;
pub const std__Tree_val__Redbl__Black: std__Tree_val__Redbl = 0;
pub type std__Tree_val__Redbl = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct std__Tree_head_scoped_ptr<_Alnode, _Scary_val> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alnode>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Scary_val>>,
    pub _Al: *mut _Alnode,
    pub _Mycont: *mut _Scary_val,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Tree_temp_node_alloc<_Alnode> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alnode>>,
    pub _base: std__Alloc_construct_ptr<_Alnode>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Tree_temp_node<_Alnode> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alnode>>,
    pub _base: std__Tree_temp_node_alloc<_Alnode>,
}
pub type std__Tree_temp_node__Alnode_traits = std_allocator_traits;
pub type std__Tree_temp_node__Nodeptr = std__Tree_temp_node__Alnode_traits;
pub const std__Tree_temp_node__Redbl__Red: std__Tree_temp_node__Redbl = 0;
pub const std__Tree_temp_node__Redbl__Black: std__Tree_temp_node__Redbl = 0;
pub type std__Tree_temp_node__Redbl = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct std__Tree {
    pub _Mypair: u8,
}
pub type std__Tree_key_type = [u8; 0usize];
pub type std__Tree_value_type = [u8; 0usize];
pub type std__Tree_allocator_type = [u8; 0usize];
pub type std__Tree__Alty = std__Rebind_alloc_t;
pub type std__Tree__Alty_traits = std_allocator_traits;
pub type std__Tree__Node = std__Tree_node<std__Tree_value_type>;
pub type std__Tree__Alnode = std__Rebind_alloc_t;
pub type std__Tree__Alnode_traits = std_allocator_traits;
pub type std__Tree__Nodeptr = [u8; 0usize];
pub type std__Tree__Scary_val = std__Tree_val;
pub const std__Tree__Redbl__Red: std__Tree__Redbl = 0;
pub const std__Tree__Redbl__Black: std__Tree__Redbl = 0;
pub type std__Tree__Redbl = ::std::os::raw::c_int;
pub type std__Tree_value_compare = [u8; 0usize];
pub type std__Tree_key_compare = [u8; 0usize];
pub type std__Tree_size_type = [u8; 0usize];
pub type std__Tree_difference_type = [u8; 0usize];
pub type std__Tree_pointer = [u8; 0usize];
pub type std__Tree_const_pointer = [u8; 0usize];
pub type std__Tree_reference = *mut std__Tree_value_type;
pub type std__Tree_const_reference = *const std__Tree_value_type;
pub type std__Tree_iterator = std_conditional_t;
pub type std__Tree__Unchecked_iterator = std_conditional_t;
pub type std__Tree__Unchecked_const_iterator = std__Tree_unchecked_const_iterator<_Base>;
pub type std__Tree_reverse_iterator = std_reverse_iterator<std__Tree_iterator>;
pub type std__Tree_const_reverse_iterator = std_reverse_iterator<std__Tree_const_iterator>;
pub const std__Tree__Strategy__Copy: std__Tree__Strategy = false;
pub const std__Tree__Strategy__Move: std__Tree__Strategy = false;
pub type std__Tree__Strategy = bool;
pub type std__Tree_node_type = [u8; 0usize];
pub type std__Tmap_traits_key_type<_Kty> = _Kty;
pub type std__Tmap_traits_value_type<_Kty, _Ty> = std_pair<_Kty, _Ty>;
pub type std__Tmap_traits_key_compare<_Pr> = _Pr;
pub type std__Tmap_traits_allocator_type<_Alloc> = _Alloc;
pub type std__Tmap_traits_node_type = std__Node_handle;
pub type std__Tmap_traits__In_place_key_extractor = std__In_place_key_extract_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tmap_traits_value_compare<_Pr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Pr>>,
    pub comp: std__Tmap_traits_key_compare<_Pr>,
}
pub type std__Tmap_traits_value_compare_first_argument_type<_Kty, _Ty> =
    std__Tmap_traits_value_type<_Kty, _Ty>;
pub type std__Tmap_traits_value_compare_second_argument_type<_Kty, _Ty> =
    std__Tmap_traits_value_type<_Kty, _Ty>;
pub type std__Tmap_traits_value_compare_result_type = bool;
#[repr(C)]
#[derive(Debug)]
pub struct std_map {
    pub _base: std__Tree,
}
pub type std_map__Mybase = std__Tree;
pub type std_map__Nodeptr = std_map__Mybase;
pub type std_map_key_type<_Kty> = _Kty;
pub type std_map_mapped_type<_Ty> = _Ty;
pub type std_map_key_compare<_Pr> = _Pr;
pub type std_map_value_compare = std_map__Mybase;
pub type std_map_value_type<_Kty, _Ty> = std_pair<_Kty, _Ty>;
pub type std_map_allocator_type = std_map__Mybase;
pub type std_map_size_type = std_map__Mybase;
pub type std_map_difference_type = std_map__Mybase;
pub type std_map_pointer = std_map__Mybase;
pub type std_map_const_pointer = std_map__Mybase;
pub type std_map_reference<_Kty, _Ty> = *mut std_map_value_type<_Kty, _Ty>;
pub type std_map_const_reference<_Kty, _Ty> = *const std_map_value_type<_Kty, _Ty>;
pub type std_map_iterator = std_map__Mybase;
pub type std_map_const_iterator = std_map__Mybase;
pub type std_map_reverse_iterator = std_map__Mybase;
pub type std_map_const_reverse_iterator = std_map__Mybase;
pub type std_map__Alnode = std_map__Mybase;
pub type std_map__Alnode_traits = std_map__Mybase;
pub type std_map_insert_return_type = std__Insert_return_type<std_map_iterator, std_map__Mybase>;
#[repr(C)]
#[derive(Debug)]
pub struct std_multimap {
    pub _base: std__Tree,
}
pub type std_multimap__Mybase = std__Tree;
pub type std_multimap_key_type<_Kty> = _Kty;
pub type std_multimap_mapped_type<_Ty> = _Ty;
pub type std_multimap_key_compare<_Pr> = _Pr;
pub type std_multimap_value_compare = std_multimap__Mybase;
pub type std_multimap_value_type<_Kty, _Ty> = std_pair<_Kty, _Ty>;
pub type std_multimap_allocator_type = std_multimap__Mybase;
pub type std_multimap_size_type = std_multimap__Mybase;
pub type std_multimap_difference_type = std_multimap__Mybase;
pub type std_multimap_pointer = std_multimap__Mybase;
pub type std_multimap_const_pointer = std_multimap__Mybase;
pub type std_multimap_reference<_Kty, _Ty> = *mut std_multimap_value_type<_Kty, _Ty>;
pub type std_multimap_const_reference<_Kty, _Ty> = *const std_multimap_value_type<_Kty, _Ty>;
pub type std_multimap_iterator = std_multimap__Mybase;
pub type std_multimap_const_iterator = std_multimap__Mybase;
pub type std_multimap_reverse_iterator = std_multimap__Mybase;
pub type std_multimap_const_reverse_iterator = std_multimap__Mybase;
pub type std_multimap__Alnode = std_multimap__Mybase;
pub type std_multimap__Alnode_traits = std_multimap__Mybase;
pub const std__ISORT_MAX: ::std::os::raw::c_int = 32;
#[repr(C)]
#[derive(Debug)]
pub struct std__Optimistic_temporary_buffer<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Data: *mut _Ty,
    pub _Capacity: ::std::os::raw::c_longlong,
    pub _Stack_space: *mut std__Aligned_storage_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rng_from_urng<_Urng> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Urng>>,
    pub _Ref: *mut _Urng,
    pub _Bits: ::std::os::raw::c_ulonglong,
    pub _Bmask: std__Rng_from_urng__Udiff,
}
pub type std__Rng_from_urng__Ty0 = std_make_unsigned_t;
pub type std__Rng_from_urng__Ty1 = std__Invoke_result_t;
pub type std__Rng_from_urng__Udiff = std_conditional_t;
pub type std__Common_float_type_t = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_back_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_back_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_back_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_back_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_back_insert_iterator_container_type<_Container> = _Container;
pub type std_back_insert_iterator_difference_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_front_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_front_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_front_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_front_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_front_insert_iterator_container_type<_Container> = _Container;
pub type std_front_insert_iterator_difference_type = ::std::os::raw::c_void;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
    pub iter: std_insert_iterator__Wrapped_iter,
}
pub type std_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_insert_iterator_container_type<_Container> = _Container;
pub type std_insert_iterator_difference_type = ::std::os::raw::c_void;
pub type std_insert_iterator__Wrapped_iter = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istream_iterator<_Ty, _Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Myistr: *mut std_istream_iterator_istream_type<_Elem>,
    pub _Myval: _Ty,
}
pub type std_istream_iterator_iterator_category = std_input_iterator_tag;
pub type std_istream_iterator_value_type<_Ty> = _Ty;
pub type std_istream_iterator_difference_type<_Diff> = _Diff;
pub type std_istream_iterator_pointer<_Ty> = *const _Ty;
pub type std_istream_iterator_reference<_Ty> = *const _Ty;
pub type std_istream_iterator_char_type<_Elem> = _Elem;
pub type std_istream_iterator_traits_type<_Traits> = _Traits;
pub type std_istream_iterator_istream_type<_Elem> = std_basic_istream<_Elem>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostream_iterator<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Mydelim: *const _Elem,
    pub _Myostr: *mut std_ostream_iterator_ostream_type<_Elem>,
}
pub type std_ostream_iterator_iterator_category = std_output_iterator_tag;
pub type std_ostream_iterator_value_type = ::std::os::raw::c_void;
pub type std_ostream_iterator_difference_type = ::std::os::raw::c_void;
pub type std_ostream_iterator_pointer = ::std::os::raw::c_void;
pub type std_ostream_iterator_reference = ::std::os::raw::c_void;
pub type std_ostream_iterator_char_type<_Elem> = _Elem;
pub type std_ostream_iterator_traits_type<_Traits> = _Traits;
pub type std_ostream_iterator_ostream_type<_Elem> = std_basic_ostream<_Elem>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Strbuf: *mut std_istreambuf_iterator_streambuf_type<_Elem>,
    pub _Got: bool,
    pub _Val: _Elem,
}
pub type std_istreambuf_iterator_iterator_category = std_input_iterator_tag;
pub type std_istreambuf_iterator_value_type<_Elem> = _Elem;
pub type std_istreambuf_iterator_difference_type = [u8; 0usize];
pub type std_istreambuf_iterator_pointer<_Elem> = *const _Elem;
pub type std_istreambuf_iterator_reference<_Elem> = _Elem;
pub type std_istreambuf_iterator_char_type<_Elem> = _Elem;
pub type std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_istreambuf_iterator_int_type = [u8; 0usize];
pub type std_istreambuf_iterator_streambuf_type<_Elem> = std_basic_streambuf<_Elem>;
pub type std_istreambuf_iterator_istream_type<_Elem> = std_basic_istream<_Elem>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator__Istreambuf_proxy<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Strbuf: *mut std_istreambuf_iterator_streambuf_type<_Elem>,
    pub _Keep: _Elem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Failed: bool,
    pub _Strbuf: *mut std_ostreambuf_iterator_streambuf_type<_Elem>,
}
pub type std_ostreambuf_iterator_iterator_category = std_output_iterator_tag;
pub type std_ostreambuf_iterator_value_type = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_difference_type = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_pointer = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_reference = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_char_type<_Elem> = _Elem;
pub type std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_ostreambuf_iterator_streambuf_type<_Elem> = std_basic_streambuf<_Elem>;
pub type std_ostreambuf_iterator_ostream_type<_Elem> = std_basic_ostream<_Elem>;
#[repr(C)]
#[derive(Debug)]
pub struct std_logic_error {
    pub _base: std_exception,
}
pub type std_logic_error__Mybase = std_exception;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_logic_error"][::std::mem::size_of::<std_logic_error>() - 24usize];
    ["Alignment of std_logic_error"][::std::mem::align_of::<std_logic_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
pub type std_domain_error__Mybase = std_logic_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_domain_error"][::std::mem::size_of::<std_domain_error>() - 24usize];
    ["Alignment of std_domain_error"][::std::mem::align_of::<std_domain_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
pub type std_invalid_argument__Mybase = std_logic_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_invalid_argument"][::std::mem::size_of::<std_invalid_argument>() - 24usize];
    ["Alignment of std_invalid_argument"][::std::mem::align_of::<std_invalid_argument>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
pub type std_length_error__Mybase = std_logic_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_length_error"][::std::mem::size_of::<std_length_error>() - 24usize];
    ["Alignment of std_length_error"][::std::mem::align_of::<std_length_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
pub type std_out_of_range__Mybase = std_logic_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_out_of_range"][::std::mem::size_of::<std_out_of_range>() - 24usize];
    ["Alignment of std_out_of_range"][::std::mem::align_of::<std_out_of_range>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_runtime_error {
    pub _base: std_exception,
}
pub type std_runtime_error__Mybase = std_exception;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_runtime_error"][::std::mem::size_of::<std_runtime_error>() - 24usize];
    ["Alignment of std_runtime_error"][::std::mem::align_of::<std_runtime_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
pub type std_overflow_error__Mybase = std_runtime_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_overflow_error"][::std::mem::size_of::<std_overflow_error>() - 24usize];
    ["Alignment of std_overflow_error"][::std::mem::align_of::<std_overflow_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
pub type std_underflow_error__Mybase = std_runtime_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_underflow_error"][::std::mem::size_of::<std_underflow_error>() - 24usize];
    ["Alignment of std_underflow_error"][::std::mem::align_of::<std_underflow_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
pub type std_range_error__Mybase = std_runtime_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_range_error"][::std::mem::size_of::<std_range_error>() - 24usize];
    ["Alignment of std_range_error"][::std::mem::align_of::<std_range_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_once_flag {
    pub _Opaque: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_once_flag"][::std::mem::size_of::<std_once_flag>() - 8usize];
    ["Alignment of std_once_flag"][::std::mem::align_of::<std_once_flag>() - 8usize];
    ["Offset of field: std_once_flag::_Opaque"]
        [::std::mem::offset_of!(std_once_flag, _Opaque) - 0usize];
};
#[repr(C)]
#[repr(align(1))]
pub struct std__Immortalizer_impl<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Storage: __BindgenUnionField<_Ty>,
    pub bindgen_union_field: [u8; 0usize],
}
extern "C" {
    #[link_name = "\u{1}__std_init_once_begin_initialize_clr"]
    pub fn std___std_init_once_begin_initialize_clr(
        _LpInitOnce: *mut *mut ::std::os::raw::c_void,
        _DwFlags: ::std::os::raw::c_ulong,
        _FPending: *mut ::std::os::raw::c_int,
        _LpContext: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__std_init_once_complete_clr"]
    pub fn std___std_init_once_complete_clr(
        _LpInitOnce: *mut *mut ::std::os::raw::c_void,
        _DwFlags: ::std::os::raw::c_ulong,
        _LpContext: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__std_init_once_link_alternate_names_and_abort"]
    pub fn std___std_init_once_link_alternate_names_and_abort();
}
pub const std__Init_once_init_failed: ::std::os::raw::c_ulong = 4;
#[repr(C)]
#[derive(Debug)]
pub struct std__Init_once_completer {
    pub _Once: *mut std_once_flag,
    pub _DwFlags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Init_once_completer"]
        [::std::mem::size_of::<std__Init_once_completer>() - 16usize];
    ["Alignment of std__Init_once_completer"]
        [::std::mem::align_of::<std__Init_once_completer>() - 8usize];
    ["Offset of field: std__Init_once_completer::_Once"]
        [::std::mem::offset_of!(std__Init_once_completer, _Once) - 0usize];
    ["Offset of field: std__Init_once_completer::_DwFlags"]
        [::std::mem::offset_of!(std__Init_once_completer, _DwFlags) - 8usize];
};
pub const std_errc_address_family_not_supported: std_errc = 102;
pub const std_errc_address_in_use: std_errc = 100;
pub const std_errc_address_not_available: std_errc = 101;
pub const std_errc_already_connected: std_errc = 113;
pub const std_errc_argument_list_too_long: std_errc = 7;
pub const std_errc_argument_out_of_domain: std_errc = 33;
pub const std_errc_bad_address: std_errc = 14;
pub const std_errc_bad_file_descriptor: std_errc = 9;
pub const std_errc_bad_message: std_errc = 104;
pub const std_errc_broken_pipe: std_errc = 32;
pub const std_errc_connection_aborted: std_errc = 106;
pub const std_errc_connection_already_in_progress: std_errc = 103;
pub const std_errc_connection_refused: std_errc = 107;
pub const std_errc_connection_reset: std_errc = 108;
pub const std_errc_cross_device_link: std_errc = 18;
pub const std_errc_destination_address_required: std_errc = 109;
pub const std_errc_device_or_resource_busy: std_errc = 16;
pub const std_errc_directory_not_empty: std_errc = 41;
pub const std_errc_executable_format_error: std_errc = 8;
pub const std_errc_file_exists: std_errc = 17;
pub const std_errc_file_too_large: std_errc = 27;
pub const std_errc_filename_too_long: std_errc = 38;
pub const std_errc_function_not_supported: std_errc = 40;
pub const std_errc_host_unreachable: std_errc = 110;
pub const std_errc_identifier_removed: std_errc = 111;
pub const std_errc_illegal_byte_sequence: std_errc = 42;
pub const std_errc_inappropriate_io_control_operation: std_errc = 25;
pub const std_errc_interrupted: std_errc = 4;
pub const std_errc_invalid_argument: std_errc = 22;
pub const std_errc_invalid_seek: std_errc = 29;
pub const std_errc_io_error: std_errc = 5;
pub const std_errc_is_a_directory: std_errc = 21;
pub const std_errc_message_size: std_errc = 115;
pub const std_errc_network_down: std_errc = 116;
pub const std_errc_network_reset: std_errc = 117;
pub const std_errc_network_unreachable: std_errc = 118;
pub const std_errc_no_buffer_space: std_errc = 119;
pub const std_errc_no_child_process: std_errc = 10;
pub const std_errc_no_link: std_errc = 121;
pub const std_errc_no_lock_available: std_errc = 39;
pub const std_errc_no_message_available: std_errc = 120;
pub const std_errc_no_message: std_errc = 122;
pub const std_errc_no_protocol_option: std_errc = 123;
pub const std_errc_no_space_on_device: std_errc = 28;
pub const std_errc_no_stream_resources: std_errc = 124;
pub const std_errc_no_such_device_or_address: std_errc = 6;
pub const std_errc_no_such_device: std_errc = 19;
pub const std_errc_no_such_file_or_directory: std_errc = 2;
pub const std_errc_no_such_process: std_errc = 3;
pub const std_errc_not_a_directory: std_errc = 20;
pub const std_errc_not_a_socket: std_errc = 128;
pub const std_errc_not_a_stream: std_errc = 125;
pub const std_errc_not_connected: std_errc = 126;
pub const std_errc_not_enough_memory: std_errc = 12;
pub const std_errc_not_supported: std_errc = 129;
pub const std_errc_operation_canceled: std_errc = 105;
pub const std_errc_operation_in_progress: std_errc = 112;
pub const std_errc_operation_not_permitted: std_errc = 1;
pub const std_errc_operation_not_supported: std_errc = 130;
pub const std_errc_operation_would_block: std_errc = 140;
pub const std_errc_owner_dead: std_errc = 133;
pub const std_errc_permission_denied: std_errc = 13;
pub const std_errc_protocol_error: std_errc = 134;
pub const std_errc_protocol_not_supported: std_errc = 135;
pub const std_errc_read_only_file_system: std_errc = 30;
pub const std_errc_resource_deadlock_would_occur: std_errc = 36;
pub const std_errc_resource_unavailable_try_again: std_errc = 11;
pub const std_errc_result_out_of_range: std_errc = 34;
pub const std_errc_state_not_recoverable: std_errc = 127;
pub const std_errc_stream_timeout: std_errc = 137;
pub const std_errc_text_file_busy: std_errc = 139;
pub const std_errc_timed_out: std_errc = 138;
pub const std_errc_too_many_files_open_in_system: std_errc = 23;
pub const std_errc_too_many_files_open: std_errc = 24;
pub const std_errc_too_many_links: std_errc = 31;
pub const std_errc_too_many_symbolic_link_levels: std_errc = 114;
pub const std_errc_value_too_large: std_errc = 132;
pub const std_errc_wrong_protocol_type: std_errc = 136;
pub type std_errc = ::std::os::raw::c_int;
pub const _DEVICE_OR_RESOURCE_BUSY: std__bindgen_ty_1 = 0;
pub const _INVALID_ARGUMENT: std__bindgen_ty_1 = 1;
pub const _NO_SUCH_PROCESS: std__bindgen_ty_1 = 2;
pub const _NOT_ENOUGH_MEMORY: std__bindgen_ty_1 = 3;
pub const _OPERATION_NOT_PERMITTED: std__bindgen_ty_1 = 4;
pub const _RESOURCE_DEADLOCK_WOULD_OCCUR: std__bindgen_ty_1 = 5;
pub const _RESOURCE_UNAVAILABLE_TRY_AGAIN: std__bindgen_ty_1 = 6;
pub type std__bindgen_ty_1 = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}?_Throw_Cpp_error@std@@YAXH@Z"]
    pub fn std__Throw_Cpp_error(_Code: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Storage_for {
    pub _Storage: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atomic_padded<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Value: _Ty,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atomic_storage_types {
    pub _address: u8,
}
pub type std__Atomic_storage_types__TStorage<_Ty> = std__Atomic_padded<_Ty>;
pub type std__Atomic_storage_types__Spinlock = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct std__Atomic_lock_guard<_Spinlock_t> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Spinlock_t>>,
    pub _Spinlock: *mut _Spinlock_t,
}
pub type std__Atomic_storage__TVal = std_remove_reference_t;
pub type std__Atomic_storage__Guard = std__Atomic_lock_guard<std__Atomic_storage_types>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atomic_integral_facade {
    pub _address: u8,
}
pub type std__Atomic_integral_facade__Base = u8;
pub type std__Atomic_integral_facade_difference_type<_Ty> = _Ty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atomic_pointer {
    pub _address: u8,
}
pub type std__Atomic_pointer__Base = u8;
pub type std__Atomic_pointer_difference_type = ::std::os::raw::c_longlong;
pub type std__Choose_atomic_base2_t = u8;
pub type std__Choose_atomic_base_t = std__Choose_atomic_base2_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std_atomic__Base = std__Choose_atomic_base_t;
pub type std_atomic_value_type<_Ty> = _Ty;
pub type std_atomic_bool = std_atomic;
pub type std_atomic_char = std_atomic;
pub type std_atomic_schar = std_atomic;
pub type std_atomic_uchar = std_atomic;
pub type std_atomic_short = std_atomic;
pub type std_atomic_ushort = std_atomic;
pub type std_atomic_int = std_atomic;
pub type std_atomic_uint = std_atomic;
pub type std_atomic_long = std_atomic;
pub type std_atomic_ulong = std_atomic;
pub type std_atomic_llong = std_atomic;
pub type std_atomic_ullong = std_atomic;
pub type std_atomic_char16_t = std_atomic;
pub type std_atomic_char32_t = std_atomic;
pub type std_atomic_wchar_t = std_atomic;
pub type std_atomic_int8_t = std_atomic;
pub type std_atomic_uint8_t = std_atomic;
pub type std_atomic_int16_t = std_atomic;
pub type std_atomic_uint16_t = std_atomic;
pub type std_atomic_int32_t = std_atomic;
pub type std_atomic_uint32_t = std_atomic;
pub type std_atomic_int64_t = std_atomic;
pub type std_atomic_uint64_t = std_atomic;
pub type std_atomic_int_least8_t = std_atomic;
pub type std_atomic_uint_least8_t = std_atomic;
pub type std_atomic_int_least16_t = std_atomic;
pub type std_atomic_uint_least16_t = std_atomic;
pub type std_atomic_int_least32_t = std_atomic;
pub type std_atomic_uint_least32_t = std_atomic;
pub type std_atomic_int_least64_t = std_atomic;
pub type std_atomic_uint_least64_t = std_atomic;
pub type std_atomic_int_fast8_t = std_atomic;
pub type std_atomic_uint_fast8_t = std_atomic;
pub type std_atomic_int_fast16_t = std_atomic;
pub type std_atomic_uint_fast16_t = std_atomic;
pub type std_atomic_int_fast32_t = std_atomic;
pub type std_atomic_uint_fast32_t = std_atomic;
pub type std_atomic_int_fast64_t = std_atomic;
pub type std_atomic_uint_fast64_t = std_atomic;
pub type std_atomic_intptr_t = std_atomic;
pub type std_atomic_uintptr_t = std_atomic;
pub type std_atomic_size_t = std_atomic;
pub type std_atomic_ptrdiff_t = std_atomic;
pub type std_atomic_intmax_t = std_atomic;
pub type std_atomic_uintmax_t = std_atomic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic_flag {
    pub _Storage: std_atomic,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_atomic_flag"][::std::mem::size_of::<std_atomic_flag>() - 4usize];
    ["Alignment of std_atomic_flag"][::std::mem::align_of::<std_atomic_flag>() - 4usize];
    ["Offset of field: std_atomic_flag::_Storage"]
        [::std::mem::offset_of!(std_atomic_flag, _Storage) - 0usize];
};
pub const std_io_errc_stream: std_io_errc = 1;
pub type std_io_errc = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_code_enum {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::size_of::<std_is_error_code_enum>() - 1usize];
    ["Align of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::align_of::<std_is_error_code_enum>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_condition_enum {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::size_of::<std_is_error_condition_enum>() - 1usize];
    ["Align of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::align_of::<std_is_error_condition_enum>() - 1usize];
};
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
    pub _Addr: std_error_category__Addr_storage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_error_category__Addr_storage {
    pub _Num: ::std::os::raw::c_ulonglong,
    pub _Ptr: *mut std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_category__Addr_storage"]
        [::std::mem::size_of::<std_error_category__Addr_storage>() - 8usize];
    ["Alignment of std_error_category__Addr_storage"]
        [::std::mem::align_of::<std_error_category__Addr_storage>() - 8usize];
    ["Offset of field: std_error_category__Addr_storage::_Num"]
        [::std::mem::offset_of!(std_error_category__Addr_storage, _Num) - 0usize];
    ["Offset of field: std_error_category__Addr_storage::_Ptr"]
        [::std::mem::offset_of!(std_error_category__Addr_storage, _Ptr) - 0usize];
};
pub const std_error_category__Future_addr: std_error_category__bindgen_ty_1 = 1;
pub const std_error_category__Generic_addr: std_error_category__bindgen_ty_1 = 3;
pub const std_error_category__Iostream_addr: std_error_category__bindgen_ty_1 = 5;
pub const std_error_category__System_addr: std_error_category__bindgen_ty_1 = 7;
pub type std_error_category__bindgen_ty_1 = ::std::os::raw::c_ulonglong;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_category"][::std::mem::size_of::<std_error_category>() - 16usize];
    ["Alignment of std_error_category"][::std::mem::align_of::<std_error_category>() - 8usize];
    ["Offset of field: std_error_category::_Addr"]
        [::std::mem::offset_of!(std_error_category, _Addr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_code {
    pub _Myval: ::std::os::raw::c_int,
    pub _Mycat: *const std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_code"][::std::mem::size_of::<std_error_code>() - 16usize];
    ["Alignment of std_error_code"][::std::mem::align_of::<std_error_code>() - 8usize];
    ["Offset of field: std_error_code::_Myval"]
        [::std::mem::offset_of!(std_error_code, _Myval) - 0usize];
    ["Offset of field: std_error_code::_Mycat"]
        [::std::mem::offset_of!(std_error_code, _Mycat) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_condition {
    pub _Myval: ::std::os::raw::c_int,
    pub _Mycat: *const std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_condition"][::std::mem::size_of::<std_error_condition>() - 16usize];
    ["Alignment of std_error_condition"][::std::mem::align_of::<std_error_condition>() - 8usize];
    ["Offset of field: std_error_condition::_Myval"]
        [::std::mem::offset_of!(std_error_condition, _Myval) - 0usize];
    ["Offset of field: std_error_condition::_Mycat"]
        [::std::mem::offset_of!(std_error_condition, _Mycat) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__System_error {
    pub _base: std_runtime_error,
    pub _Mycode: std_error_code,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__System_error"][::std::mem::size_of::<std__System_error>() - 40usize];
    ["Alignment of std__System_error"][::std::mem::align_of::<std__System_error>() - 8usize];
    ["Offset of field: std__System_error::_Mycode"]
        [::std::mem::offset_of!(std__System_error, _Mycode) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_system_error {
    pub _base: std__System_error,
}
pub type std_system_error__Mybase = std__System_error;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_system_error"][::std::mem::size_of::<std_system_error>() - 40usize];
    ["Alignment of std_system_error"][::std::mem::align_of::<std_system_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}?_Syserror_map@std@@YAPEBDH@Z"]
    pub fn std__Syserror_map(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?_Winerror_map@std@@YAHH@Z"]
    pub fn std__Winerror_map(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct std__System_error_message {
    pub _Str: *mut ::std::os::raw::c_char,
    pub _Length: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__System_error_message"]
        [::std::mem::size_of::<std__System_error_message>() - 16usize];
    ["Alignment of std__System_error_message"]
        [::std::mem::align_of::<std__System_error_message>() - 8usize];
    ["Offset of field: std__System_error_message::_Str"]
        [::std::mem::offset_of!(std__System_error_message, _Str) - 0usize];
    ["Offset of field: std__System_error_message::_Length"]
        [::std::mem::offset_of!(std__System_error_message, _Length) - 8usize];
};
#[repr(C)]
pub struct std__Generic_error_category {
    pub _base: std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Generic_error_category"]
        [::std::mem::size_of::<std__Generic_error_category>() - 16usize];
    ["Alignment of std__Generic_error_category"]
        [::std::mem::align_of::<std__Generic_error_category>() - 8usize];
};
#[repr(C)]
pub struct std__Iostream_error_category2 {
    pub _base: std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Iostream_error_category2"]
        [::std::mem::size_of::<std__Iostream_error_category2>() - 16usize];
    ["Alignment of std__Iostream_error_category2"]
        [::std::mem::align_of::<std__Iostream_error_category2>() - 8usize];
};
#[repr(C)]
pub struct std__System_error_category {
    pub _base: std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__System_error_category"]
        [::std::mem::size_of::<std__System_error_category>() - 16usize];
    ["Alignment of std__System_error_category"]
        [::std::mem::align_of::<std__System_error_category>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_cast"][::std::mem::size_of::<std_bad_cast>() - 24usize];
    ["Alignment of std_bad_cast"][::std::mem::align_of::<std_bad_cast>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_typeid"][::std::mem::size_of::<std_bad_typeid>() - 24usize];
    ["Alignment of std_bad_typeid"][::std::mem::align_of::<std_bad_typeid>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___non_rtti_object {
    pub _base: std_bad_typeid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___non_rtti_object"][::std::mem::size_of::<std___non_rtti_object>() - 24usize];
    ["Alignment of std___non_rtti_object"]
        [::std::mem::align_of::<std___non_rtti_object>() - 8usize];
};
pub const std__Small_object_num_ptrs: ::std::os::raw::c_int = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutIt> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIt>>,
    pub _Next: _OutIt,
}
pub type std_raw_storage_iterator_iterator_category = std_output_iterator_tag;
pub type std_raw_storage_iterator_value_type = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_difference_type = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_pointer = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_reference = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_weak_ptr"][::std::mem::size_of::<std_bad_weak_ptr>() - 24usize];
    ["Alignment of std_bad_weak_ptr"][::std::mem::align_of::<std_bad_weak_ptr>() - 8usize];
};
#[repr(C)]
pub struct std__Ref_count_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std__Ref_count_base {
    pub vtable_: *const std__Ref_count_base__bindgen_vtable,
    pub _Uses: std__Atomic_counter_t,
    pub _Weaks: std__Atomic_counter_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Ref_count_base"][::std::mem::size_of::<std__Ref_count_base>() - 16usize];
    ["Alignment of std__Ref_count_base"][::std::mem::align_of::<std__Ref_count_base>() - 8usize];
    ["Offset of field: std__Ref_count_base::_Uses"]
        [::std::mem::offset_of!(std__Ref_count_base, _Uses) - 8usize];
    ["Offset of field: std__Ref_count_base::_Weaks"]
        [::std::mem::offset_of!(std__Ref_count_base, _Weaks) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Ref_count<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _base: std__Ref_count_base,
    pub _Ptr: *mut _Ty,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Ref_count_resource {
    pub _base: std__Ref_count_base,
    pub _Mypair: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Ref_count_resource_alloc {
    pub _base: std__Ref_count_base,
    pub _Mypair: u8,
}
pub type std__Ref_count_resource_alloc__Myalty = std__Rebind_alloc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_enable_shared {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Exception_ptr_access {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Ptr_base {
    pub _Ptr: *mut std__Ptr_base_element_type,
    pub _Rep: *mut std__Ref_count_base,
}
pub type std__Ptr_base_element_type = std_remove_extent_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_scalar_delete {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_array_delete {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_call_function_object {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__SP_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__SP_pointer_compatible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_owner<_Ux> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ux>>,
    pub _Ptr: *mut _Ux,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_owner_del<_UxptrOrNullptr, _Dx> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_UxptrOrNullptr>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Dx>>,
    pub _Ptr: _UxptrOrNullptr,
    pub _Dt: *mut _Dx,
    pub _Call_deleter: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
    pub _base: std__Ptr_base,
}
pub type std_shared_ptr__Mybase = std__Ptr_base;
pub type std_shared_ptr_weak_type = std_weak_ptr;
#[repr(C)]
pub struct std__Ref_count_obj2 {
    pub _base: std__Ref_count_base,
    pub __bindgen_anon_1: std__Ref_count_obj2__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(1))]
pub struct std__Ref_count_obj2__bindgen_ty_1 {
    pub _Storage: __BindgenUnionField<std__Wrap<std_remove_cv_t>>,
    pub bindgen_union_field: [u8; 0usize],
}
#[repr(C)]
pub struct std__Ref_count_obj_alloc3<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _base_1: std__Ref_count_base,
    pub __bindgen_anon_1: std__Ref_count_obj_alloc3__bindgen_ty_1<_Ty>,
}
pub type std__Ref_count_obj_alloc3__Rebound = std__Rebind_alloc_t;
#[repr(C)]
#[repr(align(1))]
pub struct std__Ref_count_obj_alloc3__bindgen_ty_1<_Ty> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ty>>,
    pub _Storage: __BindgenUnionField<std__Wrap<_Ty>>,
    pub bindgen_union_field: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
    pub _base: std__Ptr_base,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this {
    pub _Wptr: std_weak_ptr,
}
pub type std_enable_shared_from_this__Esft_type = std_enable_shared_from_this;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_deleter_pointer_type {
    pub _address: u8,
}
pub type std__Get_deleter_pointer_type_type<_Ty> = *mut _Ty;
pub type std__Unique_ptr_enable_default_t = std_enable_if_t;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub _Mypair: u8,
}
pub type std_unique_ptr_pointer = std__Get_deleter_pointer_type;
pub type std_unique_ptr_element_type<_Ty> = _Ty;
pub type std_unique_ptr_deleter_type<_Dx> = _Dx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_stream_unique_ptr {
    pub _base: std_false_type,
}
pub const std_pointer_safety_relaxed: std_pointer_safety = 0;
pub const std_pointer_safety_preferred: std_pointer_safety = 1;
pub const std_pointer_safety_strict: std_pointer_safety = 2;
pub type std_pointer_safety = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::size_of::<std_owner_less>() - 1usize];
    ["Align of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::align_of::<std_owner_less>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}_Lock_shared_ptr_spin_lock"]
    pub fn std__Lock_shared_ptr_spin_lock();
}
extern "C" {
    #[link_name = "\u{1}_Unlock_shared_ptr_spin_lock"]
    pub fn std__Unlock_shared_ptr_spin_lock();
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Shared_ptr_spin_lock {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Shared_ptr_spin_lock"]
        [::std::mem::size_of::<std__Shared_ptr_spin_lock>() - 1usize];
    ["Alignment of std__Shared_ptr_spin_lock"]
        [::std::mem::align_of::<std__Shared_ptr_spin_lock>() - 1usize];
};
#[repr(C)]
pub struct std__Facet_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std__Facet_base {
    pub vtable_: *const std__Facet_base__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Facet_base"][::std::mem::size_of::<std__Facet_base>() - 8usize];
    ["Alignment of std__Facet_base"][::std::mem::align_of::<std__Facet_base>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z"]
    pub fn std__Facet_Register(arg1: *mut std__Facet_base);
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Timevec {
    pub _Timeptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Timevec"][::std::mem::size_of::<std__Timevec>() - 8usize];
    ["Alignment of std__Timevec"][::std::mem::align_of::<std__Timevec>() - 8usize];
    ["Offset of field: std__Timevec::_Timeptr"]
        [::std::mem::offset_of!(std__Timevec, _Timeptr) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Yarn<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Myptr: *mut _Elem,
    pub _Nul: _Elem,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Locinfo {
    pub _Lock: std__Lockit,
    pub _Days: std__Yarn<::std::os::raw::c_char>,
    pub _Months: std__Yarn<::std::os::raw::c_char>,
    pub _W_Days: std__Yarn<u16>,
    pub _W_Months: std__Yarn<u16>,
    pub _Oldlocname: std__Yarn<::std::os::raw::c_char>,
    pub _Newlocname: std__Yarn<::std::os::raw::c_char>,
}
pub type std__Locinfo__Collvec = _Collvec;
pub type std__Locinfo__Ctypevec = _Ctypevec;
pub type std__Locinfo__Cvtvec = _Cvtvec;
pub type std__Locinfo__Timevec = std__Timevec;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Locinfo"][::std::mem::size_of::<std__Locinfo>() - 104usize];
    ["Alignment of std__Locinfo"][::std::mem::align_of::<std__Locinfo>() - 8usize];
    ["Offset of field: std__Locinfo::_Lock"][::std::mem::offset_of!(std__Locinfo, _Lock) - 0usize];
    ["Offset of field: std__Locinfo::_Days"][::std::mem::offset_of!(std__Locinfo, _Days) - 8usize];
    ["Offset of field: std__Locinfo::_Months"]
        [::std::mem::offset_of!(std__Locinfo, _Months) - 24usize];
    ["Offset of field: std__Locinfo::_W_Days"]
        [::std::mem::offset_of!(std__Locinfo, _W_Days) - 40usize];
    ["Offset of field: std__Locinfo::_W_Months"]
        [::std::mem::offset_of!(std__Locinfo, _W_Months) - 56usize];
    ["Offset of field: std__Locinfo::_Oldlocname"]
        [::std::mem::offset_of!(std__Locinfo, _Oldlocname) - 72usize];
    ["Offset of field: std__Locinfo::_Newlocname"]
        [::std::mem::offset_of!(std__Locinfo, _Newlocname) - 88usize];
};
extern "C" {
    #[link_name = "\u{1}?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z"]
    pub fn std__Locinfo__Locinfo_ctor(arg1: *mut std__Locinfo, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@HPEBD@Z"]
    pub fn std__Locinfo__Locinfo_ctor1(
        arg1: *mut std__Locinfo,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z"]
    pub fn std__Locinfo__Locinfo_dtor(arg1: *mut std__Locinfo);
}
extern "C" {
    #[link_name = "\u{1}?_Locinfo_Addcats@_Locinfo@std@@SAAEAV12@PEAV12@HPEBD@Z"]
    pub fn std__Locinfo__Locinfo_Addcats(
        arg1: *mut std__Locinfo,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut std__Locinfo;
}
impl std__Locinfo {
    #[inline]
    pub unsafe fn _Locinfo_ctor(arg1: *mut std__Locinfo, arg2: *const ::std::os::raw::c_char) {
        std__Locinfo__Locinfo_ctor(arg1, arg2)
    }
    #[inline]
    pub unsafe fn _Locinfo_ctor1(
        arg1: *mut std__Locinfo,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) {
        std__Locinfo__Locinfo_ctor1(arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn _Locinfo_dtor(arg1: *mut std__Locinfo) {
        std__Locinfo__Locinfo_dtor(arg1)
    }
    #[inline]
    pub unsafe fn _Locinfo_Addcats(
        arg1: *mut std__Locinfo,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut std__Locinfo {
        std__Locinfo__Locinfo_Addcats(arg1, arg2, arg3)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Locbase {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Crt_new_delete {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Crt_new_delete"][::std::mem::size_of::<std__Crt_new_delete>() - 1usize];
    ["Alignment of std__Crt_new_delete"][::std::mem::align_of::<std__Crt_new_delete>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub __bindgen_padding_0: u64,
    pub _Ptr: *mut std_locale__Locimp,
}
pub type std_locale_category = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_id {
    pub _Id: ::std::os::raw::c_ulonglong,
}
extern "C" {
    #[link_name = "\u{1}?_Id_cnt@id@locale@std@@0HA"]
    pub static mut std_locale_id__Id_cnt: ::std::os::raw::c_int;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_id"][::std::mem::size_of::<std_locale_id>() - 8usize];
    ["Alignment of std_locale_id"][::std::mem::align_of::<std_locale_id>() - 8usize];
    ["Offset of field: std_locale_id::_Id"][::std::mem::offset_of!(std_locale_id, _Id) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub _base: std__Facet_base,
    pub _Myrefs: std__Atomic_counter_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_facet"][::std::mem::size_of::<std_locale_facet>() - 16usize];
    ["Alignment of std_locale_facet"][::std::mem::align_of::<std_locale_facet>() - 8usize];
    ["Offset of field: std_locale_facet::_Myrefs"]
        [::std::mem::offset_of!(std_locale_facet, _Myrefs) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_locale__Facet_guard {
    pub _Target: *mut std_locale_facet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale__Facet_guard"][::std::mem::size_of::<std_locale__Facet_guard>() - 8usize];
    ["Alignment of std_locale__Facet_guard"]
        [::std::mem::align_of::<std_locale__Facet_guard>() - 8usize];
    ["Offset of field: std_locale__Facet_guard::_Target"]
        [::std::mem::offset_of!(std_locale__Facet_guard, _Target) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_locale__Locimp {
    pub _base: std_locale_facet,
    pub _Facetvec: *mut *mut std_locale_facet,
    pub _Facetcount: ::std::os::raw::c_ulonglong,
    pub _Catmask: std_locale_category,
    pub _Xparent: bool,
    pub _Name: std__Yarn<::std::os::raw::c_char>,
}
extern "C" {
    #[link_name = "\u{1}?_Clocptr@_Locimp@locale@std@@0PEAV123@EA"]
    pub static mut std_locale__Locimp__Clocptr: *mut std_locale__Locimp;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale__Locimp"][::std::mem::size_of::<std_locale__Locimp>() - 56usize];
    ["Alignment of std_locale__Locimp"][::std::mem::align_of::<std_locale__Locimp>() - 8usize];
    ["Offset of field: std_locale__Locimp::_Facetvec"]
        [::std::mem::offset_of!(std_locale__Locimp, _Facetvec) - 16usize];
    ["Offset of field: std_locale__Locimp::_Facetcount"]
        [::std::mem::offset_of!(std_locale__Locimp, _Facetcount) - 24usize];
    ["Offset of field: std_locale__Locimp::_Catmask"]
        [::std::mem::offset_of!(std_locale__Locimp, _Catmask) - 32usize];
    ["Offset of field: std_locale__Locimp::_Xparent"]
        [::std::mem::offset_of!(std_locale__Locimp, _Xparent) - 36usize];
    ["Offset of field: std_locale__Locimp::_Name"]
        [::std::mem::offset_of!(std_locale__Locimp, _Name) - 40usize];
};
pub const std_locale_collate: std_locale_category = 1;
pub const std_locale_ctype: std_locale_category = 2;
pub const std_locale_monetary: std_locale_category = 4;
pub const std_locale_numeric: std_locale_category = 8;
pub const std_locale_time: std_locale_category = 16;
pub const std_locale_messages: std_locale_category = 32;
pub const std_locale_all: std_locale_category = 63;
pub const std_locale_none: std_locale_category = 0;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale"][::std::mem::size_of::<std_locale>() - 16usize];
    ["Alignment of std_locale"][::std::mem::align_of::<std_locale>() - 8usize];
    ["Offset of field: std_locale::_Ptr"][::std::mem::offset_of!(std_locale, _Ptr) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}?classic@locale@std@@SAAEBV12@XZ"]
    pub fn std_locale_classic() -> *const std_locale;
}
extern "C" {
    #[link_name = "\u{1}?global@locale@std@@SA?AV12@AEBV12@@Z"]
    pub fn std_locale_global(arg1: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}?empty@locale@std@@SA?AV12@XZ"]
    pub fn std_locale_empty() -> std_locale;
}
impl std_locale {
    #[inline]
    pub unsafe fn classic() -> *const std_locale {
        std_locale_classic()
    }
    #[inline]
    pub unsafe fn global(arg1: *const std_locale) -> std_locale {
        std_locale_global(arg1)
    }
    #[inline]
    pub unsafe fn empty() -> std_locale {
        std_locale_empty()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Facetptr {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_Psave"]
    pub static mut std__Psave: *const std_locale_facet;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt_base {
    pub _base: std_locale_facet,
}
pub const std_codecvt_base_ok: std_codecvt_base__bindgen_ty_1 = 0;
pub const std_codecvt_base_partial: std_codecvt_base__bindgen_ty_1 = 1;
pub const std_codecvt_base_error: std_codecvt_base__bindgen_ty_1 = 2;
pub const std_codecvt_base_noconv: std_codecvt_base__bindgen_ty_1 = 3;
pub type std_codecvt_base__bindgen_ty_1 = ::std::os::raw::c_int;
pub type std_codecvt_base_result = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_codecvt_base"][::std::mem::size_of::<std_codecvt_base>() - 16usize];
    ["Alignment of std_codecvt_base"][::std::mem::align_of::<std_codecvt_base>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt {
    pub _base: std_codecvt_base,
}
pub type std_codecvt_intern_type<_Elem> = _Elem;
pub type std_codecvt_extern_type<_Byte> = _Byte;
pub type std_codecvt_state_type<_Statype> = _Statype;
extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut std_id: std_locale_id;
}
pub const std__Codecvt_mode__Consume_header: std__Codecvt_mode = 4;
pub const std__Codecvt_mode__Generate_header: std__Codecvt_mode = 2;
pub type std__Codecvt_mode = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char16_t_char__Mbstatet_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_char16_t_char__Mbstatet_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char32_t_char__Mbstatet_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_char32_t_char__Mbstatet_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_wchar_t_char__Mbstatet_close0"]
        [::std::mem::size_of::<std_codecvt>() - 64usize];
    ["Align of template specialization: std_codecvt_open0_wchar_t_char__Mbstatet_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_unsigned_short_char__Mbstatet_close0"]
        [::std::mem::size_of::<std_codecvt>() - 64usize];
    ["Align of template specialization: std_codecvt_open0_unsigned_short_char__Mbstatet_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt_byname {
    pub _base: std_codecvt,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype_base {
    pub _base: std_locale_facet,
}
pub const std_ctype_base_alnum: std_ctype_base__bindgen_ty_1 = 263;
pub const std_ctype_base_alpha: std_ctype_base__bindgen_ty_1 = 259;
pub const std_ctype_base_cntrl: std_ctype_base__bindgen_ty_1 = 32;
pub const std_ctype_base_digit: std_ctype_base__bindgen_ty_1 = 4;
pub const std_ctype_base_graph: std_ctype_base__bindgen_ty_1 = 279;
pub const std_ctype_base_lower: std_ctype_base__bindgen_ty_1 = 2;
pub const std_ctype_base_print: std_ctype_base__bindgen_ty_1 = 471;
pub const std_ctype_base_punct: std_ctype_base__bindgen_ty_1 = 16;
pub const std_ctype_base_space: std_ctype_base__bindgen_ty_1 = 72;
pub const std_ctype_base_upper: std_ctype_base__bindgen_ty_1 = 1;
pub const std_ctype_base_xdigit: std_ctype_base__bindgen_ty_1 = 128;
pub const std_ctype_base_blank: std_ctype_base__bindgen_ty_1 = 72;
pub type std_ctype_base__bindgen_ty_1 = ::std::os::raw::c_int;
pub type std_ctype_base_mask = ::std::os::raw::c_short;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ctype_base"][::std::mem::size_of::<std_ctype_base>() - 16usize];
    ["Alignment of std_ctype_base"][::std::mem::align_of::<std_ctype_base>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype {
    pub _base: std_ctype_base,
    pub _Ctype: std__Locinfo__Ctypevec,
    pub _Cvt: std__Locinfo__Cvtvec,
}
pub type std_ctype_char_type<_Elem> = _Elem;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 48usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 96usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_ctype>() - 96usize];
    ["Align of template specialization: std_ctype_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype_byname {
    pub _base: std_ctype,
}
pub const std__Case_sensitive__Nope: std__Case_sensitive = false;
pub const std__Case_sensitive__Yes: std__Case_sensitive = true;
pub type std__Case_sensitive = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Iosb {
    pub _address: u8,
}
pub const std__Iosb__Fmtflags__Fmtmask: std__Iosb__Fmtflags = 0;
pub const std__Iosb__Fmtflags__Fmtzero: std__Iosb__Fmtflags = 0;
pub type std__Iosb__Fmtflags = ::std::os::raw::c_int;
pub const std__Iosb__Iostate__Statmask: std__Iosb__Iostate = 0;
pub type std__Iosb__Iostate = ::std::os::raw::c_int;
pub const std__Iosb__Dummy_enum__Dummy_enum_val: std__Iosb__Dummy_enum = 0;
pub type std__Iosb__Dummy_enum = ::std::os::raw::c_int;
pub const std__Iosb__Openmode__Openmask: std__Iosb__Openmode = 0;
pub type std__Iosb__Openmode = ::std::os::raw::c_int;
pub const std__Iosb__Seekdir__Seekbeg: std__Iosb__Seekdir = 0;
pub const std__Iosb__Seekdir__Seekcur: std__Iosb__Seekdir = 0;
pub const std__Iosb__Seekdir__Seekend: std__Iosb__Seekdir = 0;
pub type std__Iosb__Seekdir = ::std::os::raw::c_int;
pub const std__Iosb__Openprot: std__Iosb__bindgen_ty_1 = 0;
pub type std__Iosb__bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub _Stdstr: ::std::os::raw::c_ulonglong,
    pub _Mystate: std_ios_base_iostate,
    pub _Except: std_ios_base_iostate,
    pub _Fmtfl: std_ios_base_fmtflags,
    pub _Prec: std_streamsize,
    pub _Wide: std_streamsize,
    pub _Arr: *mut std_ios_base__Iosarray,
    pub _Calls: *mut std_ios_base__Fnarray,
    pub _Ploc: *mut std_locale,
}
pub type std_ios_base_fmtflags = ::std::os::raw::c_int;
pub type std_ios_base_iostate = ::std::os::raw::c_int;
pub type std_ios_base_openmode = ::std::os::raw::c_int;
pub type std_ios_base_seekdir = ::std::os::raw::c_int;
pub const std_ios_base_event_erase_event: std_ios_base_event = 0;
pub const std_ios_base_event_imbue_event: std_ios_base_event = 1;
pub const std_ios_base_event_copyfmt_event: std_ios_base_event = 2;
pub type std_ios_base_event = ::std::os::raw::c_int;
pub type std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: std_ios_base_event,
        arg2: *mut std_ios_base,
        arg3: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_failure"][::std::mem::size_of::<std_ios_base_failure>() - 40usize];
    ["Alignment of std_ios_base_failure"][::std::mem::align_of::<std_ios_base_failure>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?_Init_cnt@Init@ios_base@std@@0HA"]
    pub static mut std_ios_base_Init__Init_cnt: ::std::os::raw::c_int;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_Init"][::std::mem::size_of::<std_ios_base_Init>() - 1usize];
    ["Alignment of std_ios_base_Init"][::std::mem::align_of::<std_ios_base_Init>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Iosarray {
    pub _Next: *mut std_ios_base__Iosarray,
    pub _Index: ::std::os::raw::c_int,
    pub _Lo: ::std::os::raw::c_long,
    pub _Vp: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Iosarray"][::std::mem::size_of::<std_ios_base__Iosarray>() - 24usize];
    ["Alignment of std_ios_base__Iosarray"]
        [::std::mem::align_of::<std_ios_base__Iosarray>() - 8usize];
    ["Offset of field: std_ios_base__Iosarray::_Next"]
        [::std::mem::offset_of!(std_ios_base__Iosarray, _Next) - 0usize];
    ["Offset of field: std_ios_base__Iosarray::_Index"]
        [::std::mem::offset_of!(std_ios_base__Iosarray, _Index) - 8usize];
    ["Offset of field: std_ios_base__Iosarray::_Lo"]
        [::std::mem::offset_of!(std_ios_base__Iosarray, _Lo) - 12usize];
    ["Offset of field: std_ios_base__Iosarray::_Vp"]
        [::std::mem::offset_of!(std_ios_base__Iosarray, _Vp) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Fnarray {
    pub _Next: *mut std_ios_base__Fnarray,
    pub _Index: ::std::os::raw::c_int,
    pub _Pfn: std_ios_base_event_callback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Fnarray"][::std::mem::size_of::<std_ios_base__Fnarray>() - 24usize];
    ["Alignment of std_ios_base__Fnarray"]
        [::std::mem::align_of::<std_ios_base__Fnarray>() - 8usize];
    ["Offset of field: std_ios_base__Fnarray::_Next"]
        [::std::mem::offset_of!(std_ios_base__Fnarray, _Next) - 0usize];
    ["Offset of field: std_ios_base__Fnarray::_Index"]
        [::std::mem::offset_of!(std_ios_base__Fnarray, _Index) - 8usize];
    ["Offset of field: std_ios_base__Fnarray::_Pfn"]
        [::std::mem::offset_of!(std_ios_base__Fnarray, _Pfn) - 16usize];
};
extern "C" {
    #[link_name = "\u{1}?_Index@ios_base@std@@0HA"]
    pub static mut std_ios_base__Index: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?_Sync@ios_base@std@@0_NA"]
    pub static mut std_ios_base__Sync: bool;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base"][::std::mem::size_of::<std_ios_base>() - 72usize];
    ["Alignment of std_ios_base"][::std::mem::align_of::<std_ios_base>() - 8usize];
    ["Offset of field: std_ios_base::_Stdstr"]
        [::std::mem::offset_of!(std_ios_base, _Stdstr) - 8usize];
    ["Offset of field: std_ios_base::_Mystate"]
        [::std::mem::offset_of!(std_ios_base, _Mystate) - 16usize];
    ["Offset of field: std_ios_base::_Except"]
        [::std::mem::offset_of!(std_ios_base, _Except) - 20usize];
    ["Offset of field: std_ios_base::_Fmtfl"]
        [::std::mem::offset_of!(std_ios_base, _Fmtfl) - 24usize];
    ["Offset of field: std_ios_base::_Prec"][::std::mem::offset_of!(std_ios_base, _Prec) - 32usize];
    ["Offset of field: std_ios_base::_Wide"][::std::mem::offset_of!(std_ios_base, _Wide) - 40usize];
    ["Offset of field: std_ios_base::_Arr"][::std::mem::offset_of!(std_ios_base, _Arr) - 48usize];
    ["Offset of field: std_ios_base::_Calls"]
        [::std::mem::offset_of!(std_ios_base, _Calls) - 56usize];
    ["Offset of field: std_ios_base::_Ploc"][::std::mem::offset_of!(std_ios_base, _Ploc) - 64usize];
};
extern "C" {
    #[link_name = "\u{1}?_Addstd@ios_base@std@@SAXPEAV12@@Z"]
    pub fn std_ios_base__Addstd(arg1: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn _Addstd(arg1: *mut std_ios_base) {
        std_ios_base__Addstd(arg1)
    }
}
#[repr(C)]
pub struct std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_streambuf<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub vtable_: *const std_basic_streambuf__bindgen_vtable,
    pub _Gfirst: *mut _Elem,
    pub _Pfirst: *mut _Elem,
    pub _IGfirst: *mut *mut _Elem,
    pub _IPfirst: *mut *mut _Elem,
    pub _Gnext: *mut _Elem,
    pub _Pnext: *mut _Elem,
    pub _IGnext: *mut *mut _Elem,
    pub _IPnext: *mut *mut _Elem,
    pub _Gcount: ::std::os::raw::c_int,
    pub _Pcount: ::std::os::raw::c_int,
    pub _IGcount: *mut ::std::os::raw::c_int,
    pub _IPcount: *mut ::std::os::raw::c_int,
    pub _Plocale: *mut std_locale,
}
pub type std_basic_streambuf_char_type<_Elem> = _Elem;
pub type std_basic_streambuf_traits_type<_Traits> = _Traits;
pub type std_basic_streambuf_int_type = [u8; 0usize];
pub type std_basic_streambuf_pos_type = [u8; 0usize];
pub type std_basic_streambuf_off_type = [u8; 0usize];
pub const std__Max_int_dig: ::std::os::raw::c_ulonglong = 32;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_locale_facet,
    pub _Grouping: *const ::std::os::raw::c_char,
    pub _Dp: _Elem,
    pub _Kseparator: _Elem,
    pub _Falsename: *const _Elem,
    pub _Truename: *const _Elem,
}
pub type std_numpunct_string_type = std_basic_string;
pub type std_numpunct_char_type<_Elem> = _Elem;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct_byname<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_numpunct<_Elem>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Num_get_parse_result {
    pub _Base: ::std::os::raw::c_schar,
    pub _Bad_grouping: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Num_get_parse_result"]
        [::std::mem::size_of::<std__Num_get_parse_result>() - 2usize];
    ["Alignment of std__Num_get_parse_result"]
        [::std::mem::align_of::<std__Num_get_parse_result>() - 1usize];
    ["Offset of field: std__Num_get_parse_result::_Base"]
        [::std::mem::offset_of!(std__Num_get_parse_result, _Base) - 0usize];
    ["Offset of field: std__Num_get_parse_result::_Bad_grouping"]
        [::std::mem::offset_of!(std__Num_get_parse_result, _Bad_grouping) - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_num_get {
    pub _base: std_locale_facet,
}
pub type std_num_get_char_type<_Elem> = _Elem;
pub type std_num_get_iter_type<_InIt> = _InIt;
#[repr(C)]
#[derive(Debug)]
pub struct std_num_put {
    pub _base: std_locale_facet,
}
pub type std_num_put_char_type<_Elem> = _Elem;
pub type std_num_put_iter_type<_OutIt> = _OutIt;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ios<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_ios_base,
    pub _Mystrbuf: *mut std_basic_ios__Mysb<_Elem>,
    pub _Tiestr: *mut std_basic_ios__Myos<_Elem>,
    pub _Fillch: _Elem,
}
pub type std_basic_ios__Myos<_Elem> = std_basic_ostream<_Elem>;
pub type std_basic_ios__Mysb<_Elem> = std_basic_streambuf<_Elem>;
pub type std_basic_ios__Ctype = std_ctype;
pub type std_basic_ios_char_type<_Elem> = _Elem;
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios_int_type = [u8; 0usize];
pub type std_basic_ios_pos_type = [u8; 0usize];
pub type std_basic_ios_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
}
pub type std_basic_ostream__Myios<_Elem> = std_basic_ios<_Elem>;
pub type std_basic_ostream__Mysb<_Elem> = std_basic_streambuf<_Elem>;
pub type std_basic_ostream__Iter<_Elem> = std_ostreambuf_iterator<_Elem>;
pub type std_basic_ostream__Nput = std_num_put;
pub type std_basic_ostream_int_type = [u8; 0usize];
pub type std_basic_ostream_pos_type = [u8; 0usize];
pub type std_basic_ostream_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream__Sentry_base<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Myostr: *mut std_basic_ostream<_Elem>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream_sentry<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_basic_ostream__Sentry_base<_Elem>,
    pub _Ok: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_stream_out {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Chcount: std_streamsize,
}
pub type std_basic_istream__Myios<_Elem> = std_basic_ios<_Elem>;
pub type std_basic_istream__Mysb<_Elem> = std_basic_streambuf<_Elem>;
pub type std_basic_istream__Iter<_Elem> = std_istreambuf_iterator<_Elem>;
pub type std_basic_istream__Ctype = std_ctype;
pub type std_basic_istream__Nget = std_num_get;
pub type std_basic_istream_int_type = [u8; 0usize];
pub type std_basic_istream_pos_type = [u8; 0usize];
pub type std_basic_istream_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream__Sentry_base<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _Myistr: *mut std_basic_istream<_Elem>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream_sentry<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_basic_istream__Sentry_base<_Elem>,
    pub _Ok: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_iostream<_Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_basic_istream<_Elem>,
    pub _base_1: std_basic_ostream<_Elem>,
}
pub type std_basic_iostream__Myis<_Elem> = std_basic_istream<_Elem>;
pub type std_basic_iostream__Myos<_Elem> = std_basic_ostream<_Elem>;
pub type std_basic_iostream__Myios<_Elem> = std_basic_ios<_Elem>;
pub type std_basic_iostream_char_type<_Elem> = _Elem;
pub type std_basic_iostream_traits_type<_Traits> = _Traits;
pub type std_basic_iostream_int_type = [u8; 0usize];
pub type std_basic_iostream_pos_type = [u8; 0usize];
pub type std_basic_iostream_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Can_stream_in {
    pub _base: std_false_type,
}
extern "C" {
    #[link_name = "\u{1}?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    pub static mut std_cin: std_istream;
}
extern "C" {
    #[link_name = "\u{1}?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    pub static mut std_cout: std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    pub static mut std_cerr: std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    pub static mut std_clog: std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_cin@std@@3PEAV?$basic_istream@DU?$char_traits@D@std@@@1@EA"]
    pub static mut std__Ptr_cin: *mut std_istream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_cout@std@@3PEAV?$basic_ostream@DU?$char_traits@D@std@@@1@EA"]
    pub static mut std__Ptr_cout: *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_cerr@std@@3PEAV?$basic_ostream@DU?$char_traits@D@std@@@1@EA"]
    pub static mut std__Ptr_cerr: *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_clog@std@@3PEAV?$basic_ostream@DU?$char_traits@D@std@@@1@EA"]
    pub static mut std__Ptr_clog: *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}?wcin@std@@3V?$basic_istream@_WU?$char_traits@_W@std@@@1@A"]
    pub static mut std_wcin: std_wistream;
}
extern "C" {
    #[link_name = "\u{1}?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A"]
    pub static mut std_wcout: std_wostream;
}
extern "C" {
    #[link_name = "\u{1}?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A"]
    pub static mut std_wcerr: std_wostream;
}
extern "C" {
    #[link_name = "\u{1}?wclog@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A"]
    pub static mut std_wclog: std_wostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_wcin@std@@3PEAV?$basic_istream@_WU?$char_traits@_W@std@@@1@EA"]
    pub static mut std__Ptr_wcin: *mut std_wistream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_wcout@std@@3PEAV?$basic_ostream@_WU?$char_traits@_W@std@@@1@EA"]
    pub static mut std__Ptr_wcout: *mut std_wostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_wcerr@std@@3PEAV?$basic_ostream@_WU?$char_traits@_W@std@@@1@EA"]
    pub static mut std__Ptr_wcerr: *mut std_wostream;
}
extern "C" {
    #[link_name = "\u{1}?_Ptr_wclog@std@@3PEAV?$basic_ostream@_WU?$char_traits@_W@std@@@1@EA"]
    pub static mut std__Ptr_wclog: *mut std_wostream;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type _HFILE = *mut ::std::os::raw::c_void;
pub type _CRT_REPORT_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_REPORT_HOOKW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut u16,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_ALLOC_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: *const ::std::os::raw::c_uchar,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_DUMP_CLIENT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemBlockHeader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemState {
    pub pBlockHeader: *mut _CrtMemBlockHeader,
    pub lCounts: [usize; 5usize],
    pub lSizes: [usize; 5usize],
    pub lHighWaterCount: usize,
    pub lTotalCount: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CrtMemState"][::std::mem::size_of::<_CrtMemState>() - 104usize];
    ["Alignment of _CrtMemState"][::std::mem::align_of::<_CrtMemState>() - 8usize];
    ["Offset of field: _CrtMemState::pBlockHeader"]
        [::std::mem::offset_of!(_CrtMemState, pBlockHeader) - 0usize];
    ["Offset of field: _CrtMemState::lCounts"]
        [::std::mem::offset_of!(_CrtMemState, lCounts) - 8usize];
    ["Offset of field: _CrtMemState::lSizes"]
        [::std::mem::offset_of!(_CrtMemState, lSizes) - 48usize];
    ["Offset of field: _CrtMemState::lHighWaterCount"]
        [::std::mem::offset_of!(_CrtMemState, lHighWaterCount) - 88usize];
    ["Offset of field: _CrtMemState::lTotalCount"]
        [::std::mem::offset_of!(_CrtMemState, lTotalCount) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 8usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 8usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut u16,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut u16;
}
extern "C" {
    pub fn fputws(_Buffer: *const u16, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut u16, _BufferCount: usize) -> *mut u16;
}
extern "C" {
    pub fn putwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const u16, _Mode: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(_FileName: *const u16, _Mode: *const u16, _OldStream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const u16,
        _Mode: *const u16,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const u16,
        _Mode: *const u16,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const u16);
}
extern "C" {
    pub fn _wpopen(_Command: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut u16, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *const u16;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16)
        -> *mut u16;
}
extern "C" {
    pub fn _wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscat(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(_String: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const u16) -> usize;
}
extern "C" {
    pub fn wcsnlen(_Source: *const u16, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Destination: *mut u16, _Source: *const u16, _Count: usize) -> *mut u16;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Destination: *mut u16, _Source: *const u16, _Count: usize) -> *mut u16;
}
extern "C" {
    pub fn wcspbrk(_String: *const u16, _Control: *const u16) -> *const u16;
}
extern "C" {
    pub fn wcsspn(_String: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcstok(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut u16;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _ErrorMessage: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut u16,
        _SizeInWords: usize,
        _Value: u16,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut u16, _Value: u16, _MaxCount: usize) -> *mut u16;
}
extern "C" {
    pub fn _wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut u16, _SizeInWords: usize, _Value: u16) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut u16, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut u16, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut u16, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut u16, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut u16, _Source: *const u16, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut u16,
        _Source: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut u16, _Value: u16, _MaxCount: usize) -> *mut u16;
}
extern "C" {
    pub fn wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _cgetws_s(_Buffer: *mut u16, _BufferCount: usize, _SizeRead: *mut usize) -> errno_t;
}
extern "C" {
    pub fn _cputws(_Buffer: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getwch() -> wint_t;
}
extern "C" {
    pub fn _getwche() -> wint_t;
}
extern "C" {
    pub fn _putwch(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn _ungetwch(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn _getwch_nolock() -> wint_t;
}
extern "C" {
    pub fn _getwche_nolock() -> wint_t;
}
extern "C" {
    pub fn _putwch_nolock(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn _ungetwch_nolock(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn __conio_common_vcwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __pwctype_func() -> *const wctype_t;
}
extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wgetcwd(_DstBuf: *mut u16, _SizeInWords: ::std::os::raw::c_int) -> *mut u16;
}
extern "C" {
    pub fn _wgetdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut u16,
        _SizeInWords: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _wchdir(_Path: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmkdir(_Path: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrmdir(_Path: *const u16) -> ::std::os::raw::c_int;
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [u16; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata32_t"][::std::mem::size_of::<_wfinddata32_t>() - 540usize];
    ["Alignment of _wfinddata32_t"][::std::mem::align_of::<_wfinddata32_t>() - 4usize];
    ["Offset of field: _wfinddata32_t::attrib"]
        [::std::mem::offset_of!(_wfinddata32_t, attrib) - 0usize];
    ["Offset of field: _wfinddata32_t::time_create"]
        [::std::mem::offset_of!(_wfinddata32_t, time_create) - 4usize];
    ["Offset of field: _wfinddata32_t::time_access"]
        [::std::mem::offset_of!(_wfinddata32_t, time_access) - 8usize];
    ["Offset of field: _wfinddata32_t::time_write"]
        [::std::mem::offset_of!(_wfinddata32_t, time_write) - 12usize];
    ["Offset of field: _wfinddata32_t::size"]
        [::std::mem::offset_of!(_wfinddata32_t, size) - 16usize];
    ["Offset of field: _wfinddata32_t::name"]
        [::std::mem::offset_of!(_wfinddata32_t, name) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [u16; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata32i64_t"][::std::mem::size_of::<_wfinddata32i64_t>() - 544usize];
    ["Alignment of _wfinddata32i64_t"][::std::mem::align_of::<_wfinddata32i64_t>() - 8usize];
    ["Offset of field: _wfinddata32i64_t::attrib"]
        [::std::mem::offset_of!(_wfinddata32i64_t, attrib) - 0usize];
    ["Offset of field: _wfinddata32i64_t::time_create"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_create) - 4usize];
    ["Offset of field: _wfinddata32i64_t::time_access"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_access) - 8usize];
    ["Offset of field: _wfinddata32i64_t::time_write"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_write) - 12usize];
    ["Offset of field: _wfinddata32i64_t::size"]
        [::std::mem::offset_of!(_wfinddata32i64_t, size) - 16usize];
    ["Offset of field: _wfinddata32i64_t::name"]
        [::std::mem::offset_of!(_wfinddata32i64_t, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [u16; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata64i32_t"][::std::mem::size_of::<_wfinddata64i32_t>() - 560usize];
    ["Alignment of _wfinddata64i32_t"][::std::mem::align_of::<_wfinddata64i32_t>() - 8usize];
    ["Offset of field: _wfinddata64i32_t::attrib"]
        [::std::mem::offset_of!(_wfinddata64i32_t, attrib) - 0usize];
    ["Offset of field: _wfinddata64i32_t::time_create"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_create) - 8usize];
    ["Offset of field: _wfinddata64i32_t::time_access"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_access) - 16usize];
    ["Offset of field: _wfinddata64i32_t::time_write"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_write) - 24usize];
    ["Offset of field: _wfinddata64i32_t::size"]
        [::std::mem::offset_of!(_wfinddata64i32_t, size) - 32usize];
    ["Offset of field: _wfinddata64i32_t::name"]
        [::std::mem::offset_of!(_wfinddata64i32_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [u16; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata64_t"][::std::mem::size_of::<_wfinddata64_t>() - 560usize];
    ["Alignment of _wfinddata64_t"][::std::mem::align_of::<_wfinddata64_t>() - 8usize];
    ["Offset of field: _wfinddata64_t::attrib"]
        [::std::mem::offset_of!(_wfinddata64_t, attrib) - 0usize];
    ["Offset of field: _wfinddata64_t::time_create"]
        [::std::mem::offset_of!(_wfinddata64_t, time_create) - 8usize];
    ["Offset of field: _wfinddata64_t::time_access"]
        [::std::mem::offset_of!(_wfinddata64_t, time_access) - 16usize];
    ["Offset of field: _wfinddata64_t::time_write"]
        [::std::mem::offset_of!(_wfinddata64_t, time_write) - 24usize];
    ["Offset of field: _wfinddata64_t::size"]
        [::std::mem::offset_of!(_wfinddata64_t, size) - 32usize];
    ["Offset of field: _wfinddata64_t::name"]
        [::std::mem::offset_of!(_wfinddata64_t, name) - 40usize];
};
extern "C" {
    pub fn _waccess(
        _FileName: *const u16,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _waccess_s(_FileName: *const u16, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _wchmod(_FileName: *const u16, _Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcreat(
        _FileName: *const u16,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindfirst32(_FileName: *const u16, _FindData: *mut _wfinddata32_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wunlink(_FileName: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrename(_OldFileName: *const u16, _NewFileName: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut u16, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wmktemp(_TemplateName: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const u16, _FindData: *mut _wfinddata32i64_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const u16, _FindData: *mut _wfinddata64i32_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64(_FileName: *const u16, _FindData: *mut _wfinddata64_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const u16,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const u16,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wexecl(_FileName: *const u16, _ArgList: *const u16, ...) -> isize;
}
extern "C" {
    pub fn _wexecle(_FileName: *const u16, _ArgList: *const u16, ...) -> isize;
}
extern "C" {
    pub fn _wexeclp(_FileName: *const u16, _ArgList: *const u16, ...) -> isize;
}
extern "C" {
    pub fn _wexeclpe(_FileName: *const u16, _ArgList: *const u16, ...) -> isize;
}
extern "C" {
    pub fn _wexecv(_FileName: *const u16, _ArgList: *const *const u16) -> isize;
}
extern "C" {
    pub fn _wexecve(
        _FileName: *const u16,
        _ArgList: *const *const u16,
        _Env: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wexecvp(_FileName: *const u16, _ArgList: *const *const u16) -> isize;
}
extern "C" {
    pub fn _wexecvpe(
        _FileName: *const u16,
        _ArgList: *const *const u16,
        _Env: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const u16,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const u16,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const u16,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const u16,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const *const u16,
        _Env: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const u16,
        _ArgList: *const *const u16,
        _Env: *const *const u16,
    ) -> isize;
}
extern "C" {
    pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstod_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstold_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
extern "C" {
    pub fn _wcstof_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const u16) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const u16) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _wtoi64(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(_Buffer: *mut u16, _Path: *const u16, _BufferCount: usize) -> *mut u16;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut u16,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _Dir: *mut u16,
        _Filename: *mut u16,
        _Ext: *mut u16,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _DriveCount: usize,
        _Dir: *mut u16,
        _DirCount: usize,
        _Filename: *mut u16,
        _FilenameCount: usize,
        _Ext: *mut u16,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut u16,
        _BufferCount: *mut usize,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const u16,
        _VarName: *const u16,
        _Buffer: *mut u16,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 36usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 4usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
};
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut u16;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut u16, _SizeInWords: usize, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _Format: *const u16,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _Format: *const u16,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut u16;
}
extern "C" {
    pub fn _wctime32_s(_Buffer: *mut u16, _SizeInWords: usize, _Time: *const __time32_t)
        -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut u16;
}
extern "C" {
    pub fn _wctime64_s(_Buffer: *mut u16, _SizeInWords: usize, _Time: *const __time64_t)
        -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut u16, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut u16, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut u16) -> *mut u16;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _stat32"][::std::mem::size_of::<_stat32>() - 36usize];
    ["Alignment of _stat32"][::std::mem::align_of::<_stat32>() - 4usize];
    ["Offset of field: _stat32::st_dev"][::std::mem::offset_of!(_stat32, st_dev) - 0usize];
    ["Offset of field: _stat32::st_ino"][::std::mem::offset_of!(_stat32, st_ino) - 4usize];
    ["Offset of field: _stat32::st_mode"][::std::mem::offset_of!(_stat32, st_mode) - 6usize];
    ["Offset of field: _stat32::st_nlink"][::std::mem::offset_of!(_stat32, st_nlink) - 8usize];
    ["Offset of field: _stat32::st_uid"][::std::mem::offset_of!(_stat32, st_uid) - 10usize];
    ["Offset of field: _stat32::st_gid"][::std::mem::offset_of!(_stat32, st_gid) - 12usize];
    ["Offset of field: _stat32::st_rdev"][::std::mem::offset_of!(_stat32, st_rdev) - 16usize];
    ["Offset of field: _stat32::st_size"][::std::mem::offset_of!(_stat32, st_size) - 20usize];
    ["Offset of field: _stat32::st_atime"][::std::mem::offset_of!(_stat32, st_atime) - 24usize];
    ["Offset of field: _stat32::st_mtime"][::std::mem::offset_of!(_stat32, st_mtime) - 28usize];
    ["Offset of field: _stat32::st_ctime"][::std::mem::offset_of!(_stat32, st_ctime) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32i64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _stat32i64"][::std::mem::size_of::<_stat32i64>() - 48usize];
    ["Alignment of _stat32i64"][::std::mem::align_of::<_stat32i64>() - 8usize];
    ["Offset of field: _stat32i64::st_dev"][::std::mem::offset_of!(_stat32i64, st_dev) - 0usize];
    ["Offset of field: _stat32i64::st_ino"][::std::mem::offset_of!(_stat32i64, st_ino) - 4usize];
    ["Offset of field: _stat32i64::st_mode"][::std::mem::offset_of!(_stat32i64, st_mode) - 6usize];
    ["Offset of field: _stat32i64::st_nlink"]
        [::std::mem::offset_of!(_stat32i64, st_nlink) - 8usize];
    ["Offset of field: _stat32i64::st_uid"][::std::mem::offset_of!(_stat32i64, st_uid) - 10usize];
    ["Offset of field: _stat32i64::st_gid"][::std::mem::offset_of!(_stat32i64, st_gid) - 12usize];
    ["Offset of field: _stat32i64::st_rdev"][::std::mem::offset_of!(_stat32i64, st_rdev) - 16usize];
    ["Offset of field: _stat32i64::st_size"][::std::mem::offset_of!(_stat32i64, st_size) - 24usize];
    ["Offset of field: _stat32i64::st_atime"]
        [::std::mem::offset_of!(_stat32i64, st_atime) - 32usize];
    ["Offset of field: _stat32i64::st_mtime"]
        [::std::mem::offset_of!(_stat32i64, st_mtime) - 36usize];
    ["Offset of field: _stat32i64::st_ctime"]
        [::std::mem::offset_of!(_stat32i64, st_ctime) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64i32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _stat64i32"][::std::mem::size_of::<_stat64i32>() - 48usize];
    ["Alignment of _stat64i32"][::std::mem::align_of::<_stat64i32>() - 8usize];
    ["Offset of field: _stat64i32::st_dev"][::std::mem::offset_of!(_stat64i32, st_dev) - 0usize];
    ["Offset of field: _stat64i32::st_ino"][::std::mem::offset_of!(_stat64i32, st_ino) - 4usize];
    ["Offset of field: _stat64i32::st_mode"][::std::mem::offset_of!(_stat64i32, st_mode) - 6usize];
    ["Offset of field: _stat64i32::st_nlink"]
        [::std::mem::offset_of!(_stat64i32, st_nlink) - 8usize];
    ["Offset of field: _stat64i32::st_uid"][::std::mem::offset_of!(_stat64i32, st_uid) - 10usize];
    ["Offset of field: _stat64i32::st_gid"][::std::mem::offset_of!(_stat64i32, st_gid) - 12usize];
    ["Offset of field: _stat64i32::st_rdev"][::std::mem::offset_of!(_stat64i32, st_rdev) - 16usize];
    ["Offset of field: _stat64i32::st_size"][::std::mem::offset_of!(_stat64i32, st_size) - 20usize];
    ["Offset of field: _stat64i32::st_atime"]
        [::std::mem::offset_of!(_stat64i32, st_atime) - 24usize];
    ["Offset of field: _stat64i32::st_mtime"]
        [::std::mem::offset_of!(_stat64i32, st_mtime) - 32usize];
    ["Offset of field: _stat64i32::st_ctime"]
        [::std::mem::offset_of!(_stat64i32, st_ctime) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _stat64"][::std::mem::size_of::<_stat64>() - 56usize];
    ["Alignment of _stat64"][::std::mem::align_of::<_stat64>() - 8usize];
    ["Offset of field: _stat64::st_dev"][::std::mem::offset_of!(_stat64, st_dev) - 0usize];
    ["Offset of field: _stat64::st_ino"][::std::mem::offset_of!(_stat64, st_ino) - 4usize];
    ["Offset of field: _stat64::st_mode"][::std::mem::offset_of!(_stat64, st_mode) - 6usize];
    ["Offset of field: _stat64::st_nlink"][::std::mem::offset_of!(_stat64, st_nlink) - 8usize];
    ["Offset of field: _stat64::st_uid"][::std::mem::offset_of!(_stat64, st_uid) - 10usize];
    ["Offset of field: _stat64::st_gid"][::std::mem::offset_of!(_stat64, st_gid) - 12usize];
    ["Offset of field: _stat64::st_rdev"][::std::mem::offset_of!(_stat64, st_rdev) - 16usize];
    ["Offset of field: _stat64::st_size"][::std::mem::offset_of!(_stat64, st_size) - 24usize];
    ["Offset of field: _stat64::st_atime"][::std::mem::offset_of!(_stat64, st_atime) - 32usize];
    ["Offset of field: _stat64::st_mtime"][::std::mem::offset_of!(_stat64, st_mtime) - 40usize];
    ["Offset of field: _stat64::st_ctime"][::std::mem::offset_of!(_stat64, st_ctime) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: time_t,
    pub st_mtime: time_t,
    pub st_ctime: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 48usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 4usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 6usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 8usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 10usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 12usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 16usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 20usize];
    ["Offset of field: stat::st_atime"][::std::mem::offset_of!(stat, st_atime) - 24usize];
    ["Offset of field: stat::st_mtime"][::std::mem::offset_of!(stat, st_mtime) - 32usize];
    ["Offset of field: stat::st_ctime"][::std::mem::offset_of!(stat, st_ctime) - 40usize];
};
extern "C" {
    pub fn _fstat32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat32i64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64i32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32i64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64i32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32(_FileName: *const u16, _Stat: *mut _stat32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32i64(_FileName: *const u16, _Stat: *mut _stat32i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64i32(_FileName: *const u16, _Stat: *mut _stat64i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64(_FileName: *const u16, _Stat: *mut _stat64) -> ::std::os::raw::c_int;
}
pub type _Wint_t = u16;
extern "C" {
    pub fn _wsetlocale(_Category: ::std::os::raw::c_int, _Locale: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wcreate_locale(_Category: ::std::os::raw::c_int, _Locale: *const u16) -> _locale_t;
}
extern "C" {
    pub fn btowc(_Ch: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn mbrlen(
        _Ch: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsrtowcs_s(
        _Retval: *mut usize,
        _Dst: *mut u16,
        _Size: usize,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _N: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbsrtowcs(
        _Dest: *mut u16,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Ch: u16,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcrtomb(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: u16,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Src: *mut *const u16,
        _Size: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsrtombs(
        _Dest: *mut ::std::os::raw::c_char,
        _PSource: *mut *const u16,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob(_WCh: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy_s(_S1: *mut u16, _N1: rsize_t, _S2: *const u16, _N: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wmemmove_s(_S1: *mut u16, _N1: rsize_t, _S2: *const u16, _N: rsize_t) -> errno_t;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _exception"][::std::mem::size_of::<_exception>() - 40usize];
    ["Alignment of _exception"][::std::mem::align_of::<_exception>() - 8usize];
    ["Offset of field: _exception::type_"][::std::mem::offset_of!(_exception, type_) - 0usize];
    ["Offset of field: _exception::name"][::std::mem::offset_of!(_exception, name) - 8usize];
    ["Offset of field: _exception::arg1"][::std::mem::offset_of!(_exception, arg1) - 16usize];
    ["Offset of field: _exception::arg2"][::std::mem::offset_of!(_exception, arg2) - 24usize];
    ["Offset of field: _exception::retval"][::std::mem::offset_of!(_exception, retval) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _complex"][::std::mem::size_of::<_complex>() - 16usize];
    ["Alignment of _complex"][::std::mem::align_of::<_complex>() - 8usize];
    ["Offset of field: _complex::x"][::std::mem::offset_of!(_complex, x) - 0usize];
    ["Offset of field: _complex::y"][::std::mem::offset_of!(_complex, y) - 8usize];
};
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _double_val"][::std::mem::size_of::<_double_val>() - 8usize];
    ["Alignment of _double_val"][::std::mem::align_of::<_double_val>() - 8usize];
    ["Offset of field: _double_val::_Sh"][::std::mem::offset_of!(_double_val, _Sh) - 0usize];
    ["Offset of field: _double_val::_Val"][::std::mem::offset_of!(_double_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_val"][::std::mem::size_of::<_float_val>() - 4usize];
    ["Alignment of _float_val"][::std::mem::align_of::<_float_val>() - 4usize];
    ["Offset of field: _float_val::_Sh"][::std::mem::offset_of!(_float_val, _Sh) - 0usize];
    ["Offset of field: _float_val::_Val"][::std::mem::offset_of!(_float_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldouble_val"][::std::mem::size_of::<_ldouble_val>() - 8usize];
    ["Alignment of _ldouble_val"][::std::mem::align_of::<_ldouble_val>() - 8usize];
    ["Offset of field: _ldouble_val::_Sh"][::std::mem::offset_of!(_ldouble_val, _Sh) - 0usize];
    ["Offset of field: _ldouble_val::_Val"][::std::mem::offset_of!(_ldouble_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_const"][::std::mem::size_of::<_float_const>() - 8usize];
    ["Alignment of _float_const"][::std::mem::align_of::<_float_const>() - 8usize];
    ["Offset of field: _float_const::_Word"][::std::mem::offset_of!(_float_const, _Word) - 0usize];
    ["Offset of field: _float_const::_Float"]
        [::std::mem::offset_of!(_float_const, _Float) - 0usize];
    ["Offset of field: _float_const::_Double"]
        [::std::mem::offset_of!(_float_const, _Double) - 0usize];
    ["Offset of field: _float_const::_Long_double"]
        [::std::mem::offset_of!(_float_const, _Long_double) - 0usize];
};
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Combined_type {
    pub _address: u8,
}
pub type _Combined_type__Type = f32;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Combined_type_open0_float_double_close0"]
        [::std::mem::size_of::<_Combined_type>() - 1usize];
    ["Align of template specialization: _Combined_type_open0_float_double_close0"]
        [::std::mem::align_of::<_Combined_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Combined_type_open0_float_long_double_close0"]
        [::std::mem::size_of::<_Combined_type>() - 1usize];
    ["Align of template specialization: _Combined_type_open0_float_long_double_close0"]
        [::std::mem::align_of::<_Combined_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_widened {
    pub _address: u8,
}
pub type _Real_widened__Type = f64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_float_float_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_float_float_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_float_double_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_float_double_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_double_float_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_double_float_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_double_double_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_double_double_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_type {
    pub _address: u8,
}
pub type _Real_type__Type = f64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_type_open0_float_close0"]
        [::std::mem::size_of::<_Real_type>() - 1usize];
    ["Align of template specialization: _Real_type_open0_float_close0"]
        [::std::mem::align_of::<_Real_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_type_open0_long_double_close0"]
        [::std::mem::size_of::<_Real_type>() - 1usize];
    ["Align of template specialization: _Real_type_open0_long_double_close0"]
        [::std::mem::align_of::<_Real_type>() - 1usize];
};
extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_X: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut u16;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut u16) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
extern "C" {
    pub fn _BitScanForward(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanForward64(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse64(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittest(
        arg1: *const ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedAnd(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedAnd64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedand64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedCompareExchange(
        _Destination: *mut ::std::os::raw::c_long,
        _Exchange: ::std::os::raw::c_long,
        _Comparand: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange16(
        _Destination: *mut ::std::os::raw::c_short,
        _Exchange: ::std::os::raw::c_short,
        _Comparand: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedCompareExchange64(
        _Destination: *mut ::std::os::raw::c_longlong,
        _Exchange: ::std::os::raw::c_longlong,
        _Comparand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange8(
        _Destination: *mut ::std::os::raw::c_char,
        _Exchange: ::std::os::raw::c_char,
        _Comparand: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedCompareExchange128(
        _Destination: *mut ::std::os::raw::c_longlong,
        _ExchangeHigh: ::std::os::raw::c_longlong,
        _ExchangeLow: ::std::os::raw::c_longlong,
        _ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedDecrement(_Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedDecrement16(
        _Addend: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedDecrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockeddecrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange(
        _Target: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchange16(
        _Target: *mut ::std::os::raw::c_short,
        _Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedExchange64(
        _Target: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedexchange64(
        _Target: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange8(
        _Target: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedExchangeAdd(
        _Addend: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangeAdd16(
        _Addend: *mut ::std::os::raw::c_short,
        _Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedexchangeadd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd8(
        _Addend: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedIncrement(_Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedIncrement16(
        _Addend: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedIncrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedincrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedOr64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedXor(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedXor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedxor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ReadWriteBarrier();
}
extern "C" {
    pub fn __iso_volatile_load16(arg1: *const ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn __iso_volatile_load32(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iso_volatile_load64(
        arg1: *const ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __iso_volatile_load8(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn __iso_volatile_store16(
        arg1: *mut ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn __iso_volatile_store32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __iso_volatile_store64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn __iso_volatile_store8(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_char);
}
extern "C" {
    pub fn _mm_pause();
}
extern "C" {
    pub fn __lzcnt(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __lzcnt16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __lzcnt64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __popcnt(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __popcnt16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __popcnt64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotl16(
        _Value: ::std::os::raw::c_ushort,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _rotl8(
        _Value: ::std::os::raw::c_uchar,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _rotr16(
        _Value: ::std::os::raw::c_ushort,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _rotr8(
        _Value: ::std::os::raw::c_uchar,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __shiftleft128(
        _LowPart: ::std::os::raw::c_ulonglong,
        _HighPart: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __shiftright128(
        _LowPart: ::std::os::raw::c_ulonglong,
        _HighPart: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _umul128(
        _Multiplier: ::std::os::raw::c_ulonglong,
        _Multiplicand: ::std::os::raw::c_ulonglong,
        _HighProduct: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _udiv128(
        _HighDividend: ::std::os::raw::c_ulonglong,
        _LowDividend: ::std::os::raw::c_ulonglong,
        _Divisor: ::std::os::raw::c_ulonglong,
        _Remainder: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _addcarry_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn __ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn __floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __round(arg1: f64) -> f64;
}
extern "C" {
    pub fn __roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __signbitvalue(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __signbitvaluef(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __builtin_assume_aligned(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SETJMP_FLOAT128 {
    pub Part: [::std::os::raw::c_ulonglong; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SETJMP_FLOAT128"][::std::mem::size_of::<_SETJMP_FLOAT128>() - 16usize];
    ["Alignment of _SETJMP_FLOAT128"][::std::mem::align_of::<_SETJMP_FLOAT128>() - 16usize];
    ["Offset of field: _SETJMP_FLOAT128::Part"]
        [::std::mem::offset_of!(_SETJMP_FLOAT128, Part) - 0usize];
};
pub type SETJMP_FLOAT128 = _SETJMP_FLOAT128;
pub type _JBTYPE = SETJMP_FLOAT128;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _JUMP_BUFFER {
    pub Frame: ::std::os::raw::c_ulonglong,
    pub Rbx: ::std::os::raw::c_ulonglong,
    pub Rsp: ::std::os::raw::c_ulonglong,
    pub Rbp: ::std::os::raw::c_ulonglong,
    pub Rsi: ::std::os::raw::c_ulonglong,
    pub Rdi: ::std::os::raw::c_ulonglong,
    pub R12: ::std::os::raw::c_ulonglong,
    pub R13: ::std::os::raw::c_ulonglong,
    pub R14: ::std::os::raw::c_ulonglong,
    pub R15: ::std::os::raw::c_ulonglong,
    pub Rip: ::std::os::raw::c_ulonglong,
    pub MxCsr: ::std::os::raw::c_ulong,
    pub FpCsr: ::std::os::raw::c_ushort,
    pub Spare: ::std::os::raw::c_ushort,
    pub Xmm6: SETJMP_FLOAT128,
    pub Xmm7: SETJMP_FLOAT128,
    pub Xmm8: SETJMP_FLOAT128,
    pub Xmm9: SETJMP_FLOAT128,
    pub Xmm10: SETJMP_FLOAT128,
    pub Xmm11: SETJMP_FLOAT128,
    pub Xmm12: SETJMP_FLOAT128,
    pub Xmm13: SETJMP_FLOAT128,
    pub Xmm14: SETJMP_FLOAT128,
    pub Xmm15: SETJMP_FLOAT128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JUMP_BUFFER"][::std::mem::size_of::<_JUMP_BUFFER>() - 256usize];
    ["Alignment of _JUMP_BUFFER"][::std::mem::align_of::<_JUMP_BUFFER>() - 16usize];
    ["Offset of field: _JUMP_BUFFER::Frame"][::std::mem::offset_of!(_JUMP_BUFFER, Frame) - 0usize];
    ["Offset of field: _JUMP_BUFFER::Rbx"][::std::mem::offset_of!(_JUMP_BUFFER, Rbx) - 8usize];
    ["Offset of field: _JUMP_BUFFER::Rsp"][::std::mem::offset_of!(_JUMP_BUFFER, Rsp) - 16usize];
    ["Offset of field: _JUMP_BUFFER::Rbp"][::std::mem::offset_of!(_JUMP_BUFFER, Rbp) - 24usize];
    ["Offset of field: _JUMP_BUFFER::Rsi"][::std::mem::offset_of!(_JUMP_BUFFER, Rsi) - 32usize];
    ["Offset of field: _JUMP_BUFFER::Rdi"][::std::mem::offset_of!(_JUMP_BUFFER, Rdi) - 40usize];
    ["Offset of field: _JUMP_BUFFER::R12"][::std::mem::offset_of!(_JUMP_BUFFER, R12) - 48usize];
    ["Offset of field: _JUMP_BUFFER::R13"][::std::mem::offset_of!(_JUMP_BUFFER, R13) - 56usize];
    ["Offset of field: _JUMP_BUFFER::R14"][::std::mem::offset_of!(_JUMP_BUFFER, R14) - 64usize];
    ["Offset of field: _JUMP_BUFFER::R15"][::std::mem::offset_of!(_JUMP_BUFFER, R15) - 72usize];
    ["Offset of field: _JUMP_BUFFER::Rip"][::std::mem::offset_of!(_JUMP_BUFFER, Rip) - 80usize];
    ["Offset of field: _JUMP_BUFFER::MxCsr"][::std::mem::offset_of!(_JUMP_BUFFER, MxCsr) - 88usize];
    ["Offset of field: _JUMP_BUFFER::FpCsr"][::std::mem::offset_of!(_JUMP_BUFFER, FpCsr) - 92usize];
    ["Offset of field: _JUMP_BUFFER::Spare"][::std::mem::offset_of!(_JUMP_BUFFER, Spare) - 94usize];
    ["Offset of field: _JUMP_BUFFER::Xmm6"][::std::mem::offset_of!(_JUMP_BUFFER, Xmm6) - 96usize];
    ["Offset of field: _JUMP_BUFFER::Xmm7"][::std::mem::offset_of!(_JUMP_BUFFER, Xmm7) - 112usize];
    ["Offset of field: _JUMP_BUFFER::Xmm8"][::std::mem::offset_of!(_JUMP_BUFFER, Xmm8) - 128usize];
    ["Offset of field: _JUMP_BUFFER::Xmm9"][::std::mem::offset_of!(_JUMP_BUFFER, Xmm9) - 144usize];
    ["Offset of field: _JUMP_BUFFER::Xmm10"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm10) - 160usize];
    ["Offset of field: _JUMP_BUFFER::Xmm11"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm11) - 176usize];
    ["Offset of field: _JUMP_BUFFER::Xmm12"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm12) - 192usize];
    ["Offset of field: _JUMP_BUFFER::Xmm13"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm13) - 208usize];
    ["Offset of field: _JUMP_BUFFER::Xmm14"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm14) - 224usize];
    ["Offset of field: _JUMP_BUFFER::Xmm15"]
        [::std::mem::offset_of!(_JUMP_BUFFER, Xmm15) - 240usize];
};
pub type jmp_buf = [_JBTYPE; 16usize];
extern "C" {
    pub fn _setjmp(_Buf: *mut _JBTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(_Buf: *mut _JBTYPE, _Value: ::std::os::raw::c_int) -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __m64 {
    pub m64_u64: ::std::os::raw::c_ulonglong,
    pub m64_f32: [f32; 2usize],
    pub m64_i8: [::std::os::raw::c_char; 8usize],
    pub m64_i16: [::std::os::raw::c_short; 4usize],
    pub m64_i32: [::std::os::raw::c_int; 2usize],
    pub m64_i64: ::std::os::raw::c_longlong,
    pub m64_u8: [::std::os::raw::c_uchar; 8usize],
    pub m64_u16: [::std::os::raw::c_ushort; 4usize],
    pub m64_u32: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m64"][::std::mem::size_of::<__m64>() - 8usize];
    ["Alignment of __m64"][::std::mem::align_of::<__m64>() - 8usize];
    ["Offset of field: __m64::m64_u64"][::std::mem::offset_of!(__m64, m64_u64) - 0usize];
    ["Offset of field: __m64::m64_f32"][::std::mem::offset_of!(__m64, m64_f32) - 0usize];
    ["Offset of field: __m64::m64_i8"][::std::mem::offset_of!(__m64, m64_i8) - 0usize];
    ["Offset of field: __m64::m64_i16"][::std::mem::offset_of!(__m64, m64_i16) - 0usize];
    ["Offset of field: __m64::m64_i32"][::std::mem::offset_of!(__m64, m64_i32) - 0usize];
    ["Offset of field: __m64::m64_i64"][::std::mem::offset_of!(__m64, m64_i64) - 0usize];
    ["Offset of field: __m64::m64_u8"][::std::mem::offset_of!(__m64, m64_u8) - 0usize];
    ["Offset of field: __m64::m64_u16"][::std::mem::offset_of!(__m64, m64_u16) - 0usize];
    ["Offset of field: __m64::m64_u32"][::std::mem::offset_of!(__m64, m64_u32) - 0usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128 {
    pub m128_f32: [f32; 4usize],
    pub m128_u64: [::std::os::raw::c_ulonglong; 2usize],
    pub m128_i8: [::std::os::raw::c_char; 16usize],
    pub m128_i16: [::std::os::raw::c_short; 8usize],
    pub m128_i32: [::std::os::raw::c_int; 4usize],
    pub m128_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128_u32: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128"][::std::mem::size_of::<__m128>() - 16usize];
    ["Alignment of __m128"][::std::mem::align_of::<__m128>() - 16usize];
    ["Offset of field: __m128::m128_f32"][::std::mem::offset_of!(__m128, m128_f32) - 0usize];
    ["Offset of field: __m128::m128_u64"][::std::mem::offset_of!(__m128, m128_u64) - 0usize];
    ["Offset of field: __m128::m128_i8"][::std::mem::offset_of!(__m128, m128_i8) - 0usize];
    ["Offset of field: __m128::m128_i16"][::std::mem::offset_of!(__m128, m128_i16) - 0usize];
    ["Offset of field: __m128::m128_i32"][::std::mem::offset_of!(__m128, m128_i32) - 0usize];
    ["Offset of field: __m128::m128_i64"][::std::mem::offset_of!(__m128, m128_i64) - 0usize];
    ["Offset of field: __m128::m128_u8"][::std::mem::offset_of!(__m128, m128_u8) - 0usize];
    ["Offset of field: __m128::m128_u16"][::std::mem::offset_of!(__m128, m128_u16) - 0usize];
    ["Offset of field: __m128::m128_u32"][::std::mem::offset_of!(__m128, m128_u32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: usize,
    pub _useflag: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _heapinfo"][::std::mem::size_of::<_heapinfo>() - 24usize];
    ["Alignment of _heapinfo"][::std::mem::align_of::<_heapinfo>() - 8usize];
    ["Offset of field: _heapinfo::_pentry"][::std::mem::offset_of!(_heapinfo, _pentry) - 0usize];
    ["Offset of field: _heapinfo::_size"][::std::mem::offset_of!(_heapinfo, _size) - 8usize];
    ["Offset of field: _heapinfo::_useflag"][::std::mem::offset_of!(_heapinfo, _useflag) - 16usize];
};
pub type _HEAPINFO = _heapinfo;
extern "C" {
    pub fn _alloca(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _get_heap_handle() -> isize;
}
extern "C" {
    pub fn _heapmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapwalk(_EntryInfo: *mut _HEAPINFO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapchk() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _resetstkoflw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_add_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_add_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sub_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sub_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mul_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mul_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_div_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_div_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_min_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_min_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_max_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_max_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_and_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_andnot_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_or_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_xor_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpeq_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpeq_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmplt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmplt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmple_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmple_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpgt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpgt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpge_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpge_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpneq_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpneq_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnlt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnlt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnle_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnle_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpngt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpngt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnge_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnge_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpord_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpord_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpunord_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpunord_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_comieq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comilt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comile_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comigt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comige_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comineq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomieq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomilt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomile_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomigt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomige_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomineq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_ss2si(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_ss2si(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_si2ss(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_f32(_A: __m128) -> f32;
}
extern "C" {
    pub fn _mm_cvtss_si64(_A: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_si64(_A: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64_ss(_A: __m128, _B: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_shuffle_ps(_A: __m128, _B: __m128, _Imm8: ::std::os::raw::c_uint) -> __m128;
}
extern "C" {
    pub fn _mm_unpackhi_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_unpacklo_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_loadh_pi(arg1: __m128, arg2: *const __m64) -> __m128;
}
extern "C" {
    pub fn _mm_movehl_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_movelh_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_storeh_pi(arg1: *mut __m64, arg2: __m128);
}
extern "C" {
    pub fn _mm_loadl_pi(arg1: __m128, arg2: *const __m64) -> __m128;
}
extern "C" {
    pub fn _mm_storel_pi(arg1: *mut __m64, arg2: __m128);
}
extern "C" {
    pub fn _mm_movemask_ps(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_set_ss(_A: f32) -> __m128;
}
extern "C" {
    pub fn _mm_set_ps1(_A: f32) -> __m128;
}
extern "C" {
    pub fn _mm_set_ps(_A: f32, _B: f32, _C: f32, _D: f32) -> __m128;
}
extern "C" {
    pub fn _mm_setr_ps(_A: f32, _B: f32, _C: f32, _D: f32) -> __m128;
}
extern "C" {
    pub fn _mm_setzero_ps() -> __m128;
}
extern "C" {
    pub fn _mm_load_ss(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_load_ps1(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_load_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_loadr_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_loadu_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_store_ss(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_store_ps1(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_store_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_storer_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_storeu_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_prefetch(_A: *const ::std::os::raw::c_char, _Sel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _m_prefetchit0(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _m_prefetchit1(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_stream_ps(arg1: *mut f32, arg2: __m128);
}
extern "C" {
    pub fn _mm_move_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(arg1: ::std::os::raw::c_uint);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128i {
    pub m128i_i8: [::std::os::raw::c_char; 16usize],
    pub m128i_i16: [::std::os::raw::c_short; 8usize],
    pub m128i_i32: [::std::os::raw::c_int; 4usize],
    pub m128i_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128i_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128i_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128i_u32: [::std::os::raw::c_uint; 4usize],
    pub m128i_u64: [::std::os::raw::c_ulonglong; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128i"][::std::mem::size_of::<__m128i>() - 16usize];
    ["Alignment of __m128i"][::std::mem::align_of::<__m128i>() - 16usize];
    ["Offset of field: __m128i::m128i_i8"][::std::mem::offset_of!(__m128i, m128i_i8) - 0usize];
    ["Offset of field: __m128i::m128i_i16"][::std::mem::offset_of!(__m128i, m128i_i16) - 0usize];
    ["Offset of field: __m128i::m128i_i32"][::std::mem::offset_of!(__m128i, m128i_i32) - 0usize];
    ["Offset of field: __m128i::m128i_i64"][::std::mem::offset_of!(__m128i, m128i_i64) - 0usize];
    ["Offset of field: __m128i::m128i_u8"][::std::mem::offset_of!(__m128i, m128i_u8) - 0usize];
    ["Offset of field: __m128i::m128i_u16"][::std::mem::offset_of!(__m128i, m128i_u16) - 0usize];
    ["Offset of field: __m128i::m128i_u32"][::std::mem::offset_of!(__m128i, m128i_u32) - 0usize];
    ["Offset of field: __m128i::m128i_u64"][::std::mem::offset_of!(__m128i, m128i_u64) - 0usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __m128d {
    pub m128d_f64: [f64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128d"][::std::mem::size_of::<__m128d>() - 16usize];
    ["Alignment of __m128d"][::std::mem::align_of::<__m128d>() - 16usize];
    ["Offset of field: __m128d::m128d_f64"][::std::mem::offset_of!(__m128d, m128d_f64) - 0usize];
};
extern "C" {
    pub fn _mm_add_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_add_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_pd(_A: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_div_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_div_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_min_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_min_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_max_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_max_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_and_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_andnot_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_or_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_xor_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmplt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmplt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmple_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmple_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpgt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpgt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpge_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpge_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpneq_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpneq_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnlt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnlt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnle_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnle_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpngt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpngt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnge_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnge_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpord_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpord_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpunord_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpunord_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_comieq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comilt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comile_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comigt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comige_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comineq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomieq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomilt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomile_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomigt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomige_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomineq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtepi32_pd(_A: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtpd_epi32(_A: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epi32(_A: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi32_ps(_A: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_cvtps_epi32(_A: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttps_epi32(_A: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_ps(_A: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtps_pd(_A: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_ss(_A: __m128, _B: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_sd(_A: __m128d, _B: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_si32(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsd_si32(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtsi32_sd(_A: __m128d, _B: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_unpackhi_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_unpacklo_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_movemask_pd(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_shuffle_pd(_A: __m128d, _B: __m128d, _I: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_load_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_load1_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadr_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadu_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_load_sd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadh_pd(_A: __m128d, _Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadl_pd(_A: __m128d, _Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set_sd(_W: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set1_pd(_A: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set_pd(_Z: f64, _Y: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_setr_pd(_Y: f64, _Z: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_setzero_pd() -> __m128d;
}
extern "C" {
    pub fn _mm_move_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_store_sd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_store1_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_store_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storeu_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storer_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storeh_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storel_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_add_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_avg_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_avg_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_madd_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhi_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhi_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mul_epu32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sad_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_and_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_andnot_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_or_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_xor_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_si128(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi64(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi64(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_si128(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi64(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi64(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi32_si128(_A: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si32(_A: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_packs_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packs_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packus_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_extract_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_epi16(
        _A: __m128i,
        _B: ::std::os::raw::c_int,
        _Imm: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_movemask_epi8(_A: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_shuffle_epi32(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shufflehi_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shufflelo_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_load_si128(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_loadu_si128(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_loadl_epi64(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi64x(
        _I1: ::std::os::raw::c_longlong,
        _I0: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi32(
        _I3: ::std::os::raw::c_int,
        _I2: ::std::os::raw::c_int,
        _I1: ::std::os::raw::c_int,
        _I0: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi16(
        _W7: ::std::os::raw::c_short,
        _W6: ::std::os::raw::c_short,
        _W5: ::std::os::raw::c_short,
        _W4: ::std::os::raw::c_short,
        _W3: ::std::os::raw::c_short,
        _W2: ::std::os::raw::c_short,
        _W1: ::std::os::raw::c_short,
        _W0: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi8(
        _B15: ::std::os::raw::c_char,
        _B14: ::std::os::raw::c_char,
        _B13: ::std::os::raw::c_char,
        _B12: ::std::os::raw::c_char,
        _B11: ::std::os::raw::c_char,
        _B10: ::std::os::raw::c_char,
        _B9: ::std::os::raw::c_char,
        _B8: ::std::os::raw::c_char,
        _B7: ::std::os::raw::c_char,
        _B6: ::std::os::raw::c_char,
        _B5: ::std::os::raw::c_char,
        _B4: ::std::os::raw::c_char,
        _B3: ::std::os::raw::c_char,
        _B2: ::std::os::raw::c_char,
        _B1: ::std::os::raw::c_char,
        _B0: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi64x(i: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi32(_I: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi16(_W: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi8(_B: ::std::os::raw::c_char) -> __m128i;
}
extern "C" {
    pub fn _mm_setl_epi64(_Q: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi32(
        _I0: ::std::os::raw::c_int,
        _I1: ::std::os::raw::c_int,
        _I2: ::std::os::raw::c_int,
        _I3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi16(
        _W0: ::std::os::raw::c_short,
        _W1: ::std::os::raw::c_short,
        _W2: ::std::os::raw::c_short,
        _W3: ::std::os::raw::c_short,
        _W4: ::std::os::raw::c_short,
        _W5: ::std::os::raw::c_short,
        _W6: ::std::os::raw::c_short,
        _W7: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi8(
        _B15: ::std::os::raw::c_char,
        _B14: ::std::os::raw::c_char,
        _B13: ::std::os::raw::c_char,
        _B12: ::std::os::raw::c_char,
        _B11: ::std::os::raw::c_char,
        _B10: ::std::os::raw::c_char,
        _B9: ::std::os::raw::c_char,
        _B8: ::std::os::raw::c_char,
        _B7: ::std::os::raw::c_char,
        _B6: ::std::os::raw::c_char,
        _B5: ::std::os::raw::c_char,
        _B4: ::std::os::raw::c_char,
        _B3: ::std::os::raw::c_char,
        _B2: ::std::os::raw::c_char,
        _B1: ::std::os::raw::c_char,
        _B0: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setzero_si128() -> __m128i;
}
extern "C" {
    pub fn _mm_store_si128(_P: *mut __m128i, _B: __m128i);
}
extern "C" {
    pub fn _mm_storeu_si128(_P: *mut __m128i, _B: __m128i);
}
extern "C" {
    pub fn _mm_storel_epi64(_P: *mut __m128i, _Q: __m128i);
}
extern "C" {
    pub fn _mm_maskmoveu_si128(_D: __m128i, _N: __m128i, _P: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _mm_move_epi64(_Q: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_stream_si128(_P: *mut __m128i, _A: __m128i);
}
extern "C" {
    pub fn _mm_clflush(_P: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_stream_si32(_P: *mut ::std::os::raw::c_int, _I: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _mm_cvtsd_f64(_A: __m128d) -> f64;
}
extern "C" {
    pub fn _mm_castpd_ps(arg1: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_castpd_si128(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_castps_pd(arg1: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_castps_si128(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_castsi128_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_castsi128_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_si64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_si64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsi64_si128(arg1: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si64(arg1: __m128i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_addsub_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hadd_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hsub_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_movehdup_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_moveldup_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_addsub_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_hadd_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_hsub_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_loaddup_pd(arg1: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_movedup_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_lddqu_si128(arg1: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_monitor(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_mwait(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _mm_hadd_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hadd_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hadds_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsub_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsub_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddubs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhrs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shuffle_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_alignr_epi8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_blendv_epi8(arg1: __m128i, arg2: __m128i, mask: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_blendv_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_blend_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_blendv_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_dp_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_dp_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mul_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_testz_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_extract_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_epi8(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_epi32(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_epi64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_extract_epi8(arg1: __m128i, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_extract_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_extract_epi64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_minpos_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_round_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_round_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtepi8_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi8_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi32_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi8_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu16_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu32_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu16_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packus_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mpsadbw_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_load_si128(arg1: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpistrm(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpistri(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrm(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpestri(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrz(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrc(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrs(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistro(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistra(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrz(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrc(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrs(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestro(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestra(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpgt_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_popcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_popcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_crc32_u8(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u16(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_aesdec_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesdeclast_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesenc_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesenclast_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesimc_si128(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aeskeygenassist_si128(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_clmulepi64_si128(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union __m256 {
    pub m256_f32: [f32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m256"][::std::mem::size_of::<__m256>() - 32usize];
    ["Alignment of __m256"][::std::mem::align_of::<__m256>() - 32usize];
    ["Offset of field: __m256::m256_f32"][::std::mem::offset_of!(__m256, m256_f32) - 0usize];
};
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct __m256d {
    pub m256d_f64: [f64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m256d"][::std::mem::size_of::<__m256d>() - 32usize];
    ["Alignment of __m256d"][::std::mem::align_of::<__m256d>() - 32usize];
    ["Offset of field: __m256d::m256d_f64"][::std::mem::offset_of!(__m256d, m256d_f64) - 0usize];
};
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union __m256i {
    pub m256i_i8: [::std::os::raw::c_char; 32usize],
    pub m256i_i16: [::std::os::raw::c_short; 16usize],
    pub m256i_i32: [::std::os::raw::c_int; 8usize],
    pub m256i_i64: [::std::os::raw::c_longlong; 4usize],
    pub m256i_u8: [::std::os::raw::c_uchar; 32usize],
    pub m256i_u16: [::std::os::raw::c_ushort; 16usize],
    pub m256i_u32: [::std::os::raw::c_uint; 8usize],
    pub m256i_u64: [::std::os::raw::c_ulonglong; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m256i"][::std::mem::size_of::<__m256i>() - 32usize];
    ["Alignment of __m256i"][::std::mem::align_of::<__m256i>() - 32usize];
    ["Offset of field: __m256i::m256i_i8"][::std::mem::offset_of!(__m256i, m256i_i8) - 0usize];
    ["Offset of field: __m256i::m256i_i16"][::std::mem::offset_of!(__m256i, m256i_i16) - 0usize];
    ["Offset of field: __m256i::m256i_i32"][::std::mem::offset_of!(__m256i, m256i_i32) - 0usize];
    ["Offset of field: __m256i::m256i_i64"][::std::mem::offset_of!(__m256i, m256i_i64) - 0usize];
    ["Offset of field: __m256i::m256i_u8"][::std::mem::offset_of!(__m256i, m256i_u8) - 0usize];
    ["Offset of field: __m256i::m256i_u16"][::std::mem::offset_of!(__m256i, m256i_u16) - 0usize];
    ["Offset of field: __m256i::m256i_u32"][::std::mem::offset_of!(__m256i, m256i_u32) - 0usize];
    ["Offset of field: __m256i::m256i_u64"][::std::mem::offset_of!(__m256i, m256i_u64) - 0usize];
};
extern "C" {
    pub fn _mm256_add_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_add_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_addsub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_addsub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_and_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_and_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_andnot_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_andnot_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_blend_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_blend_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_blendv_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_blendv_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_div_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_div_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_dp_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_hadd_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_hadd_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_hsub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_hsub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_max_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_max_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_min_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_min_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_mul_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mul_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_or_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_or_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_shuffle_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_shuffle_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_sub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_sub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_xor_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_xor_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_cmp_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_cmp_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_cmp_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_cmp_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_cmp_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_comi_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmp_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_comi_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_cvtepi32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_cvtepi32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_cvtpd_ps(arg1: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtps_epi32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtps_pd(arg1: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm256_cvttpd_epi32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epi32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epi32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_extractf128_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_extractf128_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_extractf128_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_zeroall();
}
extern "C" {
    pub fn _mm256_zeroupper();
}
extern "C" {
    pub fn _mm256_permutevar_ps(arg1: __m256, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_permutevar_ps(arg1: __m128, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_permute_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_permute_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_permutevar_pd(arg1: __m256d, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_permutevar_pd(arg1: __m128d, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_permute_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_permute_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_permute2f128_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permute2f128_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2f128_si256(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_ss(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm_broadcast_ss(arg1: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm256_broadcast_sd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_broadcast_ps(arg1: *const __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_pd(arg1: *const __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_insertf128_ps(arg1: __m256, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_insertf128_pd(
        arg1: __m256d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_insertf128_si256(
        arg1: __m256i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_load_pd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_store_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_load_ps(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm256_store_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_loadu_pd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_storeu_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_loadu_ps(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm256_storeu_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_load_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_store_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_loadu_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_storeu_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_maskload_pd(arg1: *const f64, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskstore_pd(arg1: *mut f64, arg2: __m256i, arg3: __m256d);
}
extern "C" {
    pub fn _mm_maskload_pd(arg1: *const f64, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskstore_pd(arg1: *mut f64, arg2: __m128i, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_maskload_ps(arg1: *const f32, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskstore_ps(arg1: *mut f32, arg2: __m256i, arg3: __m256);
}
extern "C" {
    pub fn _mm_maskload_ps(arg1: *const f32, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskstore_ps(arg1: *mut f32, arg2: __m128i, arg3: __m128);
}
extern "C" {
    pub fn _mm256_movehdup_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_moveldup_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_movedup_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_lddqu_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_stream_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_stream_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_stream_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_rcp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_rsqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_sqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_round_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_round_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_unpackhi_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_unpackhi_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_unpacklo_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_unpacklo_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_testz_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testz_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testz_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testz_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testz_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_movemask_pd(arg1: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_movemask_ps(arg1: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_setzero_pd() -> __m256d;
}
extern "C" {
    pub fn _mm256_setzero_ps() -> __m256;
}
extern "C" {
    pub fn _mm256_setzero_si256() -> __m256i;
}
extern "C" {
    pub fn _mm256_set_pd(arg1: f64, arg2: f64, arg3: f64, arg4: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_set_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_set_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_pd(arg1: f64, arg2: f64, arg3: f64, arg4: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_setr_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_setr_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_pd(arg1: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_set1_ps(arg1: f32) -> __m256;
}
extern "C" {
    pub fn _mm256_set1_epi8(arg1: ::std::os::raw::c_char) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi16(arg1: ::std::os::raw::c_short) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi32(arg1: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi64x(arg1: ::std::os::raw::c_longlong) -> __m256i;
}
extern "C" {
    pub fn _mm256_castpd_ps(arg1: __m256d) -> __m256;
}
extern "C" {
    pub fn _mm256_castps_pd(arg1: __m256) -> __m256d;
}
extern "C" {
    pub fn _mm256_castps_si256(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_castpd_si256(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_castsi256_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_castsi256_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_castps256_ps128(arg1: __m256) -> __m128;
}
extern "C" {
    pub fn _mm256_castpd256_pd128(arg1: __m256d) -> __m128d;
}
extern "C" {
    pub fn _mm256_castsi256_si128(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_castps128_ps256(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_castpd128_pd256(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_castsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtph_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtph_ps(arg1: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm_cvtps_ph(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_ph(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _xgetbv(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _xsetbv(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsave(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsave64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaveopt(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaveopt64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsavec(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsavec64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstor(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstor64(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaves(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaves64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstors(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstors64(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _fxsave(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxsave64(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxrstor(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxrstor64(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _rdrand16_step(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdrand32_step(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdrand64_step(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _readfsbase_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _readgsbase_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _readfsbase_u64() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _readgsbase_u64() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _writefsbase_u32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _writegsbase_u32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _writefsbase_u64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _writegsbase_u64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_fmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fnmadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fnmadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fnmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fnmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_fmaddsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmaddsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsubadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsubadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmaddsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmaddsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fmsubadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmsubadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn __fmadd_ss(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn __fmadd_sd(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __fmsub_ss(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn __fmsub_sd(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __fnmadd_ss(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn __fnmadd_sd(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __fnmsub_ss(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn __fnmsub_sd(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn _mm256_cmpeq_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_and_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_andnot_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_or_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_xor_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi8(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi16(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_avg_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_avg_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadd_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadd_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadds_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsub_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsub_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsubs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_madd_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maddubs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhi_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhi_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mul_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mul_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhrs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sad_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mpsadbw_epu8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_sllv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sllv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_sra_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sra_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_srav_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_srl_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srl_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srl_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_srlv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srlv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_blend_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_alignr_epi8(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_blendv_epi8(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_blend_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_packs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packs_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packus_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packus_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_shufflehi_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_shufflelo_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_extracti128_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_inserti128_si256(
        arg1: __m256i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastss_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_broadcastsd_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_broadcastb_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastw_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastd_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastq_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastss_ps(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcastsd_pd(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_broadcastb_epi8(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastw_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastd_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastq_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu16_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu16_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu32_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_movemask_epi8(arg1: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_maskload_epi32(arg1: *const ::std::os::raw::c_int, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskload_epi64(arg1: *const ::std::os::raw::c_longlong, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskstore_epi32(arg1: *mut ::std::os::raw::c_int, arg2: __m128i, arg3: __m128i);
}
extern "C" {
    pub fn _mm_maskstore_epi64(arg1: *mut ::std::os::raw::c_longlong, arg2: __m128i, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_maskload_epi32(arg1: *const ::std::os::raw::c_int, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskload_epi64(arg1: *const ::std::os::raw::c_longlong, arg2: __m256i)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_maskstore_epi32(arg1: *mut ::std::os::raw::c_int, arg2: __m256i, arg3: __m256i);
}
extern "C" {
    pub fn _mm256_maskstore_epi64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: __m256i,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm256_permutevar8x32_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutevar8x32_ps(arg1: __m256, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_permute4x64_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_permute4x64_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2x128_si256(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_stream_load_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i32gather_pd(
        arg1: __m256d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_i32gather_ps(
        arg1: __m256,
        arg2: *const f32,
        arg3: __m256i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_i64gather_pd(
        arg1: __m256d,
        arg2: *const f64,
        arg3: __m256i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_i64gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m256i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_i32gather_pd(
        arg1: __m128d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_i32gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_i64gather_pd(
        arg1: __m128d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_i64gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_i32gather_epi32(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i32gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i64gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_i64gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_i32gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i32gather_epi64(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i64gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i64gather_epi64(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_i32gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_i32gather_ps(
        arg1: *const f32,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_i64gather_pd(
        arg1: *const f64,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_i64gather_ps(
        arg1: *const f32,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_i32gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_i32gather_ps(arg1: *const f32, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm_i64gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_i64gather_ps(arg1: *const f32, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm256_i32gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_i32gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_i64gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_i64gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_i32gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i32gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i64gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i64gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _bextr_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextr2_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsi_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsr_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bzhi_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mulx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _pdep_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _pext_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _rorx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _sarx_i32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _shlx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _shrx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextr_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bextr2_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsi_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsr_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bzhi_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mulx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _pdep_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _pext_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rorx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _sarx_i64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _shlx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _shrx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _lzcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lzcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _tzcnt_u16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _tzcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _tzcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _invpcid(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Store_HLERelease(arg1: *mut ::std::os::raw::c_long, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn _StorePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _InterlockedExchange_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchange_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangePointer_HLEAcquire(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedExchangePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchange_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_HLEAcquire(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedExchangeAdd_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangeAdd_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedbittestandset_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _Store64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn _InterlockedExchange64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedbittestandset64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _xbegin() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _xend();
}
extern "C" {
    pub fn _xabort(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _xtest() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _rdseed16_step(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdseed32_step(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdseed64_step(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _addcarryx_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarryx_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _load_be_u16(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _load_be_u32(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _load_be_u64(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _store_be_u16(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn _store_be_u32(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _store_be_u64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_sha1msg1_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1msg2_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1nexte_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1rnds4_epu32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256msg1_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256msg2_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256rnds2_epu32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _bnd_set_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_narrow_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_copy_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_init_ptr_bounds(arg1: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_store_ptr_bounds(
        arg1: *mut *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _bnd_chk_ptr_lbounds(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _bnd_chk_ptr_ubounds(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _bnd_chk_ptr_bounds(arg1: *const ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn _bnd_load_ptr_bounds(
        arg1: *mut *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_get_ptr_lbound(
        arg1: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_get_ptr_ubound(
        arg1: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn _mm256_insert_epi8(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi16(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi32(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi64(
        arg1: __m256i,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_extract_epi8(arg1: __m256i, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi16(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi32(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi64(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm256_zextpd128_pd256(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_zextps128_ps256(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_zextsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _rdpid_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _ptwrite32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _ptwrite64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_dpbusd_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusd_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbusds_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusds_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpwssd_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssd_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpwssds_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssds_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _pconfig_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _wbnoinvd();
}
extern "C" {
    pub fn _encls_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _enclu_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _enclv_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _div128(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _udiv64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _div64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_aesdec128kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdec256kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdecwide128kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdecwide256kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesenc128kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesenc256kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesencwide128kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesencwide256kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_encodekey128_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: __m128i,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_encodekey256_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: __m128i,
        arg3: __m128i,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_loadiwkey(arg1: ::std::os::raw::c_uint, arg2: __m128i, arg3: __m128i, arg4: __m128i);
}
extern "C" {
    pub fn _rdpkru_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _wrpkru(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _enqcmd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _enqcmds(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _incsspd(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _rdsspd() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _saveprevssp();
}
extern "C" {
    pub fn _rstorssp(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrssd(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrussd(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _setssbsy();
}
extern "C" {
    pub fn _clrssbsy(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _switchssp(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _incsspq(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _rdsspq() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wrssq(arg1: ::std::os::raw::c_ulonglong, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrussq(arg1: ::std::os::raw::c_ulonglong, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_div_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_div_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_divrem_epi32(arg1: *mut __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_divrem_epu32(arg1: *mut __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_divrem_epi32(arg1: *mut __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_divrem_epu32(arg1: *mut __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_sin_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sin_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sin_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sin_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cos_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cos_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cos_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cos_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sincos_ps(arg1: *mut __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sincos_pd(arg1: *mut __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sincos_ps(arg1: *mut __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sincos_pd(arg1: *mut __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tan_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tan_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tan_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tan_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_asin_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_asin_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_asin_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_asin_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_acos_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_acos_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_acos_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_acos_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atan_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atan_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atan_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atan_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atan2_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atan2_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atan2_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atan2_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sind_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sind_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sind_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sind_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cosd_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cosd_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cosd_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cosd_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tand_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tand_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tand_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tand_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sinh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sinh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sinh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sinh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cosh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cosh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cosh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cosh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tanh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tanh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tanh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tanh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_asinh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_asinh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_asinh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_asinh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_acosh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_acosh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_acosh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_acosh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atanh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atanh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atanh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atanh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log1p_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log1p_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log1p_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log1p_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log10_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log10_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log10_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log10_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log2_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log2_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log2_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log2_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_logb_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_logb_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_logb_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_logb_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp10_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp10_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp10_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp10_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp2_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp2_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp2_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp2_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_expm1_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_expm1_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_expm1_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_expm1_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_pow_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_pow_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_pow_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_pow_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_trunc_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_trunc_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_trunc_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_trunc_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_floor_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_floor_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_floor_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_floor_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_ceil_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_ceil_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_ceil_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_ceil_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_round_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_round_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_round_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_round_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_fmod_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmod_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmod_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmod_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_sqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_sqrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_sqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_sqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_invsqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_invsqrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_invsqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_invsqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cbrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cbrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cbrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cbrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_invcbrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_invcbrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_invcbrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_invcbrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_hypot_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hypot_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_hypot_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_hypot_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cdfnorm_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cdfnorm_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cdfnorm_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cdfnorm_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cdfnorminv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cdfnorminv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cdfnorminv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cdfnorminv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cexp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_cexp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_clog_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_clog_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_csqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_csqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_erf_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erf_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erf_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erf_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfc_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfc_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfc_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfc_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfcinv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfcinv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfcinv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfcinv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfinv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfinv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfinv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfinv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cldemote(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _directstoreu_u32(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _directstoreu_u64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _movdir64b(arg1: *mut ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _serialize();
}
extern "C" {
    pub fn _xsusldtrk();
}
extern "C" {
    pub fn _xresldtrk();
}
extern "C" {
    pub fn _umonitor(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _umwait(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _tpause(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _clui();
}
extern "C" {
    pub fn _stui();
}
extern "C" {
    pub fn _testui() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _senduipi(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _hreset(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _mm_svml_cvtepu32_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_svml_cvtepu32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_svml_cvtepu32_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepu32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_cvtepi64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepi64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_cvtepu64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepu64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _castf32_u32(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _castf64_u64(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _castu32_f32(arg1: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn _castu64_f64(arg1: ::std::os::raw::c_ulonglong) -> f64;
}
pub type __mmask8 = ::std::os::raw::c_uchar;
pub type __mmask16 = ::std::os::raw::c_ushort;
pub type __mmask32 = ::std::os::raw::c_uint;
pub type __mmask64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union __m512 {
    pub m512_f32: [f32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m512"][::std::mem::size_of::<__m512>() - 64usize];
    ["Alignment of __m512"][::std::mem::align_of::<__m512>() - 64usize];
    ["Offset of field: __m512::m512_f32"][::std::mem::offset_of!(__m512, m512_f32) - 0usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct __m512d {
    pub m512d_f64: [f64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m512d"][::std::mem::size_of::<__m512d>() - 64usize];
    ["Alignment of __m512d"][::std::mem::align_of::<__m512d>() - 64usize];
    ["Offset of field: __m512d::m512d_f64"][::std::mem::offset_of!(__m512d, m512d_f64) - 0usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union __m512i {
    pub m512i_i8: [::std::os::raw::c_char; 64usize],
    pub m512i_i16: [::std::os::raw::c_short; 32usize],
    pub m512i_i32: [::std::os::raw::c_int; 16usize],
    pub m512i_i64: [::std::os::raw::c_longlong; 8usize],
    pub m512i_u8: [::std::os::raw::c_uchar; 64usize],
    pub m512i_u16: [::std::os::raw::c_ushort; 32usize],
    pub m512i_u32: [::std::os::raw::c_uint; 16usize],
    pub m512i_u64: [::std::os::raw::c_ulonglong; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m512i"][::std::mem::size_of::<__m512i>() - 64usize];
    ["Alignment of __m512i"][::std::mem::align_of::<__m512i>() - 64usize];
    ["Offset of field: __m512i::m512i_i8"][::std::mem::offset_of!(__m512i, m512i_i8) - 0usize];
    ["Offset of field: __m512i::m512i_i16"][::std::mem::offset_of!(__m512i, m512i_i16) - 0usize];
    ["Offset of field: __m512i::m512i_i32"][::std::mem::offset_of!(__m512i, m512i_i32) - 0usize];
    ["Offset of field: __m512i::m512i_i64"][::std::mem::offset_of!(__m512i, m512i_i64) - 0usize];
    ["Offset of field: __m512i::m512i_u8"][::std::mem::offset_of!(__m512i, m512i_u8) - 0usize];
    ["Offset of field: __m512i::m512i_u16"][::std::mem::offset_of!(__m512i, m512i_u16) - 0usize];
    ["Offset of field: __m512i::m512i_u32"][::std::mem::offset_of!(__m512i, m512i_u32) - 0usize];
    ["Offset of field: __m512i::m512i_u64"][::std::mem::offset_of!(__m512i, m512i_u64) - 0usize];
};
extern "C" {
    pub fn _mm512_castps512_ps256(arg1: __m512) -> __m256;
}
extern "C" {
    pub fn _mm512_castpd_ps(arg1: __m512d) -> __m512;
}
extern "C" {
    pub fn _mm512_castps256_ps512(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_castsi512_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_castps128_ps512(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_castpd512_pd256(arg1: __m512d) -> __m256d;
}
extern "C" {
    pub fn _mm512_castpd256_pd512(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_castps_pd(arg1: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_castsi512_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_castpd128_pd512(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_castsi512_si256(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_castpd_si512(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_castps_si512(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_castsi256_si512(arg1: __m256i) -> __m512i;
}
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST32_NONE: _MM_BROADCAST32_ENUM = 0;
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST_1X16: _MM_BROADCAST32_ENUM = 1;
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST_4X16: _MM_BROADCAST32_ENUM = 2;
pub type _MM_BROADCAST32_ENUM = ::std::os::raw::c_int;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST64_NONE: _MM_BROADCAST64_ENUM = 0;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST_1X8: _MM_BROADCAST64_ENUM = 1;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST_4X8: _MM_BROADCAST64_ENUM = 2;
pub type _MM_BROADCAST64_ENUM = ::std::os::raw::c_int;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_NEAREST: _MM_ROUND_MODE_ENUM = 0;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_DOWN: _MM_ROUND_MODE_ENUM = 1;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_UP: _MM_ROUND_MODE_ENUM = 2;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_TOWARD_ZERO: _MM_ROUND_MODE_ENUM = 3;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_DEFAULT: _MM_ROUND_MODE_ENUM = 4;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_NO_EXC: _MM_ROUND_MODE_ENUM = 8;
pub type _MM_ROUND_MODE_ENUM = ::std::os::raw::c_int;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_NONE: _MM_EXP_ADJ_ENUM = 0;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_4: _MM_EXP_ADJ_ENUM = 1;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_5: _MM_EXP_ADJ_ENUM = 2;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_8: _MM_EXP_ADJ_ENUM = 3;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_16: _MM_EXP_ADJ_ENUM = 4;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_24: _MM_EXP_ADJ_ENUM = 5;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_31: _MM_EXP_ADJ_ENUM = 6;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_32: _MM_EXP_ADJ_ENUM = 7;
pub type _MM_EXP_ADJ_ENUM = ::std::os::raw::c_int;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_1: _MM_INDEX_SCALE_ENUM = 1;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_2: _MM_INDEX_SCALE_ENUM = 2;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_4: _MM_INDEX_SCALE_ENUM = 4;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_8: _MM_INDEX_SCALE_ENUM = 8;
pub type _MM_INDEX_SCALE_ENUM = ::std::os::raw::c_int;
pub const _MM_PERM_ENUM__MM_PERM_AAAA: _MM_PERM_ENUM = 0;
pub const _MM_PERM_ENUM__MM_PERM_AAAB: _MM_PERM_ENUM = 1;
pub const _MM_PERM_ENUM__MM_PERM_AAAC: _MM_PERM_ENUM = 2;
pub const _MM_PERM_ENUM__MM_PERM_AAAD: _MM_PERM_ENUM = 3;
pub const _MM_PERM_ENUM__MM_PERM_AABA: _MM_PERM_ENUM = 4;
pub const _MM_PERM_ENUM__MM_PERM_AABB: _MM_PERM_ENUM = 5;
pub const _MM_PERM_ENUM__MM_PERM_AABC: _MM_PERM_ENUM = 6;
pub const _MM_PERM_ENUM__MM_PERM_AABD: _MM_PERM_ENUM = 7;
pub const _MM_PERM_ENUM__MM_PERM_AACA: _MM_PERM_ENUM = 8;
pub const _MM_PERM_ENUM__MM_PERM_AACB: _MM_PERM_ENUM = 9;
pub const _MM_PERM_ENUM__MM_PERM_AACC: _MM_PERM_ENUM = 10;
pub const _MM_PERM_ENUM__MM_PERM_AACD: _MM_PERM_ENUM = 11;
pub const _MM_PERM_ENUM__MM_PERM_AADA: _MM_PERM_ENUM = 12;
pub const _MM_PERM_ENUM__MM_PERM_AADB: _MM_PERM_ENUM = 13;
pub const _MM_PERM_ENUM__MM_PERM_AADC: _MM_PERM_ENUM = 14;
pub const _MM_PERM_ENUM__MM_PERM_AADD: _MM_PERM_ENUM = 15;
pub const _MM_PERM_ENUM__MM_PERM_ABAA: _MM_PERM_ENUM = 16;
pub const _MM_PERM_ENUM__MM_PERM_ABAB: _MM_PERM_ENUM = 17;
pub const _MM_PERM_ENUM__MM_PERM_ABAC: _MM_PERM_ENUM = 18;
pub const _MM_PERM_ENUM__MM_PERM_ABAD: _MM_PERM_ENUM = 19;
pub const _MM_PERM_ENUM__MM_PERM_ABBA: _MM_PERM_ENUM = 20;
pub const _MM_PERM_ENUM__MM_PERM_ABBB: _MM_PERM_ENUM = 21;
pub const _MM_PERM_ENUM__MM_PERM_ABBC: _MM_PERM_ENUM = 22;
pub const _MM_PERM_ENUM__MM_PERM_ABBD: _MM_PERM_ENUM = 23;
pub const _MM_PERM_ENUM__MM_PERM_ABCA: _MM_PERM_ENUM = 24;
pub const _MM_PERM_ENUM__MM_PERM_ABCB: _MM_PERM_ENUM = 25;
pub const _MM_PERM_ENUM__MM_PERM_ABCC: _MM_PERM_ENUM = 26;
pub const _MM_PERM_ENUM__MM_PERM_ABCD: _MM_PERM_ENUM = 27;
pub const _MM_PERM_ENUM__MM_PERM_ABDA: _MM_PERM_ENUM = 28;
pub const _MM_PERM_ENUM__MM_PERM_ABDB: _MM_PERM_ENUM = 29;
pub const _MM_PERM_ENUM__MM_PERM_ABDC: _MM_PERM_ENUM = 30;
pub const _MM_PERM_ENUM__MM_PERM_ABDD: _MM_PERM_ENUM = 31;
pub const _MM_PERM_ENUM__MM_PERM_ACAA: _MM_PERM_ENUM = 32;
pub const _MM_PERM_ENUM__MM_PERM_ACAB: _MM_PERM_ENUM = 33;
pub const _MM_PERM_ENUM__MM_PERM_ACAC: _MM_PERM_ENUM = 34;
pub const _MM_PERM_ENUM__MM_PERM_ACAD: _MM_PERM_ENUM = 35;
pub const _MM_PERM_ENUM__MM_PERM_ACBA: _MM_PERM_ENUM = 36;
pub const _MM_PERM_ENUM__MM_PERM_ACBB: _MM_PERM_ENUM = 37;
pub const _MM_PERM_ENUM__MM_PERM_ACBC: _MM_PERM_ENUM = 38;
pub const _MM_PERM_ENUM__MM_PERM_ACBD: _MM_PERM_ENUM = 39;
pub const _MM_PERM_ENUM__MM_PERM_ACCA: _MM_PERM_ENUM = 40;
pub const _MM_PERM_ENUM__MM_PERM_ACCB: _MM_PERM_ENUM = 41;
pub const _MM_PERM_ENUM__MM_PERM_ACCC: _MM_PERM_ENUM = 42;
pub const _MM_PERM_ENUM__MM_PERM_ACCD: _MM_PERM_ENUM = 43;
pub const _MM_PERM_ENUM__MM_PERM_ACDA: _MM_PERM_ENUM = 44;
pub const _MM_PERM_ENUM__MM_PERM_ACDB: _MM_PERM_ENUM = 45;
pub const _MM_PERM_ENUM__MM_PERM_ACDC: _MM_PERM_ENUM = 46;
pub const _MM_PERM_ENUM__MM_PERM_ACDD: _MM_PERM_ENUM = 47;
pub const _MM_PERM_ENUM__MM_PERM_ADAA: _MM_PERM_ENUM = 48;
pub const _MM_PERM_ENUM__MM_PERM_ADAB: _MM_PERM_ENUM = 49;
pub const _MM_PERM_ENUM__MM_PERM_ADAC: _MM_PERM_ENUM = 50;
pub const _MM_PERM_ENUM__MM_PERM_ADAD: _MM_PERM_ENUM = 51;
pub const _MM_PERM_ENUM__MM_PERM_ADBA: _MM_PERM_ENUM = 52;
pub const _MM_PERM_ENUM__MM_PERM_ADBB: _MM_PERM_ENUM = 53;
pub const _MM_PERM_ENUM__MM_PERM_ADBC: _MM_PERM_ENUM = 54;
pub const _MM_PERM_ENUM__MM_PERM_ADBD: _MM_PERM_ENUM = 55;
pub const _MM_PERM_ENUM__MM_PERM_ADCA: _MM_PERM_ENUM = 56;
pub const _MM_PERM_ENUM__MM_PERM_ADCB: _MM_PERM_ENUM = 57;
pub const _MM_PERM_ENUM__MM_PERM_ADCC: _MM_PERM_ENUM = 58;
pub const _MM_PERM_ENUM__MM_PERM_ADCD: _MM_PERM_ENUM = 59;
pub const _MM_PERM_ENUM__MM_PERM_ADDA: _MM_PERM_ENUM = 60;
pub const _MM_PERM_ENUM__MM_PERM_ADDB: _MM_PERM_ENUM = 61;
pub const _MM_PERM_ENUM__MM_PERM_ADDC: _MM_PERM_ENUM = 62;
pub const _MM_PERM_ENUM__MM_PERM_ADDD: _MM_PERM_ENUM = 63;
pub const _MM_PERM_ENUM__MM_PERM_BAAA: _MM_PERM_ENUM = 64;
pub const _MM_PERM_ENUM__MM_PERM_BAAB: _MM_PERM_ENUM = 65;
pub const _MM_PERM_ENUM__MM_PERM_BAAC: _MM_PERM_ENUM = 66;
pub const _MM_PERM_ENUM__MM_PERM_BAAD: _MM_PERM_ENUM = 67;
pub const _MM_PERM_ENUM__MM_PERM_BABA: _MM_PERM_ENUM = 68;
pub const _MM_PERM_ENUM__MM_PERM_BABB: _MM_PERM_ENUM = 69;
pub const _MM_PERM_ENUM__MM_PERM_BABC: _MM_PERM_ENUM = 70;
pub const _MM_PERM_ENUM__MM_PERM_BABD: _MM_PERM_ENUM = 71;
pub const _MM_PERM_ENUM__MM_PERM_BACA: _MM_PERM_ENUM = 72;
pub const _MM_PERM_ENUM__MM_PERM_BACB: _MM_PERM_ENUM = 73;
pub const _MM_PERM_ENUM__MM_PERM_BACC: _MM_PERM_ENUM = 74;
pub const _MM_PERM_ENUM__MM_PERM_BACD: _MM_PERM_ENUM = 75;
pub const _MM_PERM_ENUM__MM_PERM_BADA: _MM_PERM_ENUM = 76;
pub const _MM_PERM_ENUM__MM_PERM_BADB: _MM_PERM_ENUM = 77;
pub const _MM_PERM_ENUM__MM_PERM_BADC: _MM_PERM_ENUM = 78;
pub const _MM_PERM_ENUM__MM_PERM_BADD: _MM_PERM_ENUM = 79;
pub const _MM_PERM_ENUM__MM_PERM_BBAA: _MM_PERM_ENUM = 80;
pub const _MM_PERM_ENUM__MM_PERM_BBAB: _MM_PERM_ENUM = 81;
pub const _MM_PERM_ENUM__MM_PERM_BBAC: _MM_PERM_ENUM = 82;
pub const _MM_PERM_ENUM__MM_PERM_BBAD: _MM_PERM_ENUM = 83;
pub const _MM_PERM_ENUM__MM_PERM_BBBA: _MM_PERM_ENUM = 84;
pub const _MM_PERM_ENUM__MM_PERM_BBBB: _MM_PERM_ENUM = 85;
pub const _MM_PERM_ENUM__MM_PERM_BBBC: _MM_PERM_ENUM = 86;
pub const _MM_PERM_ENUM__MM_PERM_BBBD: _MM_PERM_ENUM = 87;
pub const _MM_PERM_ENUM__MM_PERM_BBCA: _MM_PERM_ENUM = 88;
pub const _MM_PERM_ENUM__MM_PERM_BBCB: _MM_PERM_ENUM = 89;
pub const _MM_PERM_ENUM__MM_PERM_BBCC: _MM_PERM_ENUM = 90;
pub const _MM_PERM_ENUM__MM_PERM_BBCD: _MM_PERM_ENUM = 91;
pub const _MM_PERM_ENUM__MM_PERM_BBDA: _MM_PERM_ENUM = 92;
pub const _MM_PERM_ENUM__MM_PERM_BBDB: _MM_PERM_ENUM = 93;
pub const _MM_PERM_ENUM__MM_PERM_BBDC: _MM_PERM_ENUM = 94;
pub const _MM_PERM_ENUM__MM_PERM_BBDD: _MM_PERM_ENUM = 95;
pub const _MM_PERM_ENUM__MM_PERM_BCAA: _MM_PERM_ENUM = 96;
pub const _MM_PERM_ENUM__MM_PERM_BCAB: _MM_PERM_ENUM = 97;
pub const _MM_PERM_ENUM__MM_PERM_BCAC: _MM_PERM_ENUM = 98;
pub const _MM_PERM_ENUM__MM_PERM_BCAD: _MM_PERM_ENUM = 99;
pub const _MM_PERM_ENUM__MM_PERM_BCBA: _MM_PERM_ENUM = 100;
pub const _MM_PERM_ENUM__MM_PERM_BCBB: _MM_PERM_ENUM = 101;
pub const _MM_PERM_ENUM__MM_PERM_BCBC: _MM_PERM_ENUM = 102;
pub const _MM_PERM_ENUM__MM_PERM_BCBD: _MM_PERM_ENUM = 103;
pub const _MM_PERM_ENUM__MM_PERM_BCCA: _MM_PERM_ENUM = 104;
pub const _MM_PERM_ENUM__MM_PERM_BCCB: _MM_PERM_ENUM = 105;
pub const _MM_PERM_ENUM__MM_PERM_BCCC: _MM_PERM_ENUM = 106;
pub const _MM_PERM_ENUM__MM_PERM_BCCD: _MM_PERM_ENUM = 107;
pub const _MM_PERM_ENUM__MM_PERM_BCDA: _MM_PERM_ENUM = 108;
pub const _MM_PERM_ENUM__MM_PERM_BCDB: _MM_PERM_ENUM = 109;
pub const _MM_PERM_ENUM__MM_PERM_BCDC: _MM_PERM_ENUM = 110;
pub const _MM_PERM_ENUM__MM_PERM_BCDD: _MM_PERM_ENUM = 111;
pub const _MM_PERM_ENUM__MM_PERM_BDAA: _MM_PERM_ENUM = 112;
pub const _MM_PERM_ENUM__MM_PERM_BDAB: _MM_PERM_ENUM = 113;
pub const _MM_PERM_ENUM__MM_PERM_BDAC: _MM_PERM_ENUM = 114;
pub const _MM_PERM_ENUM__MM_PERM_BDAD: _MM_PERM_ENUM = 115;
pub const _MM_PERM_ENUM__MM_PERM_BDBA: _MM_PERM_ENUM = 116;
pub const _MM_PERM_ENUM__MM_PERM_BDBB: _MM_PERM_ENUM = 117;
pub const _MM_PERM_ENUM__MM_PERM_BDBC: _MM_PERM_ENUM = 118;
pub const _MM_PERM_ENUM__MM_PERM_BDBD: _MM_PERM_ENUM = 119;
pub const _MM_PERM_ENUM__MM_PERM_BDCA: _MM_PERM_ENUM = 120;
pub const _MM_PERM_ENUM__MM_PERM_BDCB: _MM_PERM_ENUM = 121;
pub const _MM_PERM_ENUM__MM_PERM_BDCC: _MM_PERM_ENUM = 122;
pub const _MM_PERM_ENUM__MM_PERM_BDCD: _MM_PERM_ENUM = 123;
pub const _MM_PERM_ENUM__MM_PERM_BDDA: _MM_PERM_ENUM = 124;
pub const _MM_PERM_ENUM__MM_PERM_BDDB: _MM_PERM_ENUM = 125;
pub const _MM_PERM_ENUM__MM_PERM_BDDC: _MM_PERM_ENUM = 126;
pub const _MM_PERM_ENUM__MM_PERM_BDDD: _MM_PERM_ENUM = 127;
pub const _MM_PERM_ENUM__MM_PERM_CAAA: _MM_PERM_ENUM = 128;
pub const _MM_PERM_ENUM__MM_PERM_CAAB: _MM_PERM_ENUM = 129;
pub const _MM_PERM_ENUM__MM_PERM_CAAC: _MM_PERM_ENUM = 130;
pub const _MM_PERM_ENUM__MM_PERM_CAAD: _MM_PERM_ENUM = 131;
pub const _MM_PERM_ENUM__MM_PERM_CABA: _MM_PERM_ENUM = 132;
pub const _MM_PERM_ENUM__MM_PERM_CABB: _MM_PERM_ENUM = 133;
pub const _MM_PERM_ENUM__MM_PERM_CABC: _MM_PERM_ENUM = 134;
pub const _MM_PERM_ENUM__MM_PERM_CABD: _MM_PERM_ENUM = 135;
pub const _MM_PERM_ENUM__MM_PERM_CACA: _MM_PERM_ENUM = 136;
pub const _MM_PERM_ENUM__MM_PERM_CACB: _MM_PERM_ENUM = 137;
pub const _MM_PERM_ENUM__MM_PERM_CACC: _MM_PERM_ENUM = 138;
pub const _MM_PERM_ENUM__MM_PERM_CACD: _MM_PERM_ENUM = 139;
pub const _MM_PERM_ENUM__MM_PERM_CADA: _MM_PERM_ENUM = 140;
pub const _MM_PERM_ENUM__MM_PERM_CADB: _MM_PERM_ENUM = 141;
pub const _MM_PERM_ENUM__MM_PERM_CADC: _MM_PERM_ENUM = 142;
pub const _MM_PERM_ENUM__MM_PERM_CADD: _MM_PERM_ENUM = 143;
pub const _MM_PERM_ENUM__MM_PERM_CBAA: _MM_PERM_ENUM = 144;
pub const _MM_PERM_ENUM__MM_PERM_CBAB: _MM_PERM_ENUM = 145;
pub const _MM_PERM_ENUM__MM_PERM_CBAC: _MM_PERM_ENUM = 146;
pub const _MM_PERM_ENUM__MM_PERM_CBAD: _MM_PERM_ENUM = 147;
pub const _MM_PERM_ENUM__MM_PERM_CBBA: _MM_PERM_ENUM = 148;
pub const _MM_PERM_ENUM__MM_PERM_CBBB: _MM_PERM_ENUM = 149;
pub const _MM_PERM_ENUM__MM_PERM_CBBC: _MM_PERM_ENUM = 150;
pub const _MM_PERM_ENUM__MM_PERM_CBBD: _MM_PERM_ENUM = 151;
pub const _MM_PERM_ENUM__MM_PERM_CBCA: _MM_PERM_ENUM = 152;
pub const _MM_PERM_ENUM__MM_PERM_CBCB: _MM_PERM_ENUM = 153;
pub const _MM_PERM_ENUM__MM_PERM_CBCC: _MM_PERM_ENUM = 154;
pub const _MM_PERM_ENUM__MM_PERM_CBCD: _MM_PERM_ENUM = 155;
pub const _MM_PERM_ENUM__MM_PERM_CBDA: _MM_PERM_ENUM = 156;
pub const _MM_PERM_ENUM__MM_PERM_CBDB: _MM_PERM_ENUM = 157;
pub const _MM_PERM_ENUM__MM_PERM_CBDC: _MM_PERM_ENUM = 158;
pub const _MM_PERM_ENUM__MM_PERM_CBDD: _MM_PERM_ENUM = 159;
pub const _MM_PERM_ENUM__MM_PERM_CCAA: _MM_PERM_ENUM = 160;
pub const _MM_PERM_ENUM__MM_PERM_CCAB: _MM_PERM_ENUM = 161;
pub const _MM_PERM_ENUM__MM_PERM_CCAC: _MM_PERM_ENUM = 162;
pub const _MM_PERM_ENUM__MM_PERM_CCAD: _MM_PERM_ENUM = 163;
pub const _MM_PERM_ENUM__MM_PERM_CCBA: _MM_PERM_ENUM = 164;
pub const _MM_PERM_ENUM__MM_PERM_CCBB: _MM_PERM_ENUM = 165;
pub const _MM_PERM_ENUM__MM_PERM_CCBC: _MM_PERM_ENUM = 166;
pub const _MM_PERM_ENUM__MM_PERM_CCBD: _MM_PERM_ENUM = 167;
pub const _MM_PERM_ENUM__MM_PERM_CCCA: _MM_PERM_ENUM = 168;
pub const _MM_PERM_ENUM__MM_PERM_CCCB: _MM_PERM_ENUM = 169;
pub const _MM_PERM_ENUM__MM_PERM_CCCC: _MM_PERM_ENUM = 170;
pub const _MM_PERM_ENUM__MM_PERM_CCCD: _MM_PERM_ENUM = 171;
pub const _MM_PERM_ENUM__MM_PERM_CCDA: _MM_PERM_ENUM = 172;
pub const _MM_PERM_ENUM__MM_PERM_CCDB: _MM_PERM_ENUM = 173;
pub const _MM_PERM_ENUM__MM_PERM_CCDC: _MM_PERM_ENUM = 174;
pub const _MM_PERM_ENUM__MM_PERM_CCDD: _MM_PERM_ENUM = 175;
pub const _MM_PERM_ENUM__MM_PERM_CDAA: _MM_PERM_ENUM = 176;
pub const _MM_PERM_ENUM__MM_PERM_CDAB: _MM_PERM_ENUM = 177;
pub const _MM_PERM_ENUM__MM_PERM_CDAC: _MM_PERM_ENUM = 178;
pub const _MM_PERM_ENUM__MM_PERM_CDAD: _MM_PERM_ENUM = 179;
pub const _MM_PERM_ENUM__MM_PERM_CDBA: _MM_PERM_ENUM = 180;
pub const _MM_PERM_ENUM__MM_PERM_CDBB: _MM_PERM_ENUM = 181;
pub const _MM_PERM_ENUM__MM_PERM_CDBC: _MM_PERM_ENUM = 182;
pub const _MM_PERM_ENUM__MM_PERM_CDBD: _MM_PERM_ENUM = 183;
pub const _MM_PERM_ENUM__MM_PERM_CDCA: _MM_PERM_ENUM = 184;
pub const _MM_PERM_ENUM__MM_PERM_CDCB: _MM_PERM_ENUM = 185;
pub const _MM_PERM_ENUM__MM_PERM_CDCC: _MM_PERM_ENUM = 186;
pub const _MM_PERM_ENUM__MM_PERM_CDCD: _MM_PERM_ENUM = 187;
pub const _MM_PERM_ENUM__MM_PERM_CDDA: _MM_PERM_ENUM = 188;
pub const _MM_PERM_ENUM__MM_PERM_CDDB: _MM_PERM_ENUM = 189;
pub const _MM_PERM_ENUM__MM_PERM_CDDC: _MM_PERM_ENUM = 190;
pub const _MM_PERM_ENUM__MM_PERM_CDDD: _MM_PERM_ENUM = 191;
pub const _MM_PERM_ENUM__MM_PERM_DAAA: _MM_PERM_ENUM = 192;
pub const _MM_PERM_ENUM__MM_PERM_DAAB: _MM_PERM_ENUM = 193;
pub const _MM_PERM_ENUM__MM_PERM_DAAC: _MM_PERM_ENUM = 194;
pub const _MM_PERM_ENUM__MM_PERM_DAAD: _MM_PERM_ENUM = 195;
pub const _MM_PERM_ENUM__MM_PERM_DABA: _MM_PERM_ENUM = 196;
pub const _MM_PERM_ENUM__MM_PERM_DABB: _MM_PERM_ENUM = 197;
pub const _MM_PERM_ENUM__MM_PERM_DABC: _MM_PERM_ENUM = 198;
pub const _MM_PERM_ENUM__MM_PERM_DABD: _MM_PERM_ENUM = 199;
pub const _MM_PERM_ENUM__MM_PERM_DACA: _MM_PERM_ENUM = 200;
pub const _MM_PERM_ENUM__MM_PERM_DACB: _MM_PERM_ENUM = 201;
pub const _MM_PERM_ENUM__MM_PERM_DACC: _MM_PERM_ENUM = 202;
pub const _MM_PERM_ENUM__MM_PERM_DACD: _MM_PERM_ENUM = 203;
pub const _MM_PERM_ENUM__MM_PERM_DADA: _MM_PERM_ENUM = 204;
pub const _MM_PERM_ENUM__MM_PERM_DADB: _MM_PERM_ENUM = 205;
pub const _MM_PERM_ENUM__MM_PERM_DADC: _MM_PERM_ENUM = 206;
pub const _MM_PERM_ENUM__MM_PERM_DADD: _MM_PERM_ENUM = 207;
pub const _MM_PERM_ENUM__MM_PERM_DBAA: _MM_PERM_ENUM = 208;
pub const _MM_PERM_ENUM__MM_PERM_DBAB: _MM_PERM_ENUM = 209;
pub const _MM_PERM_ENUM__MM_PERM_DBAC: _MM_PERM_ENUM = 210;
pub const _MM_PERM_ENUM__MM_PERM_DBAD: _MM_PERM_ENUM = 211;
pub const _MM_PERM_ENUM__MM_PERM_DBBA: _MM_PERM_ENUM = 212;
pub const _MM_PERM_ENUM__MM_PERM_DBBB: _MM_PERM_ENUM = 213;
pub const _MM_PERM_ENUM__MM_PERM_DBBC: _MM_PERM_ENUM = 214;
pub const _MM_PERM_ENUM__MM_PERM_DBBD: _MM_PERM_ENUM = 215;
pub const _MM_PERM_ENUM__MM_PERM_DBCA: _MM_PERM_ENUM = 216;
pub const _MM_PERM_ENUM__MM_PERM_DBCB: _MM_PERM_ENUM = 217;
pub const _MM_PERM_ENUM__MM_PERM_DBCC: _MM_PERM_ENUM = 218;
pub const _MM_PERM_ENUM__MM_PERM_DBCD: _MM_PERM_ENUM = 219;
pub const _MM_PERM_ENUM__MM_PERM_DBDA: _MM_PERM_ENUM = 220;
pub const _MM_PERM_ENUM__MM_PERM_DBDB: _MM_PERM_ENUM = 221;
pub const _MM_PERM_ENUM__MM_PERM_DBDC: _MM_PERM_ENUM = 222;
pub const _MM_PERM_ENUM__MM_PERM_DBDD: _MM_PERM_ENUM = 223;
pub const _MM_PERM_ENUM__MM_PERM_DCAA: _MM_PERM_ENUM = 224;
pub const _MM_PERM_ENUM__MM_PERM_DCAB: _MM_PERM_ENUM = 225;
pub const _MM_PERM_ENUM__MM_PERM_DCAC: _MM_PERM_ENUM = 226;
pub const _MM_PERM_ENUM__MM_PERM_DCAD: _MM_PERM_ENUM = 227;
pub const _MM_PERM_ENUM__MM_PERM_DCBA: _MM_PERM_ENUM = 228;
pub const _MM_PERM_ENUM__MM_PERM_DCBB: _MM_PERM_ENUM = 229;
pub const _MM_PERM_ENUM__MM_PERM_DCBC: _MM_PERM_ENUM = 230;
pub const _MM_PERM_ENUM__MM_PERM_DCBD: _MM_PERM_ENUM = 231;
pub const _MM_PERM_ENUM__MM_PERM_DCCA: _MM_PERM_ENUM = 232;
pub const _MM_PERM_ENUM__MM_PERM_DCCB: _MM_PERM_ENUM = 233;
pub const _MM_PERM_ENUM__MM_PERM_DCCC: _MM_PERM_ENUM = 234;
pub const _MM_PERM_ENUM__MM_PERM_DCCD: _MM_PERM_ENUM = 235;
pub const _MM_PERM_ENUM__MM_PERM_DCDA: _MM_PERM_ENUM = 236;
pub const _MM_PERM_ENUM__MM_PERM_DCDB: _MM_PERM_ENUM = 237;
pub const _MM_PERM_ENUM__MM_PERM_DCDC: _MM_PERM_ENUM = 238;
pub const _MM_PERM_ENUM__MM_PERM_DCDD: _MM_PERM_ENUM = 239;
pub const _MM_PERM_ENUM__MM_PERM_DDAA: _MM_PERM_ENUM = 240;
pub const _MM_PERM_ENUM__MM_PERM_DDAB: _MM_PERM_ENUM = 241;
pub const _MM_PERM_ENUM__MM_PERM_DDAC: _MM_PERM_ENUM = 242;
pub const _MM_PERM_ENUM__MM_PERM_DDAD: _MM_PERM_ENUM = 243;
pub const _MM_PERM_ENUM__MM_PERM_DDBA: _MM_PERM_ENUM = 244;
pub const _MM_PERM_ENUM__MM_PERM_DDBB: _MM_PERM_ENUM = 245;
pub const _MM_PERM_ENUM__MM_PERM_DDBC: _MM_PERM_ENUM = 246;
pub const _MM_PERM_ENUM__MM_PERM_DDBD: _MM_PERM_ENUM = 247;
pub const _MM_PERM_ENUM__MM_PERM_DDCA: _MM_PERM_ENUM = 248;
pub const _MM_PERM_ENUM__MM_PERM_DDCB: _MM_PERM_ENUM = 249;
pub const _MM_PERM_ENUM__MM_PERM_DDCC: _MM_PERM_ENUM = 250;
pub const _MM_PERM_ENUM__MM_PERM_DDCD: _MM_PERM_ENUM = 251;
pub const _MM_PERM_ENUM__MM_PERM_DDDA: _MM_PERM_ENUM = 252;
pub const _MM_PERM_ENUM__MM_PERM_DDDB: _MM_PERM_ENUM = 253;
pub const _MM_PERM_ENUM__MM_PERM_DDDC: _MM_PERM_ENUM = 254;
pub const _MM_PERM_ENUM__MM_PERM_DDDD: _MM_PERM_ENUM = 255;
pub type _MM_PERM_ENUM = ::std::os::raw::c_int;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NO_CHANGE: _MM_FIXUPRESULT_ENUM = 0;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NEG_INF: _MM_FIXUPRESULT_ENUM = 1;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NEG_ZERO: _MM_FIXUPRESULT_ENUM = 2;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_POS_ZERO: _MM_FIXUPRESULT_ENUM = 3;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_POS_INF: _MM_FIXUPRESULT_ENUM = 4;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NAN: _MM_FIXUPRESULT_ENUM = 5;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_MAX_FLOAT: _MM_FIXUPRESULT_ENUM = 6;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_MIN_FLOAT: _MM_FIXUPRESULT_ENUM = 7;
pub type _MM_FIXUPRESULT_ENUM = ::std::os::raw::c_int;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2: _MM_MANTISSA_NORM_ENUM = 0;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2: _MM_MANTISSA_NORM_ENUM = 1;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1: _MM_MANTISSA_NORM_ENUM = 2;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5: _MM_MANTISSA_NORM_ENUM = 3;
pub type _MM_MANTISSA_NORM_ENUM = ::std::os::raw::c_int;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src: _MM_MANTISSA_SIGN_ENUM = 0;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero: _MM_MANTISSA_SIGN_ENUM = 1;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan: _MM_MANTISSA_SIGN_ENUM = 2;
pub type _MM_MANTISSA_SIGN_ENUM = ::std::os::raw::c_int;
pub const _MM_CMPINT_ENUM__MM_CMPINT_EQ: _MM_CMPINT_ENUM = 0;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LT: _MM_CMPINT_ENUM = 1;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LE: _MM_CMPINT_ENUM = 2;
pub const _MM_CMPINT_ENUM__MM_CMPINT_UNUSED: _MM_CMPINT_ENUM = 3;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NE: _MM_CMPINT_ENUM = 4;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLT: _MM_CMPINT_ENUM = 5;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLE: _MM_CMPINT_ENUM = 6;
pub type _MM_CMPINT_ENUM = ::std::os::raw::c_int;
extern "C" {
    pub fn _mm512_setzero_ps() -> __m512;
}
extern "C" {
    pub fn _mm512_setzero_pd() -> __m512d;
}
extern "C" {
    pub fn _mm512_set_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
        arg9: f32,
        arg10: f32,
        arg11: f32,
        arg12: f32,
        arg13: f32,
        arg14: f32,
        arg15: f32,
        arg16: f32,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_set_pd(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_setr_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
        arg9: f32,
        arg10: f32,
        arg11: f32,
        arg12: f32,
        arg13: f32,
        arg14: f32,
        arg15: f32,
        arg16: f32,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_setr_pd(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_set1_ps(arg1: f32) -> __m512;
}
extern "C" {
    pub fn _mm512_set1_pd(arg1: f64) -> __m512d;
}
extern "C" {
    pub fn _mm512_load_ps(arg1: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_load_pd(arg1: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_load_ps(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_load_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_load_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_loadu_ps(arg1: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_loadu_pd(arg1: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_loadu_ps(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_loadu_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_loadu_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m512);
}
extern "C" {
    pub fn _mm512_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m512d);
}
extern "C" {
    pub fn _mm512_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m512);
}
extern "C" {
    pub fn _mm512_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m512d);
}
extern "C" {
    pub fn _mm512_add_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_add_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_add_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_add_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_add_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_add_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_add_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_add_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_add_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_add_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_add_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_add_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sub_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sub_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sub_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sub_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_sub_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sub_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mul_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mul_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mul_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mul_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mul_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mul_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mul_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mul_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mul_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mul_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_div_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_div_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_div_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_div_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_div_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_div_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_div_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_div_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_div_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_div_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_div_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_div_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmaddsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmaddsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsubadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsubadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sqrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sqrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sqrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sqrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sqrt_round_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_sqrt_round_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_abs_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_abs_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_abs_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_abs_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_abs_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_abs_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_max_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_max_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_max_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_max_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_max_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_max_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_max_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_max_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_max_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_max_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_max_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_max_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_min_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_min_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_min_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_min_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_min_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_min_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_min_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_min_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_min_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_min_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_min_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_min_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_rcp14_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rcp14_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rcp14_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rcp14_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rcp14_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rcp14_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_rsqrt14_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rsqrt14_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt14_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rsqrt14_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rsqrt14_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtps_pd(arg1: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtpd_ps(arg1: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_pd(arg1: __mmask8, arg2: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtps_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_ps(arg1: __m256, arg2: __mmask8, arg3: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundps_pd(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_ps(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_pd(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_ps(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cmp_ps_mask(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_round_ps_mask(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_pd_mask(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmp_round_pd_mask(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_broadcast_f32x2(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x2(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x2(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f32x4(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x4(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x4(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f32x8(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x8(arg1: __m512, arg2: __mmask16, arg3: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x8(arg1: __mmask16, arg2: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f64x2(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f64x2(arg1: __m512d, arg2: __mmask8, arg3: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f64x2(arg1: __mmask8, arg2: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcast_f64x4(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f64x4(arg1: __m512d, arg2: __mmask8, arg3: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f64x4(arg1: __mmask8, arg2: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcastsd_pd(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcastsd_pd(arg1: __m512d, arg2: __mmask8, arg3: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcastsd_pd(arg1: __mmask8, arg2: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcastss_ps(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcastss_ps(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcastss_ps(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_extractf32x4_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm512_mask_extractf32x4_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_maskz_extractf32x4_ps(
        arg1: __mmask8,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_extractf32x8_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_extractf32x8_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_extractf32x8_ps(
        arg1: __mmask8,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_extractf64x2_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm512_mask_extractf64x2_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm512_maskz_extractf64x2_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm512_extractf64x4_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm512_mask_extractf64x4_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm512_maskz_extractf64x4_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm512_insertf32x4(arg1: __m512, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_insertf32x4(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_insertf32x4(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_insertf32x8(arg1: __m512, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_insertf32x8(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_insertf32x8(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_insertf64x2(arg1: __m512d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_insertf64x2(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_insertf64x2(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_insertf64x4(arg1: __m512d, arg2: __m256d, arg3: ::std::os::raw::c_int)
        -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_insertf64x4(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_insertf64x4(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_f32x4(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_shuffle_f32x4(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_f32x4(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_shuffle_f64x2(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_shuffle_f64x2(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_f64x2(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_pd(arg1: __m512d, arg2: __m512d, arg3: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_shuffle_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_shuffle_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cmpeq_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpnle_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpnlt_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpord_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpunord_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpnle_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpnlt_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpord_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpunord_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpnle_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpnlt_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpord_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpunord_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpnle_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpnlt_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpord_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpunord_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_setzero_si512() -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
        arg33: ::std::os::raw::c_char,
        arg34: ::std::os::raw::c_char,
        arg35: ::std::os::raw::c_char,
        arg36: ::std::os::raw::c_char,
        arg37: ::std::os::raw::c_char,
        arg38: ::std::os::raw::c_char,
        arg39: ::std::os::raw::c_char,
        arg40: ::std::os::raw::c_char,
        arg41: ::std::os::raw::c_char,
        arg42: ::std::os::raw::c_char,
        arg43: ::std::os::raw::c_char,
        arg44: ::std::os::raw::c_char,
        arg45: ::std::os::raw::c_char,
        arg46: ::std::os::raw::c_char,
        arg47: ::std::os::raw::c_char,
        arg48: ::std::os::raw::c_char,
        arg49: ::std::os::raw::c_char,
        arg50: ::std::os::raw::c_char,
        arg51: ::std::os::raw::c_char,
        arg52: ::std::os::raw::c_char,
        arg53: ::std::os::raw::c_char,
        arg54: ::std::os::raw::c_char,
        arg55: ::std::os::raw::c_char,
        arg56: ::std::os::raw::c_char,
        arg57: ::std::os::raw::c_char,
        arg58: ::std::os::raw::c_char,
        arg59: ::std::os::raw::c_char,
        arg60: ::std::os::raw::c_char,
        arg61: ::std::os::raw::c_char,
        arg62: ::std::os::raw::c_char,
        arg63: ::std::os::raw::c_char,
        arg64: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
        arg17: ::std::os::raw::c_short,
        arg18: ::std::os::raw::c_short,
        arg19: ::std::os::raw::c_short,
        arg20: ::std::os::raw::c_short,
        arg21: ::std::os::raw::c_short,
        arg22: ::std::os::raw::c_short,
        arg23: ::std::os::raw::c_short,
        arg24: ::std::os::raw::c_short,
        arg25: ::std::os::raw::c_short,
        arg26: ::std::os::raw::c_short,
        arg27: ::std::os::raw::c_short,
        arg28: ::std::os::raw::c_short,
        arg29: ::std::os::raw::c_short,
        arg30: ::std::os::raw::c_short,
        arg31: ::std::os::raw::c_short,
        arg32: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
        arg12: ::std::os::raw::c_int,
        arg13: ::std::os::raw::c_int,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_int,
        arg16: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
        arg5: ::std::os::raw::c_longlong,
        arg6: ::std::os::raw::c_longlong,
        arg7: ::std::os::raw::c_longlong,
        arg8: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
        arg33: ::std::os::raw::c_char,
        arg34: ::std::os::raw::c_char,
        arg35: ::std::os::raw::c_char,
        arg36: ::std::os::raw::c_char,
        arg37: ::std::os::raw::c_char,
        arg38: ::std::os::raw::c_char,
        arg39: ::std::os::raw::c_char,
        arg40: ::std::os::raw::c_char,
        arg41: ::std::os::raw::c_char,
        arg42: ::std::os::raw::c_char,
        arg43: ::std::os::raw::c_char,
        arg44: ::std::os::raw::c_char,
        arg45: ::std::os::raw::c_char,
        arg46: ::std::os::raw::c_char,
        arg47: ::std::os::raw::c_char,
        arg48: ::std::os::raw::c_char,
        arg49: ::std::os::raw::c_char,
        arg50: ::std::os::raw::c_char,
        arg51: ::std::os::raw::c_char,
        arg52: ::std::os::raw::c_char,
        arg53: ::std::os::raw::c_char,
        arg54: ::std::os::raw::c_char,
        arg55: ::std::os::raw::c_char,
        arg56: ::std::os::raw::c_char,
        arg57: ::std::os::raw::c_char,
        arg58: ::std::os::raw::c_char,
        arg59: ::std::os::raw::c_char,
        arg60: ::std::os::raw::c_char,
        arg61: ::std::os::raw::c_char,
        arg62: ::std::os::raw::c_char,
        arg63: ::std::os::raw::c_char,
        arg64: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
        arg17: ::std::os::raw::c_short,
        arg18: ::std::os::raw::c_short,
        arg19: ::std::os::raw::c_short,
        arg20: ::std::os::raw::c_short,
        arg21: ::std::os::raw::c_short,
        arg22: ::std::os::raw::c_short,
        arg23: ::std::os::raw::c_short,
        arg24: ::std::os::raw::c_short,
        arg25: ::std::os::raw::c_short,
        arg26: ::std::os::raw::c_short,
        arg27: ::std::os::raw::c_short,
        arg28: ::std::os::raw::c_short,
        arg29: ::std::os::raw::c_short,
        arg30: ::std::os::raw::c_short,
        arg31: ::std::os::raw::c_short,
        arg32: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
        arg12: ::std::os::raw::c_int,
        arg13: ::std::os::raw::c_int,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_int,
        arg16: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
        arg5: ::std::os::raw::c_longlong,
        arg6: ::std::os::raw::c_longlong,
        arg7: ::std::os::raw::c_longlong,
        arg8: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi8(arg1: ::std::os::raw::c_char) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi8(arg1: __mmask64, arg2: ::std::os::raw::c_char) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi16(arg1: ::std::os::raw::c_short) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi16(arg1: __mmask32, arg2: ::std::os::raw::c_short) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi32(arg1: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi32(arg1: __mmask16, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi64(arg1: ::std::os::raw::c_longlong) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi8(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi16(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x2(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x2(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x2(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x4(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x4(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x4(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x8(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x8(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x8(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i64x2(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i64x2(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i64x2(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i64x4(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i64x4(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i64x4(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastb_epi8(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastb_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastb_epi8(arg1: __mmask64, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastw_epi16(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastw_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastw_epi16(arg1: __mmask32, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastd_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastd_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastd_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastq_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastq_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastmw_epi32(arg1: __mmask16) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastmb_epi64(arg1: __mmask8) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mul_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mul_epi32(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mul_epi32(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mul_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mul_epu32(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mul_epu32(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhi_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhi_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhi_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhi_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhi_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullox_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullox_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhrs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhrs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhrs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_load_epi32(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_load_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_load_epi32(arg1: __mmask16, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_load_epi64(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_load_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi8(arg1: __mmask64, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi16(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi32(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_store_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_store_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_store_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_store_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask64,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_extracti32x4_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_extracti32x4_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_extracti32x4_epi32(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_extracti32x8_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_extracti32x8_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_extracti32x8_epi32(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_extracti64x2_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_extracti64x2_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_extracti64x2_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_extracti64x4_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_extracti64x4_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_extracti64x4_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_inserti32x4(arg1: __m512i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti32x4(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti32x4(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti32x8(arg1: __m512i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti32x8(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti32x8(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti64x2(arg1: __m512i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti64x2(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti64x2(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti64x4(arg1: __m512i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti64x4(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti64x4(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_i32x4(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_i32x4(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_i32x4(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_i64x2(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_i64x2(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_i64x2(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shufflehi_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shufflehi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shufflehi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shufflelo_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shufflelo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shufflelo_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mov_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mov_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mov_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mov_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_movedup_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_movedup_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_movedup_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_movehdup_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_movehdup_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_movehdup_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_moveldup_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_moveldup_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_moveldup_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_movm_epi8(arg1: __mmask64) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi16(arg1: __mmask32) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi32(arg1: __mmask16) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi64(arg1: __mmask8) -> __m512i;
}
extern "C" {
    pub fn _mm512_movepi8_mask(arg1: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_movepi16_mask(arg1: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_movepi32_mask(arg1: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_movepi64_mask(arg1: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_alignr_epi8(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_alignr_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_alignr_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_and_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_and_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_and_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_and_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_and_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_and_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_and_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_and_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_and_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_and_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_and_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_and_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_andnot_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_andnot_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_andnot_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_andnot_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_andnot_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_andnot_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_andnot_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_andnot_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_andnot_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_andnot_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_andnot_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_andnot_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_or_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_or_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_or_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_or_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_or_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_or_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_or_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_or_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_or_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_or_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_or_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_or_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_xor_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_xor_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_xor_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_xor_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_xor_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_xor_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_xor_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_xor_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_xor_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_xor_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_xor_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_xor_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_blend_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_blend_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi16(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi16(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_bslli_epi128(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_bsrli_epi128(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_rol_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rol_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rol_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rol_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rol_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rolv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rolv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rolv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rolv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rolv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rolv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_ror_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ror_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ror_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ror_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ror_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rorv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rorv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rorv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rorv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rorv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rorv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_unpackhi_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_unpacklo_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_unpacklo_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_unpackhi_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_getexp_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getexp_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getexp_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_getexp_round_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getexp_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getexp_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getexp_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_getexp_round_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_getmant_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getmant_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getmant_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getmant_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getmant_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getmant_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_getmant_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permute_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permute_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permute_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permute_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permute_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_permutevar_pd(arg1: __m512d, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutevar_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutevar_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutevar_ps(arg1: __m512, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutevar_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutevar_ps(arg1: __mmask16, arg2: __m512, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_permutevar_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutevar_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutex_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutex_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutex_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_pd(arg1: __m512i, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_pd(arg1: __mmask8, arg2: __m512i, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutexvar_ps(arg1: __m512i, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_ps(arg1: __mmask16, arg2: __m512i, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_permutexvar_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_pd(arg1: __m512d, arg2: __m512i, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_pd(
        arg1: __m512d,
        arg2: __m512i,
        arg3: __mmask8,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutex2var_ps(arg1: __m512, arg2: __m512i, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_ps(
        arg1: __m512,
        arg2: __m512i,
        arg3: __mmask16,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_permutex2var_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi16(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask32,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask16,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask8,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_compress_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_compress_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_compress_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_compress_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512d,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask64,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_expand_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_expand_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expand_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_expand_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expand_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_pd(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_ps(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi8(
        arg1: __mmask64,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi16(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi32(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ternarylogic_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ternarylogic_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ternarylogic_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ternarylogic_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ternarylogic_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_conflict_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_conflict_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_conflict_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_conflict_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_conflict_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_conflict_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_lzcnt_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_lzcnt_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_lzcnt_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_lzcnt_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_lzcnt_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_avg_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_avg_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_avg_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_avg_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_avg_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_avg_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sad_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_dbsad_epu8(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dbsad_epu8(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dbsad_epu8(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_reduce_add_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_add_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_add_epi8(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi8(arg1: __mmask64, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi16(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi16(arg1: __mmask32, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_add_epu8(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epu8(arg1: __mmask64, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epu16(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epu16(arg1: __mmask32, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_mul_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_mul_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_mul_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_mul_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_min_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_min_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_min_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_min_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_min_epu32(arg1: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epu32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_reduce_min_epu64(arg1: __m512i) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epu64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_reduce_max_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_max_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_max_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_max_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_max_epu32(arg1: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epu32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_reduce_max_epu64(arg1: __m512i) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epu64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_reduce_and_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_and_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_and_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_and_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_or_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_or_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_or_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_or_epi64(arg1: __mmask8, arg2: __m512i)
        -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_xor_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_xor_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_xor_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_xor_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_reduce_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_reduce_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_reduce_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_reduce_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_reduce_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_reduce_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_roundscale_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_roundscale_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_roundscale_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_roundscale_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_roundscale_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_roundscale_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_scalef_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_scalef_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_scalef_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_scalef_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_scalef_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_scalef_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_scalef_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_scalef_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fixupimm_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fixupimm_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fixupimm_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fixupimm_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_stream_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_stream_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_stream_si512(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_stream_load_si512(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_castpd512_pd128(arg1: __m512d) -> __m128d;
}
extern "C" {
    pub fn _mm512_castps512_ps128(arg1: __m512) -> __m128;
}
extern "C" {
    pub fn _mm512_castsi512_si128(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_castsi128_si512(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_fpclass_ps_mask(arg1: __m512, arg2: ::std::os::raw::c_int) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_fpclass_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_fpclass_pd_mask(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_range_pd(arg1: __m512d, arg2: __m512d, arg3: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_range_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_range_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_range_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_range_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_range_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_range_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_range_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_range_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_range_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_range_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_madd_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd_epi16(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd_epi16(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maddubs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_maddubs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_maddubs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packs_epi16(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packs_epi16(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packs_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packs_epi32(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packs_epi32(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packus_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packus_epi16(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packus_epi16(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packus_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packus_epi32(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packus_epi32(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cmp_epi8_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi8_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmp_epi16_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_epi32_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_epi64_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmp_epu8_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu8_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmp_epu16_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_epu32_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_epu64_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_test_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_test_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_test_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_test_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_testn_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_testn_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_testn_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_testn_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_test_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_test_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_test_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_test_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_testn_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_testn_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_testn_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_kunpackb(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _mm512_kunpackw(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _mm512_kunpackd(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _mm512_testz_and_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_i32gather_ps(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_i32gather_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_pd(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_i64gather_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_pd(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_i32gather_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_epi32(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i32gather_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i32gather_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i64gather_epi64(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i64gather_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_ps(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_i64gather_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_epi32(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_i64gather_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_cvtpslo_pd(arg1: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtpslo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32lo_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32lo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu32lo_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32lo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32_pd(arg1: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu32_pd(arg1: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_ps(arg1: __m512, arg2: __mmask16, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_ps(arg1: __mmask16, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundepi32_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi32_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi32_ps(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtepu32_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_ps(arg1: __m512, arg2: __mmask16, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_ps(arg1: __mmask16, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundepu32_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu32_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu32_ps(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtph_ps(arg1: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtph_ps(arg1: __m512, arg2: __mmask16, arg3: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_ps(arg1: __mmask16, arg2: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundph_ps(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_ps(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_ph(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_ph(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtepi64_ps(arg1: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_ps(arg1: __m256, arg2: __mmask8, arg3: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_ps(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtepu64_ps(arg1: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_ps(arg1: __m256, arg2: __mmask8, arg3: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_ps(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi32(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi32(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi32_epi64(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepu8_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu8_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu16_epi32(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_epi32(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu16_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu32_epi64(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epi32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epi32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epi32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epi32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epi32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epi32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epi32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epi32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epu32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epu32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epu32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epu32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epu32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epu32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epu32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epu32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtpd_epi32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epi32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epi32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttpd_epi32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epi32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epi32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtpd_epu32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epu32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epu32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttpd_epu32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epu32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epu32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi16(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi16(arg1: __mmask32, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu8_epi16(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi16(arg1: __mmask32, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_pd(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_pd(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu64_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_pd(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_pd(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtpd_epi64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epi64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epi64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtpd_epu64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epu64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epu64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttpd_epi64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epi64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epi64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttpd_epu64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epu64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epu64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epi64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epi64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epi64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epu64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epu64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epu64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epi64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epi64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epi64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epu64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epu64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epu64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cmpeq_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpge_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpgt_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmple_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmplt_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpneq_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpeq_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpge_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpgt_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmple_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmplt_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpneq_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i)
        -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i)
        -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpeq_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpge_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpgt_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmple_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmplt_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpneq_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpeq_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpge_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpgt_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmple_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmplt_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpneq_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpeq_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpge_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpgt_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpge_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpgt_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpge_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpgt_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpeq_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpge_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpgt_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_abs_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_abs_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_abs_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_abs_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_abs_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_abs_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_add_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_add_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_add_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_add_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_add_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_adds_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_alignr_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_alignr_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_alignr_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_alignr_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_and_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_and_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_and_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_and_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_and_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_and_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_and_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_and_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_and_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_and_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_and_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_and_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_and_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_and_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_and_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_and_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_and_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_and_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_and_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_and_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_andnot_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_andnot_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_andnot_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_andnot_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_andnot_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_andnot_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_andnot_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_andnot_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_andnot_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_andnot_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_andnot_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_andnot_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_andnot_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_andnot_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_andnot_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_andnot_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_andnot_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_andnot_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_andnot_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_andnot_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_avg_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_avg_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_avg_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_avg_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_avg_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_avg_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_avg_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_avg_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_blend_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_blend_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_blend_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f32x2(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f32x2(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f32x2(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f32x4(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f32x4(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f32x4(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f64x2(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f64x2(arg1: __m256d, arg2: __mmask8, arg3: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f64x2(arg1: __mmask8, arg2: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm_broadcast_i32x2(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_broadcast_i32x2(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcast_i32x2(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcast_i32x2(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i32x2(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i32x2(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_i32x4(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i32x4(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i32x4(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_i64x2(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i64x2(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i64x2(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastb_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastb_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastb_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastb_epi8(arg1: __mmask32, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastd_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastd_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastmb_epi64(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastmb_epi64(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastmw_epi32(arg1: __mmask16) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastmw_epi32(arg1: __mmask16) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastq_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastq_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcastsd_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_broadcastsd_pd(arg1: __mmask8, arg2: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_broadcastss_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_broadcastss_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_broadcastss_ps(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcastss_ps(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm_mask_broadcastw_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastw_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastw_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastw_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cmp_epi16_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi16_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi16_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmp_epi32_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi32_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi32_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi32_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epi64_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi64_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epi8_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmp_epi8_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmp_epi8_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi8_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_epu16_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu16_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu16_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmp_epu32_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu32_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu32_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu32_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epu64_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu64_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epu8_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmp_epu8_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmp_epu8_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu8_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_pd_mask(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_pd_mask(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_ps_mask(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ps_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_ps_mask(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_ps_mask(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_compress_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_compress_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_compress_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_compress_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_compress_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_compress_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_compress_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_compress_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128d,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256d,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256,
    );
}
extern "C" {
    pub fn _mm_conflict_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_conflict_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_conflict_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_conflict_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_conflict_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_conflict_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_conflict_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_conflict_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_conflict_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_conflict_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_conflict_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_conflict_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_ph(arg1: __mmask8, arg2: __m128, arg3: ::std::os::raw::c_int)
        -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvt_roundps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundps_ph(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_ph(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvt_roundps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvt_roundps_ph(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_ps(arg1: __m256, arg2: __mmask8, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_ps(arg1: __mmask8, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepi64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepi64_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepi64_ps(arg1: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_ps(arg1: __m128, arg2: __mmask8, arg3: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepu32_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepu32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_ps(arg1: __m256, arg2: __mmask8, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_ps(arg1: __mmask8, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_cvtepu32_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepu32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepu64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepu64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepu64_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepu64_ps(arg1: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_ps(arg1: __m128, arg2: __mmask8, arg3: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_epi64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epi64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtpd_epu32(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epu32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_epu64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epu64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_ps(arg1: __m128, arg2: __mmask8, arg3: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtph_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtph_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtph_ps(arg1: __m256, arg2: __mmask8, arg3: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_ps(arg1: __mmask8, arg2: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm_mask_cvtps_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epi32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epi32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epi64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epi64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epu32(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epu32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epu32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epu32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epu64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epu64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtps_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtps_pd(arg1: __mmask8, arg2: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_cvtps_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_pd(arg1: __mmask8, arg2: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtsepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtsepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtsepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvttpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epi64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epi64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttpd_epu32(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epu32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epu64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epu64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epi32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epi32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epi64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epi64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epu32(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epu32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epu32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epu32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epu64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epu64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtusepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtusepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtusepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_dbsad_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dbsad_epu8(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dbsad_epu8(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dbsad_epu8(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dbsad_epu8(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dbsad_epu8(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_div_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_div_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_div_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_div_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_div_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_div_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_expand_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_expand_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_expand_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_expand_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_expand_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_expand_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_expand_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_expand_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi8(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi8(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi16(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi16(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi32(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi32(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_pd(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_expandloadu_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_ps(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_extractf32x4_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_extractf32x4_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_extractf32x4_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_extractf64x2_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_extractf64x2_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_maskz_extractf64x2_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_extracti32x4_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_extracti32x4_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_extracti32x4_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_extracti64x2_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_extracti64x2_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_extracti64x2_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_fixupimm_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_fixupimm_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_fixupimm_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_fixupimm_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_fixupimm_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_fixupimm_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fixupimm_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmadd_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256)
        -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmsub_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256)
        -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fnmadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fnmsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_fpclass_pd_mask(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_pd_mask(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fpclass_ps_mask(arg1: __m128, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ps_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_ps_mask(arg1: __m256, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_fpclass_ps_mask(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_getexp_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_getexp_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_getexp_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_getexp_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_getexp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_getexp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_getexp_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_getexp_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_getmant_pd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_getmant_pd(
        arg1: __m256d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_getmant_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_getmant_ps(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_getmant_ps(
        arg1: __m256,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_getmant_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_getmant_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mmask_i32gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i32gather_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i32gather_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mmask_i32gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mmask_i64gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mmask_i64gather_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i64gather_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mmask_i64gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_insertf32x4(arg1: __m256, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_insertf32x4(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_insertf32x4(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_insertf64x2(arg1: __m256d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_insertf64x2(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_insertf64x2(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_inserti32x4(arg1: __m256i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_inserti32x4(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_inserti32x4(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_inserti64x2(arg1: __m256i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_inserti64x2(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_inserti64x2(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_load_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_load_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_load_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_load_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_load_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_load_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_load_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_load_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_load_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256;
}
extern "C" {
    pub fn _mm_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi16(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi16(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi8(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi8(arg1: __mmask32, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_mask_loadu_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_loadu_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_loadu_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_loadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_loadu_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_loadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256;
}
extern "C" {
    pub fn _mm_lzcnt_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_lzcnt_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_lzcnt_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_lzcnt_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_lzcnt_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_lzcnt_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_lzcnt_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_lzcnt_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_lzcnt_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_lzcnt_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_madd_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_madd_epi16(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd_epi16(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_maddubs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_maddubs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_maddubs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_maddubs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_max_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_max_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_max_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_max_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_max_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_min_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_min_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_min_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_min_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_min_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_min_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_mov_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mov_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_mov_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_mov_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_mov_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mov_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_mov_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_mov_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_movedup_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_movedup_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_movedup_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_movedup_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_movehdup_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_movehdup_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_movehdup_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_movehdup_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_moveldup_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_moveldup_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_moveldup_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_moveldup_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_movepi16_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi16_mask(arg1: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_movepi32_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi32_mask(arg1: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_movepi64_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi64_mask(arg1: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_movepi8_mask(arg1: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_movepi8_mask(arg1: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_movm_epi16(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi16(arg1: __mmask16) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi32(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi32(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi64(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi64(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi8(arg1: __mmask16) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi8(arg1: __mmask32) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mul_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mul_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mul_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mul_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mul_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mul_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_mul_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_mul_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_mul_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_mul_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_mul_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_mulhi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhi_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhi_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mulhi_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhi_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhi_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhi_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mulhrs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhrs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhrs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhrs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_or_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_or_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_or_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_or_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_or_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_or_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_or_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_or_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_or_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_or_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_or_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_or_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_or_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_or_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_or_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_or_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_or_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_or_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_or_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_or_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_packs_epi16(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packs_epi16(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packs_epi16(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packs_epi16(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packs_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packs_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packs_epi32(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packs_epi32(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packus_epi16(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packus_epi16(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packus_epi16(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packus_epi16(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packus_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packus_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packus_epi32(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packus_epi32(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permute_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permute_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permute_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permute_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permute_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permute_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_permutevar_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permutevar_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permutevar_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256i,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutevar_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutevar_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permutevar_ps(arg1: __mmask8, arg2: __m128, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permutevar_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256i,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutevar_ps(arg1: __mmask8, arg2: __m256, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_permutex_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutex_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutex_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutex_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi16(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi16(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask16,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_pd(
        arg1: __m128d,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128i,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_permutex2var_pd(arg1: __m128d, arg2: __m128i, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_pd(
        arg1: __m256d,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutex2var_pd(arg1: __m256d, arg2: __m256i, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutex2var_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_ps(
        arg1: __m128,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128i,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_permutex2var_ps(arg1: __m128, arg2: __m128i, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_ps(
        arg1: __m256,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permutex2var_ps(arg1: __m256, arg2: __m256i, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_permutexvar_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutexvar_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_permutexvar_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_pd(arg1: __mmask8, arg2: __m256i, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutexvar_pd(arg1: __m256i, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_ps(arg1: __mmask8, arg2: __m256i, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_permutexvar_ps(arg1: __m256i, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_range_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_range_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_range_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_range_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_range_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_range_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_range_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_range_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rcp14_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp14_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp14_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_rcp14_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_rcp14_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_rcp14_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_rcp14_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp14_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp14_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_rcp14_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_rcp14_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_rcp14_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_reduce_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_reduce_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_reduce_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_reduce_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_ps(arg1: __mmask8, arg2: __m128, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm_reduce_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_reduce_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_reduce_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_reduce_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rol_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rol_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_rol_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rol_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rol_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_rol_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rol_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_rol_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rol_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_rol_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rolv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rolv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rolv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rolv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rolv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rolv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rolv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rolv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rolv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rolv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rolv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rolv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ror_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ror_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ror_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ror_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ror_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ror_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ror_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ror_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ror_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ror_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rorv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rorv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rorv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rorv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rorv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rorv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rorv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rorv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rorv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rorv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rorv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rorv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_roundscale_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_roundscale_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_roundscale_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_roundscale_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_roundscale_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_roundscale_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_rsqrt14_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_rsqrt14_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt14_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_scalef_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_scalef_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_scalef_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_scalef_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_scalef_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_scalef_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_scalef_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_scalef_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_set1_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi16(arg1: __mmask8, arg2: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi16(arg1: __mmask16, arg2: ::std::os::raw::c_short) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi32(arg1: __mmask8, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi32(arg1: __mmask8, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi8(arg1: __mmask16, arg2: ::std::os::raw::c_char) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi8(arg1: __mmask32, arg2: ::std::os::raw::c_char) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shuffle_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shuffle_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_f32x4(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_f32x4(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_shuffle_f32x4(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_shuffle_f64x2(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_f64x2(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_shuffle_f64x2(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_shuffle_i32x4(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_i32x4(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_i32x4(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_i64x2(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_i64x2(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_i64x2(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_shuffle_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_shuffle_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_shuffle_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_shuffle_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_shufflehi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shufflehi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shufflehi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shufflehi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shufflelo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shufflelo_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shufflelo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shufflelo_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sllv_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sqrt_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_sqrt_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_sqrt_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_sqrt_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_sra_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sra_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sra_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sra_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi64(arg1: __m128i, arg2: ::std::os::raw::c_uint) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi64(arg1: __m256i, arg2: ::std::os::raw::c_uint) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srav_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srav_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srlv_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_store_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_store_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_store_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_store_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256d);
}
extern "C" {
    pub fn _mm_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm256_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256);
}
extern "C" {
    pub fn _mm_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256d);
}
extern "C" {
    pub fn _mm_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm256_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256);
}
extern "C" {
    pub fn _mm_mask_sub_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_sub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_sub_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_sub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_sub_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_sub_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_subs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ternarylogic_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ternarylogic_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ternarylogic_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ternarylogic_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ternarylogic_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ternarylogic_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ternarylogic_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ternarylogic_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ternarylogic_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ternarylogic_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_test_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_test_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_test_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_test_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_test_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_test_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_test_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_test_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_test_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_test_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_mask_testn_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_testn_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_testn_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_testn_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_testn_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_testn_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_testn_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_testn_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_testn_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_unpackhi_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_unpacklo_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_xor_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_xor_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_xor_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_xor_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_xor_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_xor_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_xor_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_xor_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_xor_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_xor_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_xor_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_xor_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_xor_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_xor_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_xor_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_xor_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_xor_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_xor_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_xor_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_xor_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_cmpeq_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpge_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpgt_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmple_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmplt_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpneq_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpeq_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpge_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpgt_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmple_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmplt_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpneq_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmple_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmple_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpeq_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpge_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpgt_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmple_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmplt_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpneq_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpeq_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpge_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpgt_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmple_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmplt_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpneq_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpeq_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpge_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpgt_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmple_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmplt_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpneq_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpeq_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpge_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpgt_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmple_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmplt_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpneq_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpeq_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_add_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_add_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_add_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_add_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_add_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_add_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmp_round_sd_mask(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_round_ss_mask(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_sd_mask(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_ss_mask(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_comi_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comi_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundi32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_i32(arg1: __m128d, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsd_si32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsd_ss(arg1: __m128, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsd_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsd_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_u32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundsi32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundss_i32(arg1: __m128, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundss_sd(arg1: __m128d, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvt_roundss_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundss_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundss_si32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundss_u32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundu32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvti32_sd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_cvti32_ss(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_i32(arg1: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_mask_cvtsd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtsd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_u32(arg1: __m128d) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtss_i32(arg1: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_mask_cvtss_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtss_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtss_u32(arg1: __m128) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_i32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_si32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_u32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundss_i32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundss_si32(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundss_u32(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttsd_i32(arg1: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsd_u32(arg1: __m128d) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttss_i32(arg1: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttss_u32(arg1: __m128) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtu32_sd(arg1: __m128d, arg2: ::std::os::raw::c_uint) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtu32_ss(arg1: __m128, arg2: ::std::os::raw::c_uint) -> __m128;
}
extern "C" {
    pub fn _mm_div_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_div_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_div_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_div_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_div_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_div_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fixupimm_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fixupimm_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_fixupimm_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fixupimm_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmadd_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmadd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmsub_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmsub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmadd_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmsub_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fpclass_sd_mask(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fpclass_ss_mask(arg1: __m128, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_getexp_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getexp_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_getexp_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_getexp_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_getmant_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getmant_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_getmant_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getmant_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_load_sd(arg1: __m128d, arg2: __mmask8, arg3: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_load_sd(arg1: __mmask8, arg2: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_load_ss(arg1: __m128, arg2: __mmask8, arg3: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_load_ss(arg1: __mmask8, arg2: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_mask_max_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_max_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_max_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_max_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_max_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_max_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_min_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_min_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_min_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_min_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_min_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_min_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_move_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_move_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_move_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_move_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_mul_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_mul_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mul_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_mul_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_mul_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_range_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_range_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_range_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_range_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_range_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_range_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp14_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp14_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp14_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp14_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp14_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp14_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp28_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp28_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp28_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp28_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp28_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_rcp28_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp28_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp28_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp28_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp28_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp28_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp28_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_reduce_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_reduce_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_reduce_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_reduce_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_reduce_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_reduce_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_roundscale_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_roundscale_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt14_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt14_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt28_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt28_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt28_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt28_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_scalef_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_scalef_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_scalef_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_scalef_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sqrt_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sqrt_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_store_sd(arg1: *mut f64, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm_mask_store_ss(arg1: *mut f32, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm_mask_sub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_sub_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sub_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_u64(arg1: __m128d) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtss_u64(arg1: __m128) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvttsd_u64(arg1: __m128d) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvttss_u64(arg1: __m128) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundsd_u64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundss_u64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_u64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_u64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvti64_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvti64_ss(arg1: __m128, arg2: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_i64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtss_i64(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_i64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_i64(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_i64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_si64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_i64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_si64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtu64_sd(arg1: __m128d, arg2: ::std::os::raw::c_ulonglong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtu64_ss(arg1: __m128, arg2: ::std::os::raw::c_ulonglong) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundi64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundi64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_i64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsd_si64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsi64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundsi64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundss_i64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundss_si64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundu64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundu64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_zextpd128_pd512(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_zextpd256_pd512(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_zextps128_ps512(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_zextps256_ps512(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_zextsi128_si512(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_zextsi256_si512(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm_madd52hi_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_madd52hi_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52hi_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_madd52hi_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_madd52hi_epu64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd52hi_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_madd52lo_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_madd52lo_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52lo_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_madd52lo_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_madd52lo_epu64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd52lo_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_permutexvar_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_permutexvar_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutexvar_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_permutex2var_epi8(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask16,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi8(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask32,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi8(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask64,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_multishift_epi64_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_multishift_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_multishift_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_multishift_epi64_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_multishift_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_multishift_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_multishift_epi64_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_multishift_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_multishift_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpbusd_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpbusd_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpbusd_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusd_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpbusd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpbusd_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpbusd_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpbusd_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpbusd_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpbusds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpbusds_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpbusds_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpbusds_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpbusds_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpbusds_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpbusds_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpbusds_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpwssd_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpwssd_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpwssd_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssd_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpwssd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpwssd_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpwssd_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpwssd_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpwssd_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpwssds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpwssds_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpwssds_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpwssds_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpwssds_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpwssds_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpwssds_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpwssds_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesenc_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesenc_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesenclast_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesenclast_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesdec_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesdec_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesdeclast_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesdeclast_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_clmulepi64_epi128(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_clmulepi64_epi128(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi8(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi8(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi16(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi16(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_bitshuffle_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_bitshuffle_epi64_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_bitshuffle_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_bitshuffle_epi64_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_bitshuffle_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_bitshuffle_epi64_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm_gf2p8affineinv_epi64_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8affineinv_epi64_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8affineinv_epi64_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_gf2p8affine_epi64_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8affine_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8affine_epi64_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8affine_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8affine_epi64_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8affine_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_gf2p8mul_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8mul_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8mul_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8mul_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8mul_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8mul_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8mul_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8mul_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8mul_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi16(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi32(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi64(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi64(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi16(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi32(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi64(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi64(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_div_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_div_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rem_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rem_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_sin_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sin_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sin_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sin_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cos_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cos_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cos_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cos_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sincos_ps(arg1: *mut __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sincos_ps(
        arg1: *mut __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_sincos_pd(arg1: *mut __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sincos_pd(
        arg1: *mut __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_tan_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tan_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tan_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tan_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_asin_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_asin_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_asin_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_asin_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_acos_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_acos_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_acos_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_acos_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atan_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atan_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_atan_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atan_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atan2_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atan2_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_atan2_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atan2_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sind_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sind_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sind_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sind_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cosd_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cosd_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cosd_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cosd_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_tand_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tand_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tand_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tand_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sinh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sinh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sinh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sinh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cosh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cosh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cosh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cosh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_tanh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tanh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tanh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tanh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_asinh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_asinh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_asinh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_asinh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_acosh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_acosh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_acosh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_acosh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atanh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atanh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_atanh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atanh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log1p_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log1p_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log1p_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log1p_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log10_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log10_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log10_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log10_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log2_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log2_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log2_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log2_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_logb_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_logb_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_logb_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_logb_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp10_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp10_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp10_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp10_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp2_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp2_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp2_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp2_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_expm1_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expm1_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_expm1_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expm1_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_pow_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_pow_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_pow_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_pow_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_trunc_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_trunc_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_trunc_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_trunc_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_floor_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_floor_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_floor_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_floor_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_ceil_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_ceil_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_ceil_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_ceil_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_svml_round_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_svml_round_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_svml_round_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_svml_round_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmod_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmod_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512)
        -> __m512;
}
extern "C" {
    pub fn _mm512_fmod_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmod_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_rint_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rint_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rint_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rint_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_invsqrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_invsqrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_invsqrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_invsqrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cbrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cbrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cbrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cbrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_invcbrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_invcbrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_invcbrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_invcbrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_hypot_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_hypot_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_hypot_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_hypot_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cdfnorm_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cdfnorm_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cdfnorm_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cdfnorm_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cdfnorminv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cdfnorminv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cdfnorminv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cdfnorminv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erf_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erf_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erf_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erf_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfc_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfc_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfc_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfc_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfcinv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfcinv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfcinv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfcinv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfinv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfinv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfinv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfinv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_nearbyint_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_nearbyint_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_nearbyint_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_nearbyint_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
pub type __m128bh = __m128i;
pub type __m256bh = __m256i;
pub type __m512bh = __m512i;
pub type __bfloat16 = ::std::os::raw::c_ushort;
extern "C" {
    pub fn _mm_cvtneps_pbh(arg1: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_mask_cvtneps_pbh(arg1: __m128bh, arg2: __mmask8, arg3: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_maskz_cvtneps_pbh(arg1: __mmask8, arg2: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_cvtne2ps_pbh(arg1: __m128, arg2: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_mask_cvtne2ps_pbh(
        arg1: __m128bh,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128bh;
}
extern "C" {
    pub fn _mm_maskz_cvtne2ps_pbh(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_dpbf16_ps(arg1: __m128, arg2: __m128bh, arg3: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_mask_dpbf16_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128bh,
        arg4: __m128bh,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_dpbf16_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128bh,
        arg4: __m128bh,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneps_pbh(arg1: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_mask_cvtneps_pbh(arg1: __m128bh, arg2: __mmask8, arg3: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_maskz_cvtneps_pbh(arg1: __mmask8, arg2: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_cvtne2ps_pbh(arg1: __m256, arg2: __m256) -> __m256bh;
}
extern "C" {
    pub fn _mm256_mask_cvtne2ps_pbh(
        arg1: __m256bh,
        arg2: __mmask16,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256bh;
}
extern "C" {
    pub fn _mm256_maskz_cvtne2ps_pbh(arg1: __mmask16, arg2: __m256, arg3: __m256) -> __m256bh;
}
extern "C" {
    pub fn _mm256_dpbf16_ps(arg1: __m256, arg2: __m256bh, arg3: __m256bh) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_dpbf16_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256bh,
        arg4: __m256bh,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_dpbf16_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256bh,
        arg4: __m256bh,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtneps_pbh(arg1: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_mask_cvtneps_pbh(arg1: __m256bh, arg2: __mmask16, arg3: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_maskz_cvtneps_pbh(arg1: __mmask16, arg2: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_cvtne2ps_pbh(arg1: __m512, arg2: __m512) -> __m512bh;
}
extern "C" {
    pub fn _mm512_mask_cvtne2ps_pbh(
        arg1: __m512bh,
        arg2: __mmask32,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512bh;
}
extern "C" {
    pub fn _mm512_maskz_cvtne2ps_pbh(arg1: __mmask32, arg2: __m512, arg3: __m512) -> __m512bh;
}
extern "C" {
    pub fn _mm512_dpbf16_ps(arg1: __m512, arg2: __m512bh, arg3: __m512bh) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_dpbf16_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512bh,
        arg4: __m512bh,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_dpbf16_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512bh,
        arg4: __m512bh,
    ) -> __m512;
}
extern "C" {
    pub fn _mm_cvtness_sbh(arg1: f32) -> __bfloat16;
}
extern "C" {
    pub fn _mm_cvtsbh_ss(arg1: __bfloat16) -> f32;
}
extern "C" {
    pub fn _mm_cvtpbh_ps(arg1: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtpbh_ps(arg1: __m128, arg2: __mmask8, arg3: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtpbh_ps(arg1: __mmask8, arg2: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtpbh_ps(arg1: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtpbh_ps(arg1: __m256, arg2: __mmask8, arg3: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtpbh_ps(arg1: __mmask8, arg2: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtpbh_ps(arg1: __m256bh) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtpbh_ps(arg1: __m512, arg2: __mmask16, arg3: __m256bh) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtpbh_ps(arg1: __mmask16, arg2: __m256bh) -> __m512;
}
extern "C" {
    pub fn _kadd_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kadd_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kadd_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kadd_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kand_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kand_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kand_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kand_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kandn_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kandn_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kandn_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kandn_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _knot_mask8(arg1: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _knot_mask16(arg1: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _knot_mask32(arg1: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _knot_mask64(arg1: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kxnor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kxnor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kxnor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kxnor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kxor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kxor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kxor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kxor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kshiftli_mask8(arg1: __mmask8, arg2: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _kshiftli_mask16(arg1: __mmask16, arg2: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _kshiftli_mask32(arg1: __mmask32, arg2: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _kshiftli_mask64(arg1: __mmask64, arg2: ::std::os::raw::c_uint) -> __mmask64;
}
extern "C" {
    pub fn _kshiftri_mask8(arg1: __mmask8, arg2: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _kshiftri_mask16(arg1: __mmask16, arg2: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _kshiftri_mask32(arg1: __mmask32, arg2: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _kshiftri_mask64(arg1: __mmask64, arg2: ::std::os::raw::c_uint) -> __mmask64;
}
extern "C" {
    pub fn _load_mask8(arg1: *mut __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _load_mask16(arg1: *mut __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _load_mask32(arg1: *mut __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _load_mask64(arg1: *mut __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _store_mask8(arg1: *mut __mmask8, arg2: __mmask8);
}
extern "C" {
    pub fn _store_mask16(arg1: *mut __mmask16, arg2: __mmask16);
}
extern "C" {
    pub fn _store_mask32(arg1: *mut __mmask32, arg2: __mmask32);
}
extern "C" {
    pub fn _store_mask64(arg1: *mut __mmask64, arg2: __mmask64);
}
extern "C" {
    pub fn _cvtmask8_u32(arg1: __mmask8) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask16_u32(arg1: __mmask16) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask32_u32(arg1: __mmask32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask64_u64(arg1: __mmask64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvtu32_mask8(arg1: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _cvtu32_mask16(arg1: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _cvtu32_mask32(arg1: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _cvtu64_mask64(arg1: ::std::os::raw::c_ulonglong) -> __mmask64;
}
extern "C" {
    pub fn _mm512_kmov(arg1: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kortest_mask8_u8(
        arg1: __mmask8,
        arg2: __mmask8,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask16_u8(
        arg1: __mmask16,
        arg2: __mmask16,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask32_u8(
        arg1: __mmask32,
        arg2: __mmask32,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask64_u8(
        arg1: __mmask64,
        arg2: __mmask64,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask8_u8(
        arg1: __mmask8,
        arg2: __mmask8,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask16_u8(
        arg1: __mmask16,
        arg2: __mmask16,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask32_u8(
        arg1: __mmask32,
        arg2: __mmask32,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask64_u8(
        arg1: __mmask64,
        arg2: __mmask64,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_mask_exp2a23_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_exp2a23_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp2a23_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_exp2a23_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rcp28_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rcp28_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rcp28_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rcp28_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rsqrt28_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt28_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rsqrt28_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt28_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_prefetch_i32gather_pd(
        vindex: __m256i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32gather_ps(
        index: __m512i,
        mv: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m256i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32scatter_ps(
        mv: *mut ::std::os::raw::c_void,
        index: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64gather_pd(
        vindex: __m512i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64gather_ps(
        vindex: __m512i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64scatter_ps(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32gather_pd(
        vindex: __m256i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32gather_ps(
        vindex: __m512i,
        mask: __mmask16,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vinde: __m256i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32scatter_ps(
        mv: *mut ::std::os::raw::c_void,
        k: __mmask16,
        index: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64gather_pd(
        vindex: __m512i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64gather_ps(
        vindex: __m512i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64scatter_ps(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_2intersect_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm256_2intersect_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm512_2intersect_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: *mut __mmask16,
        arg4: *mut __mmask16,
    );
}
extern "C" {
    pub fn _mm_2intersect_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm256_2intersect_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm512_2intersect_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
pub type __tile = ::std::os::raw::c_int;
extern "C" {
    pub fn _tile_loadconfig(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _tile_storeconfig(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _tile_release();
}
extern "C" {
    pub fn _tile_loadd(
        dst: __tile,
        base: *const ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_stream_loadd(
        dst: __tile,
        base: *const ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_stored(
        src: __tile,
        base: *mut ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_zero(dst: __tile);
}
extern "C" {
    pub fn _tile_dpbf16ps(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpfp16ps(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbssd(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbsud(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbusd(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbuud(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_cmmimfp16ps(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_cmmrlfp16ps(dst: __tile, src1: __tile, src2: __tile);
}
pub type __m128h = __m128i;
pub type __m256h = __m256i;
pub type __m512h = __m512i;
extern "C" {
    pub fn _mm_add_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_add_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_add_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_add_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_add_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_add_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_add_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_add_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_add_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_add_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_add_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_add_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cmp_ph_mask(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ph_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_ph_mask(
        arg1: __m256h,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_ph_mask(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_ph_mask(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_round_ph_mask(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_sh_mask(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_round_sh_mask(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_comi_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comi_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtepi32_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi32_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepi32_ph(arg1: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_ph(arg1: __mmask16, arg2: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi32_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi32_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi32_ph(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtpd_ph(arg1: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtpd_ph(arg1: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtpd_ph(arg1: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_ph(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_ph(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtph_epi32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_pd(arg1: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtph_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtph_pd(arg1: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtph_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm512_cvtph_pd(arg1: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtph_pd(arg1: __m512d, arg2: __mmask8, arg3: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundph_pd(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_pd(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm_cvtxph_ps(arg1: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtxph_ps(arg1: __m128, arg2: __mmask8, arg3: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtxph_ps(arg1: __mmask8, arg2: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtxph_ps(arg1: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtxph_ps(arg1: __m256, arg2: __mmask8, arg3: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtxph_ps(arg1: __mmask8, arg2: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtxph_ps(arg1: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtxph_ps(arg1: __m512, arg2: __mmask16, arg3: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtxph_ps(arg1: __mmask16, arg2: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtx_roundph_ps(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtx_roundph_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtx_roundph_ps(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm_cvtph_epi64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epi16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtxps_ph(arg1: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtxps_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtxps_ph(arg1: __mmask8, arg2: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtxps_ph(arg1: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtxps_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtxps_ph(arg1: __mmask8, arg2: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtxps_ph(arg1: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtxps_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtxps_ph(arg1: __mmask16, arg2: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtx_roundps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtx_roundps_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtx_roundps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtepi64_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi64_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepi64_ph(arg1: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_ph(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsd_sh(arg1: __m128h, arg2: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtsd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128d,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtsd_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundsd_sh(arg1: __m128h, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsh_sd(arg1: __m128d, arg2: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtsh_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128h,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtsh_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundsh_sd(arg1: __m128d, arg2: __m128h, arg3: ::std::os::raw::c_int)
        -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsh_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsh_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsh_i32(arg1: __m128h) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtsh_i64(arg1: __m128h) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsh_i32(arg1: __m128h, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsh_i64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsh_ss(arg1: __m128, arg2: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtsh_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtsh_ss(arg1: __mmask8, arg2: __m128, arg3: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsh_ss(arg1: __m128, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsh_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsh_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsh_u32(arg1: __m128h) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtsh_u64(arg1: __m128h) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundsh_u32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundsh_u64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvti32_sh(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_cvti64_sh(arg1: __m128h, arg2: ::std::os::raw::c_longlong) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundi32_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundi64_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundss_sh(arg1: __m128h, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvt_roundss_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundss_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvttph_epi32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epi64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epi16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttsh_i32(arg1: __m128h) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsh_i64(arg1: __m128h) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_i32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_i64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsh_u32(arg1: __m128h) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttsh_u64(arg1: __m128h) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_u32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_u64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtepu32_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu32_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepu32_ph(arg1: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_ph(arg1: __mmask16, arg2: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu32_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu32_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu32_ph(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtepu64_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu64_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepu64_ph(arg1: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_ph(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtu32_sh(arg1: __m128h, arg2: ::std::os::raw::c_uint) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtu64_sh(arg1: __m128h, arg2: ::std::os::raw::c_ulonglong) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundu32_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundu64_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtepu16_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu16_ph(arg1: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_ph(arg1: __mmask16, arg2: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtepu16_ph(arg1: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_ph(arg1: __mmask32, arg2: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu16_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu16_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu16_ph(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_cvtepi16_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi16_ph(arg1: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_ph(arg1: __mmask16, arg2: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtepi16_ph(arg1: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_ph(arg1: __mmask32, arg2: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi16_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi16_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi16_ph(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_div_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_div_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_div_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_div_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_div_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_div_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_div_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_div_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_div_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_div_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_div_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_div_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmaddsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmaddsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmaddsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmsubadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmsubadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmsubadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fpclass_ph_mask(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ph_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_ph_mask(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_fpclass_ph_mask(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_fpclass_ph_mask(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_fpclass_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_fpclass_sh_mask(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fmadd_pch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_pch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_pch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmadd_pch(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmadd_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_pch(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask8,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_pch(
        arg1: __mmask8,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmadd_pch(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmadd_pch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_pch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_pch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fcmadd_pch(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fcmadd_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fcmadd_pch(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask8,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fcmadd_pch(
        arg1: __mmask8,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fcmadd_pch(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmadd_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fcmadd_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmadd_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmadd_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmadd_sch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_sch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmul_pch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_pch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_fcmul_pch(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fcmul_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fcmul_pch(arg1: __mmask8, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_fcmul_pch(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmul_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmul_pch(arg1: __mmask16, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_fcmul_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmul_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmul_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmul_pch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_pch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmul_pch(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmul_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmul_pch(arg1: __mmask8, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmul_pch(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmul_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmul_pch(arg1: __mmask16, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmul_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmul_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmul_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmul_sch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_sch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmul_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmul_sch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_sch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_fmul_round_sch(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int)
        -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fnmadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fnmadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fnmadd_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fnmsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fnmsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fnmsub_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmsub_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getexp_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_getexp_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_getexp_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_getexp_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_getexp_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getexp_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getexp_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_getexp_round_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_getexp_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_getexp_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getmant_ph(
        arg1: __m128h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_getmant_ph(
        arg1: __m256h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_getmant_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_getmant_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_getmant_ph(
        arg1: __m512h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getmant_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getmant_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_getmant_round_ph(
        arg1: __m512h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
        arg6: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_getmant_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: _MM_MANTISSA_NORM_ENUM,
        arg6: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getmant_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: _MM_MANTISSA_NORM_ENUM,
        arg6: _MM_MANTISSA_SIGN_ENUM,
        arg7: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_max_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_max_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_max_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_max_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_max_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_max_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_max_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_max_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_max_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_max_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_max_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_max_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_min_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_min_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_min_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_min_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_min_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_min_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_min_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_min_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_min_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_min_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_min_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_min_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_load_sh(arg1: *const ::std::os::raw::c_void) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_load_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_load_sh(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128h;
}
extern "C" {
    pub fn _mm_store_sh(arg1: *mut ::std::os::raw::c_void, arg2: __m128h);
}
extern "C" {
    pub fn _mm_mask_store_sh(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128h);
}
extern "C" {
    pub fn _mm_move_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_move_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h)
        -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_move_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsi16_si128(arg1: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si16(arg1: __m128i) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _mm_mul_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_mul_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_mul_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_mul_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_mul_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_mul_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_mul_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mul_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_mul_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_mul_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mul_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_rcp_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rcp_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rcp_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_rcp_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_rcp_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_rcp_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_rcp_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_rcp_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_rcp_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm_rcp_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rcp_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rcp_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_reduce_ph(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_reduce_ph(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_reduce_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_reduce_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_reduce_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_reduce_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_reduce_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_reduce_round_ph(
        arg1: __m512h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_reduce_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_reduce_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_roundscale_ph(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_roundscale_ph(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_roundscale_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_roundscale_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_roundscale_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_roundscale_round_ph(
        arg1: __m512h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_roundscale_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_roundscale_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_rsqrt_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rsqrt_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rsqrt_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_rsqrt_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_rsqrt_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_rsqrt_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_rsqrt_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm_rsqrt_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rsqrt_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rsqrt_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_scalef_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_scalef_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_scalef_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_scalef_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_scalef_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_scalef_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_scalef_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_scalef_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_scalef_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_scalef_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_sqrt_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_sqrt_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_sqrt_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_sqrt_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sqrt_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_sqrt_round_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_sqrt_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h)
        -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_sqrt_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_sub_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_sub_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_sub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_sub_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_sub_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sub_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_sub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_sub_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_sub_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_blend_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_blend_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_blend_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm256_rsqrt14_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_rsqrt14_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_rsqrt14_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt14_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn __getexp_ss(arg1: f32) -> f32;
}
extern "C" {
    pub fn __getexp_sd(arg1: f64) -> f64;
}
extern "C" {
    pub fn __getmant_ss(
        arg1: f32,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> f32;
}
extern "C" {
    pub fn __getmant_sd(
        arg1: f64,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> f64;
}
extern "C" {
    pub fn __scalef_ss(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __scalef_sd(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn _mm_madd52hi_avx_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52hi_avx_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_madd52lo_avx_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52lo_avx_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_bcstnebf16_ps(arg1: *const __bfloat16) -> __m128;
}
extern "C" {
    pub fn _mm256_bcstnebf16_ps(arg1: *const __bfloat16) -> __m256;
}
extern "C" {
    pub fn _mm_bcstnesh_ps(arg1: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_bcstnesh_ps(arg1: *const ::std::os::raw::c_void) -> __m256;
}
extern "C" {
    pub fn _mm_cvtneebf16_ps(arg1: *const __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneebf16_ps(arg1: *const __m256bh) -> __m256;
}
extern "C" {
    pub fn _mm_cvtneeph_ps(arg1: *const __m128h) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneeph_ps(arg1: *const __m256h) -> __m256;
}
extern "C" {
    pub fn _mm_cvtneobf16_ps(arg1: *const __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneobf16_ps(arg1: *const __m256bh) -> __m256;
}
extern "C" {
    pub fn _mm_cvtneoph_ps(arg1: *const __m128h) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneoph_ps(arg1: *const __m256h) -> __m256;
}
extern "C" {
    pub fn _mm_cvtneps_avx_pbh(arg1: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm256_cvtneps_avx_pbh(arg1: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm_dpbssd_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbssd_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbssds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbssds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbsud_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbsud_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbsuds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbsuds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbuud_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbuud_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbuuds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbuuds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _aadd_i32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _aand_i32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _aor_i32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _axor_i32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _aadd_i64(arg1: *mut ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn _aand_i64(arg1: *mut ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn _aor_i64(arg1: *mut ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn _axor_i64(arg1: *mut ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn __rsqrt14_ss(arg1: f32) -> f32;
}
extern "C" {
    pub fn __rsqrt14_sd(arg1: f64) -> f64;
}
extern "C" {
    pub fn __rsqrt_ss(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sqrt_ss(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sqrt_sd(arg1: f64) -> f64;
}
extern "C" {
    pub fn __max_ss(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __max_sd(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __min_ss(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __min_sd(arg1: f64, arg2: f64) -> f64;
}
pub const _CMPCCX_ENUM__CMPCCX_O: _CMPCCX_ENUM = 0;
pub const _CMPCCX_ENUM__CMPCCX_NO: _CMPCCX_ENUM = 1;
pub const _CMPCCX_ENUM__CMPCCX_B: _CMPCCX_ENUM = 2;
pub const _CMPCCX_ENUM__CMPCCX_NB: _CMPCCX_ENUM = 3;
pub const _CMPCCX_ENUM__CMPCCX_Z: _CMPCCX_ENUM = 4;
pub const _CMPCCX_ENUM__CMPCCX_NZ: _CMPCCX_ENUM = 5;
pub const _CMPCCX_ENUM__CMPCCX_BE: _CMPCCX_ENUM = 6;
pub const _CMPCCX_ENUM__CMPCCX_NBE: _CMPCCX_ENUM = 7;
pub const _CMPCCX_ENUM__CMPCCX_S: _CMPCCX_ENUM = 8;
pub const _CMPCCX_ENUM__CMPCCX_NS: _CMPCCX_ENUM = 9;
pub const _CMPCCX_ENUM__CMPCCX_P: _CMPCCX_ENUM = 10;
pub const _CMPCCX_ENUM__CMPCCX_NP: _CMPCCX_ENUM = 11;
pub const _CMPCCX_ENUM__CMPCCX_L: _CMPCCX_ENUM = 12;
pub const _CMPCCX_ENUM__CMPCCX_NL: _CMPCCX_ENUM = 13;
pub const _CMPCCX_ENUM__CMPCCX_LE: _CMPCCX_ENUM = 14;
pub const _CMPCCX_ENUM__CMPCCX_NLE: _CMPCCX_ENUM = 15;
pub type _CMPCCX_ENUM = ::std::os::raw::c_int;
extern "C" {
    pub fn _cmpccxadd_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cmpccxadd_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __round_sd(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __round_ss(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _mm_macc_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_macc_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_macc_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_macc_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maddsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maddsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msubadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msubadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmacc_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmacc_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmacc_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmacc_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maccs_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macc_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccsd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccs_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macc_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccslo_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macclo_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccshi_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macchi_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddsd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddw_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddw_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubw_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubd_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubq_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmov_si128(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_perm_epi8(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi8(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi16(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_frcz_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_frcz_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_frcz_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_frcz_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_permute2_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_permute2_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_macc_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_macc_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maddsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maddsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_msubadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_msubadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_msub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_msub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_nmacc_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_nmacc_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_nmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_nmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_cmov_si256(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_frcz_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_frcz_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permute2_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn __llwpcb(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __slwpcb() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __lwpval32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __lwpins32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __lwpval64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __lwpins64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _andn_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _andn_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bextri_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcfill_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsfill_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcs_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _tzmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcic_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsic_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _t1mskc_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blci_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextri_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcfill_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsfill_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcs_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _tzmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcic_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsic_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _t1mskc_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blci_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_monitorx(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_mwaitx(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_clzero(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _rdpru(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmp_seg {
    pub rmp_gpa: ::std::os::raw::c_ulonglong,
    pub rmp_entry: ::std::os::raw::c_char,
    pub rmp_pageSize: ::std::os::raw::c_char,
    pub rmp_pageMark: ::std::os::raw::c_char,
    pub rmp_reserved: ::std::os::raw::c_char,
    pub rmp_ASID: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rmp_seg"][::std::mem::size_of::<rmp_seg>() - 16usize];
    ["Alignment of rmp_seg"][::std::mem::align_of::<rmp_seg>() - 8usize];
    ["Offset of field: rmp_seg::rmp_gpa"][::std::mem::offset_of!(rmp_seg, rmp_gpa) - 0usize];
    ["Offset of field: rmp_seg::rmp_entry"][::std::mem::offset_of!(rmp_seg, rmp_entry) - 8usize];
    ["Offset of field: rmp_seg::rmp_pageSize"]
        [::std::mem::offset_of!(rmp_seg, rmp_pageSize) - 9usize];
    ["Offset of field: rmp_seg::rmp_pageMark"]
        [::std::mem::offset_of!(rmp_seg, rmp_pageMark) - 10usize];
    ["Offset of field: rmp_seg::rmp_reserved"]
        [::std::mem::offset_of!(rmp_seg, rmp_reserved) - 11usize];
    ["Offset of field: rmp_seg::rmp_ASID"][::std::mem::offset_of!(rmp_seg, rmp_ASID) - 12usize];
};
extern "C" {
    pub fn __rmpupdate(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut rmp_seg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __pvalidate(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __psmash(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __rmpadjust(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __rmpquery(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __svm_invlpgb(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_tlbsync();
}
extern "C" {
    pub fn _AddressOfReturnAddress() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _cvt_dtoi_fast(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoi_sat(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoi_sent(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoll_fast(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoll_sat(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoll_sent(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoui_fast(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoui_sat(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoui_sent(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoull_fast(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_dtoull_sat(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_dtoull_sent(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoi_fast(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoi_sat(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoi_sent(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoll_fast(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoll_sat(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoll_sent(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoui_fast(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoui_sat(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoui_sent(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoull_fast(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoull_sat(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoull_sent(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _interlockedadd(
        _Addend: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedadd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedAnd64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedAnd_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedbittestandset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedCompareExchange128_np(
        _Destination: *mut ::std::os::raw::c_longlong,
        _ExchangeHigh: ::std::os::raw::c_longlong,
        _ExchangeLow: ::std::os::raw::c_longlong,
        _ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedCompareExchange16_np(
        _Destination: *mut ::std::os::raw::c_short,
        _Exchange: ::std::os::raw::c_short,
        _Comparand: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_np(
        _Destination: *mut ::std::os::raw::c_longlong,
        _Exchange: ::std::os::raw::c_longlong,
        _Comparand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer(
        _Destination: *mut *mut ::std::os::raw::c_void,
        _Exchange: *mut ::std::os::raw::c_void,
        _Comparand: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_np(
        _Destination: *mut *mut ::std::os::raw::c_void,
        _Exchange: *mut ::std::os::raw::c_void,
        _Comparand: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchange_np(
        _Destination: *mut ::std::os::raw::c_long,
        _Exchange: ::std::os::raw::c_long,
        _Comparand: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangePointer(
        _Target: *mut *mut ::std::os::raw::c_void,
        _Value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedOr16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedOr64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedOr_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedXor64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedXor_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ReadBarrier();
}
extern "C" {
    pub fn _ReturnAddress() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _WriteBarrier();
}
extern "C" {
    pub fn __addgsbyte(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __addgsdword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __addgsqword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __addgsword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __clts();
}
extern "C" {
    pub fn __code_seg(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __cpuid(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __cpuidex(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __debugbreak();
}
extern "C" {
    pub fn __emul(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __emulu(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __fastfail(arg1: ::std::os::raw::c_uint) -> !;
}
extern "C" {
    pub fn __faststorefence();
}
extern "C" {
    pub fn __getcallerseflags() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __halt();
}
extern "C" {
    pub fn __inbyte(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __inbytestring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __incgsbyte(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsdword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsqword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __indword(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __indwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __int2c() -> !;
}
extern "C" {
    pub fn __invlpg(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __inword(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __inwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __lidt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __ll_lshift(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __ll_rshift(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __movsb(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsd(
        arg1: *mut ::std::os::raw::c_ulong,
        arg2: *const ::std::os::raw::c_ulong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsq(
        arg1: *mut ::std::os::raw::c_ulonglong,
        arg2: *const ::std::os::raw::c_ulonglong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsw(
        arg1: *mut ::std::os::raw::c_ushort,
        arg2: *const ::std::os::raw::c_ushort,
        arg3: usize,
    );
}
extern "C" {
    pub fn __mulh(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __nop();
}
extern "C" {
    pub fn __nvreg_restore_fence();
}
extern "C" {
    pub fn __nvreg_save_fence();
}
extern "C" {
    pub fn __outbyte(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __outbytestring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __outdword(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __outdwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __outword(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __outwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __rdtsc() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __rdtscp(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr0() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr2() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr3() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr4() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr8() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readdr(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readeflags() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readgsbyte(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __readgsdword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __readgsqword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readgsword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __readmsr(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readmsrlist(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut ::std::os::raw::c_ulonglong,
        arg3: *mut ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn __readpmc(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __segmentlimit(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __sidt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __stosb(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_uchar, arg3: usize);
}
extern "C" {
    pub fn __stosd(arg1: *mut ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong, arg3: usize);
}
extern "C" {
    pub fn __stosq(
        arg1: *mut ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __stosw(
        arg1: *mut ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: usize,
    );
}
extern "C" {
    pub fn __svm_clgi();
}
extern "C" {
    pub fn __svm_invlpga(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_skinit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_stgi();
}
extern "C" {
    pub fn __svm_vmload(arg1: usize);
}
extern "C" {
    pub fn __svm_vmrun(arg1: usize);
}
extern "C" {
    pub fn __svm_vmsave(arg1: usize);
}
extern "C" {
    pub fn __ud2() -> !;
}
extern "C" {
    pub fn __ull_rshift(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __umulh(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __vmx_off();
}
extern "C" {
    pub fn __vmx_on(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmclear(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmlaunch() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmptrld(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmptrst(arg1: *mut ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __vmx_vmread(arg1: usize, arg2: *mut usize) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmresume() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmwrite(arg1: usize, arg2: usize) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __wbinvd();
}
extern "C" {
    pub fn __writecr0(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr2(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr3(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr4(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr8(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writedr(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writeeflags(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writegsbyte(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __writegsdword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __writegsqword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writegsword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __writemsr(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writemsrlist(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut ::std::os::raw::c_ulonglong,
        arg3: *mut ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn __writemsrns(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _bittest64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandreset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandreset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _disable();
}
extern "C" {
    pub fn _enable();
}
extern "C" {
    pub fn _interlockedbittestandreset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _m_prefetch(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _m_prefetchw(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_clflushopt(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_clwb(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_cvtsd_si64x(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi128_si64x(arg1: __m128i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64x_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsi64x_si128(arg1: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi64x_ss(arg1: __m128, arg2: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_si64x(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_si64x(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_si64x(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_extract_si64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_extracti_si64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_si64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_inserti_si64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_sd(arg1: *mut f64, arg2: __m128d);
}
extern "C" {
    pub fn _mm_stream_si64x(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn _mm_stream_ss(arg1: *mut f32, arg2: __m128);
}
extern "C" {
    pub fn _mul128(
        _Multiplier: ::std::os::raw::c_longlong,
        _Multiplicand: ::std::os::raw::c_longlong,
        _HighProduct: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _setjmpex(arg1: *mut _JBTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rsm();
}
extern "C" {
    pub fn _lgdt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _sgdt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _clac();
}
extern "C" {
    pub fn _stac();
}
extern "C" {
    pub fn _addcarry_u8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarry_u16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarry_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _add_overflow_i8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_schar,
        arg3: ::std::os::raw::c_schar,
        arg4: *mut ::std::os::raw::c_schar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _add_overflow_i16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _add_overflow_i32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _add_overflow_i64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _sub_overflow_i8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_schar,
        arg3: ::std::os::raw::c_schar,
        arg4: *mut ::std::os::raw::c_schar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _sub_overflow_i16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _sub_overflow_i32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _sub_overflow_i64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_overflow_i16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_overflow_i32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_overflow_i64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_i8(
        arg1: ::std::os::raw::c_schar,
        arg2: ::std::os::raw::c_schar,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_i16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_i32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_i64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: *mut ::std::os::raw::c_longlong,
        arg4: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_u8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_u16(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mul_full_overflow_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: *mut ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _AddressOfNextInstruction() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __is_unorderedf(arg1: f32, arg2: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_unordered(arg1: f64, arg2: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_unorderedl(arg1: f64, arg2: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_nanf(arg1: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_nan(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_nanl(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_normalf(arg1: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_normal(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_normall(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_finitef(arg1: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_finite(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_finitel(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_infinityf(arg1: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_infinity(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_infinityl(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_subnormalf(arg1: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_subnormal(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __is_subnormall(arg1: f64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(arg1: f64, arg2: f64) -> f64;
}
pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type terminate_function = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn terminate() -> !;
}
extern "C" {
    pub fn set_terminate(_NewTerminateHandler: terminate_handler) -> terminate_handler;
}
extern "C" {
    pub fn _get_terminate() -> terminate_handler;
}
pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type unexpected_function = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn unexpected() -> !;
}
extern "C" {
    pub fn set_unexpected(_NewUnexpectedHandler: unexpected_handler) -> unexpected_handler;
}
extern "C" {
    pub fn _get_unexpected() -> unexpected_handler;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_POINTERS {
    _unused: [u8; 0],
}
pub type _se_translator_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_uint, arg2: *mut _EXCEPTION_POINTERS),
>;
extern "C" {
    pub fn _set_se_translator(_NewSETranslator: _se_translator_function)
        -> _se_translator_function;
}
extern "C" {
    pub fn _is_exception_typeof(
        _Type: *const type_info,
        _ExceptionPtr: *mut _EXCEPTION_POINTERS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uncaught_exception() -> bool;
}
extern "C" {
    pub fn __uncaught_exceptions() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __std_exception_data {
    pub _What: *const ::std::os::raw::c_char,
    pub _DoFree: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __std_exception_data"][::std::mem::size_of::<__std_exception_data>() - 16usize];
    ["Alignment of __std_exception_data"][::std::mem::align_of::<__std_exception_data>() - 8usize];
    ["Offset of field: __std_exception_data::_What"]
        [::std::mem::offset_of!(__std_exception_data, _What) - 0usize];
    ["Offset of field: __std_exception_data::_DoFree"]
        [::std::mem::offset_of!(__std_exception_data, _DoFree) - 8usize];
};
extern "C" {
    pub fn __std_exception_copy(_From: *const __std_exception_data, _To: *mut __std_exception_data);
}
extern "C" {
    pub fn __std_exception_destroy(_Data: *mut __std_exception_data);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrCreate@@YAXPEAX@Z"]
    pub fn __ExceptionPtrCreate(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrDestroy@@YAXPEAX@Z"]
    pub fn __ExceptionPtrDestroy(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrCopy@@YAXPEAXPEBX@Z"]
    pub fn __ExceptionPtrCopy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrAssign@@YAXPEAXPEBX@Z"]
    pub fn __ExceptionPtrAssign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrCompare@@YA_NPEBX0@Z"]
    pub fn __ExceptionPtrCompare(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrToBool@@YA_NPEBX@Z"]
    pub fn __ExceptionPtrToBool(arg1: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrSwap@@YAXPEAX0@Z"]
    pub fn __ExceptionPtrSwap(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrCurrentException@@YAXPEAX@Z"]
    pub fn __ExceptionPtrCurrentException(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrRethrow@@YAXPEBX@Z"]
    pub fn __ExceptionPtrRethrow(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?__ExceptionPtrCopyException@@YAXPEAXPEBX1@Z"]
    pub fn __ExceptionPtrCopyException(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_trivially_swappable_1(
        _First: *mut ::std::os::raw::c_void,
        _Last: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_trivially_swappable_2(
        _First: *mut ::std::os::raw::c_void,
        _Last: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_trivially_swappable_4(
        _First: *mut ::std::os::raw::c_void,
        _Last: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_trivially_swappable_8(
        _First: *mut ::std::os::raw::c_void,
        _Last: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_swap_ranges_trivially_swappable_noalias(
        _First1: *mut ::std::os::raw::c_void,
        _Last1: *mut ::std::os::raw::c_void,
        _First2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_count_trivial_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u8,
    ) -> usize;
}
extern "C" {
    pub fn __std_count_trivial_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u16,
    ) -> usize;
}
extern "C" {
    pub fn __std_count_trivial_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u32,
    ) -> usize;
}
extern "C" {
    pub fn __std_count_trivial_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u64,
    ) -> usize;
}
extern "C" {
    pub fn __std_find_trivial_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u8,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u16,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u32,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u64,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_unsized_1(
        _First: *const ::std::os::raw::c_void,
        _Val: u8,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_unsized_2(
        _First: *const ::std::os::raw::c_void,
        _Val: u16,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_unsized_4(
        _First: *const ::std::os::raw::c_void,
        _Val: u32,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_trivial_unsized_8(
        _First: *const ::std::os::raw::c_void,
        _Val: u64,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_min_element_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_min_element_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_min_element_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_min_element_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_max_element_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_max_element_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_max_element_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_max_element_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn _isctype(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isctype_l(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isalpha_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _islower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isxdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isspace_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ispunct_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isblank_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isalnum_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isprint_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isgraph_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iscntrl_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iscsymf(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iscsym(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Min_max_element_t {
    pub _Min: *const ::std::os::raw::c_void,
    pub _Max: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Min_max_element_t"][::std::mem::size_of::<_Min_max_element_t>() - 16usize];
    ["Alignment of _Min_max_element_t"][::std::mem::align_of::<_Min_max_element_t>() - 8usize];
    ["Offset of field: _Min_max_element_t::_Min"]
        [::std::mem::offset_of!(_Min_max_element_t, _Min) - 0usize];
    ["Offset of field: _Min_max_element_t::_Max"]
        [::std::mem::offset_of!(_Min_max_element_t, _Max) - 8usize];
};
extern "C" {
    pub fn __std_reverse_copy_trivially_copyable_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Dest: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_copy_trivially_copyable_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Dest: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_copy_trivially_copyable_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Dest: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_reverse_copy_trivially_copyable_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Dest: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __std_minmax_element_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> _Min_max_element_t;
}
extern "C" {
    pub fn __std_minmax_element_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> _Min_max_element_t;
}
extern "C" {
    pub fn __std_minmax_element_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> _Min_max_element_t;
}
extern "C" {
    pub fn __std_minmax_element_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Signed: bool,
    ) -> _Min_max_element_t;
}
extern "C" {
    pub fn __std_find_last_trivial_1(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u8,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_last_trivial_2(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u16,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_last_trivial_4(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u32,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_find_last_trivial_8(
        _First: *const ::std::os::raw::c_void,
        _Last: *const ::std::os::raw::c_void,
        _Val: u64,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn __std_smf_assoc_laguerre(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f64,
    ) -> f64;
}
extern "C" {
    pub fn __std_smf_assoc_laguerref(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f32,
    ) -> f32;
}
extern "C" {
    pub fn __std_smf_assoc_legendre(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f64,
    ) -> f64;
}
extern "C" {
    pub fn __std_smf_assoc_legendref(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f32,
    ) -> f32;
}
extern "C" {
    pub fn __std_smf_beta(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_betaf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_comp_ellint_1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_comp_ellint_1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_comp_ellint_2(arg1: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_comp_ellint_2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_comp_ellint_3(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_comp_ellint_3f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_i(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_if(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_j(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_jf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_k(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_cyl_bessel_kf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_cyl_neumann(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_cyl_neumannf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_ellint_1(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_ellint_1f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_ellint_2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_ellint_2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_ellint_3(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_ellint_3f(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_expint(arg1: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_expintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_hermite(arg1: ::std::os::raw::c_uint, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_hermitef(arg1: ::std::os::raw::c_uint, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_laguerre(arg1: ::std::os::raw::c_uint, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_laguerref(arg1: ::std::os::raw::c_uint, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_legendre(arg1: ::std::os::raw::c_uint, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_legendref(arg1: ::std::os::raw::c_uint, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_riemann_zeta(arg1: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_riemann_zetaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_sph_bessel(arg1: ::std::os::raw::c_uint, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_sph_besself(arg1: ::std::os::raw::c_uint, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_sph_legendre(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f64,
    ) -> f64;
}
extern "C" {
    pub fn __std_smf_sph_legendref(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: f32,
    ) -> f32;
}
extern "C" {
    pub fn __std_smf_sph_neumann(arg1: ::std::os::raw::c_uint, arg2: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_sph_neumannf(arg1: ::std::os::raw::c_uint, arg2: f32) -> f32;
}
extern "C" {
    pub fn __std_smf_hypot3(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __std_smf_hypot3f(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stdext_checked_array_iterator<_Ptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
    pub _Myarray: _Ptr,
    pub _Mysize: usize,
    pub _Myindex: usize,
}
pub type stdext_checked_array_iterator__Pointee_type = std_remove_pointer_t;
pub type stdext_checked_array_iterator_iterator_category = std_random_access_iterator_tag;
pub type stdext_checked_array_iterator_value_type = std_remove_cv_t;
pub type stdext_checked_array_iterator_difference_type = ::std::os::raw::c_longlong;
pub type stdext_checked_array_iterator_pointer<_Ptr> = _Ptr;
pub type stdext_checked_array_iterator_reference = *mut stdext_checked_array_iterator__Pointee_type;
pub type stdext_checked_array_iterator__Prevent_inheriting_unwrap<_Ptr> =
    stdext_checked_array_iterator<_Ptr>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stdext_unchecked_array_iterator<_Ptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
    pub _Myptr: _Ptr,
}
pub type stdext_unchecked_array_iterator__Pointee_type = std_remove_pointer_t;
pub type stdext_unchecked_array_iterator_iterator_category = std_random_access_iterator_tag;
pub type stdext_unchecked_array_iterator_value_type = std_remove_cv_t;
pub type stdext_unchecked_array_iterator_difference_type = ::std::os::raw::c_longlong;
pub type stdext_unchecked_array_iterator_pointer<_Ptr> = _Ptr;
pub type stdext_unchecked_array_iterator_reference =
    *mut stdext_unchecked_array_iterator__Pointee_type;
pub type stdext_unchecked_array_iterator__Prevent_inheriting_unwrap<_Ptr> =
    stdext_unchecked_array_iterator<_Ptr>;
extern "C" {
    pub fn __std_get_string_size_without_trailing_whitespace(
        _Str: *const ::std::os::raw::c_char,
        _Size: usize,
    ) -> usize;
}
extern "C" {
    pub fn __std_system_error_allocate_message(
        _Message_id: ::std::os::raw::c_ulong,
        _Ptr_str: *mut *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn __std_system_error_deallocate_message(_Str: *mut ::std::os::raw::c_char);
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _timespec32"][::std::mem::size_of::<_timespec32>() - 8usize];
    ["Alignment of _timespec32"][::std::mem::align_of::<_timespec32>() - 4usize];
    ["Offset of field: _timespec32::tv_sec"][::std::mem::offset_of!(_timespec32, tv_sec) - 0usize];
    ["Offset of field: _timespec32::tv_nsec"]
        [::std::mem::offset_of!(_timespec32, tv_nsec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _timespec64"][::std::mem::size_of::<_timespec64>() - 16usize];
    ["Alignment of _timespec64"][::std::mem::align_of::<_timespec64>() - 8usize];
    ["Offset of field: _timespec64::tv_sec"][::std::mem::offset_of!(_timespec64, tv_sec) - 0usize];
    ["Offset of field: _timespec64::tv_nsec"]
        [::std::mem::offset_of!(_timespec64, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Tm: *const tm,
    ) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: usize,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn _Xtime_get_ticks() -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _Query_perf_counter() -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _Query_perf_frequency() -> ::std::os::raw::c_longlong;
}
pub type _Thrd_id_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Thrd_t {
    pub _Hnd: *mut ::std::os::raw::c_void,
    pub _Id: _Thrd_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Thrd_t"][::std::mem::size_of::<_Thrd_t>() - 16usize];
    ["Alignment of _Thrd_t"][::std::mem::align_of::<_Thrd_t>() - 8usize];
    ["Offset of field: _Thrd_t::_Hnd"][::std::mem::offset_of!(_Thrd_t, _Hnd) - 0usize];
    ["Offset of field: _Thrd_t::_Id"][::std::mem::offset_of!(_Thrd_t, _Id) - 8usize];
};
pub type _Smtx_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Stl_critical_section {
    pub _Unused: *mut ::std::os::raw::c_void,
    pub _M_srw_lock: _Smtx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Stl_critical_section"][::std::mem::size_of::<_Stl_critical_section>() - 16usize];
    ["Alignment of _Stl_critical_section"]
        [::std::mem::align_of::<_Stl_critical_section>() - 8usize];
    ["Offset of field: _Stl_critical_section::_Unused"]
        [::std::mem::offset_of!(_Stl_critical_section, _Unused) - 0usize];
    ["Offset of field: _Stl_critical_section::_M_srw_lock"]
        [::std::mem::offset_of!(_Stl_critical_section, _M_srw_lock) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Mtx_internal_imp_t {
    pub _Type: ::std::os::raw::c_int,
    pub __bindgen_anon_1: _Mtx_internal_imp_t__bindgen_ty_1,
    pub _Thread_id: ::std::os::raw::c_long,
    pub _Count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _Mtx_internal_imp_t__bindgen_ty_1 {
    pub _Critical_section: _Stl_critical_section,
    pub _Cs_storage: [u64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mtx_internal_imp_t__bindgen_ty_1"]
        [::std::mem::size_of::<_Mtx_internal_imp_t__bindgen_ty_1>() - 64usize];
    ["Alignment of _Mtx_internal_imp_t__bindgen_ty_1"]
        [::std::mem::align_of::<_Mtx_internal_imp_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: _Mtx_internal_imp_t__bindgen_ty_1::_Critical_section"]
        [::std::mem::offset_of!(_Mtx_internal_imp_t__bindgen_ty_1, _Critical_section) - 0usize];
    ["Offset of field: _Mtx_internal_imp_t__bindgen_ty_1::_Cs_storage"]
        [::std::mem::offset_of!(_Mtx_internal_imp_t__bindgen_ty_1, _Cs_storage) - 0usize];
};
pub const _Mtx_internal_imp_t__Critical_section_size: usize = 64;
pub const _Mtx_internal_imp_t__Critical_section_align: usize = 8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mtx_internal_imp_t"][::std::mem::size_of::<_Mtx_internal_imp_t>() - 80usize];
    ["Alignment of _Mtx_internal_imp_t"][::std::mem::align_of::<_Mtx_internal_imp_t>() - 8usize];
    ["Offset of field: _Mtx_internal_imp_t::_Type"]
        [::std::mem::offset_of!(_Mtx_internal_imp_t, _Type) - 0usize];
    ["Offset of field: _Mtx_internal_imp_t::_Thread_id"]
        [::std::mem::offset_of!(_Mtx_internal_imp_t, _Thread_id) - 72usize];
    ["Offset of field: _Mtx_internal_imp_t::_Count"]
        [::std::mem::offset_of!(_Mtx_internal_imp_t, _Count) - 76usize];
};
pub const _Cnd_internal_imp_size: usize = 72;
pub const _Cnd_internal_imp_alignment: usize = 8;
pub type _Mtx_t = *mut _Mtx_internal_imp_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Cnd_internal_imp_t {
    _unused: [u8; 0],
}
pub type _Cnd_t = *mut _Cnd_internal_imp_t;
pub const _Thrd_result__Success: _Thrd_result = 0;
pub const _Thrd_result__Nomem: _Thrd_result = 1;
pub const _Thrd_result__Timedout: _Thrd_result = 2;
pub const _Thrd_result__Busy: _Thrd_result = 3;
pub const _Thrd_result__Error: _Thrd_result = 4;
pub type _Thrd_result = ::std::os::raw::c_int;
extern "C" {
    pub fn _Thrd_detach(arg1: _Thrd_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Thrd_join(arg1: _Thrd_t, arg2: *mut ::std::os::raw::c_int) -> _Thrd_result;
}
extern "C" {
    pub fn _Thrd_yield();
}
extern "C" {
    pub fn _Thrd_hardware_concurrency() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _Thrd_id() -> _Thrd_id_t;
}
extern "C" {
    pub fn _Thrd_sleep_for(arg1: ::std::os::raw::c_ulong);
}
pub const _Mtx_plain: _bindgen_ty_13 = 1;
pub const _Mtx_try: _bindgen_ty_13 = 2;
pub const _Mtx_timed: _bindgen_ty_13 = 4;
pub const _Mtx_recursive: _bindgen_ty_13 = 256;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
extern "C" {
    pub fn _Mtx_init_in_situ(arg1: _Mtx_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Mtx_destroy_in_situ(arg1: _Mtx_t);
}
extern "C" {
    pub fn _Mtx_current_owns(arg1: _Mtx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Mtx_lock(arg1: _Mtx_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Mtx_trylock(arg1: _Mtx_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Mtx_unlock(arg1: _Mtx_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Smtx_lock_exclusive(arg1: *mut _Smtx_t);
}
extern "C" {
    pub fn _Smtx_lock_shared(arg1: *mut _Smtx_t);
}
extern "C" {
    pub fn _Smtx_try_lock_exclusive(arg1: *mut _Smtx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Smtx_try_lock_shared(arg1: *mut _Smtx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Smtx_unlock_exclusive(arg1: *mut _Smtx_t);
}
extern "C" {
    pub fn _Smtx_unlock_shared(arg1: *mut _Smtx_t);
}
extern "C" {
    pub fn _Cnd_init_in_situ(arg1: _Cnd_t);
}
extern "C" {
    pub fn _Cnd_destroy_in_situ(arg1: _Cnd_t);
}
extern "C" {
    pub fn _Cnd_wait(arg1: _Cnd_t, arg2: _Mtx_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Cnd_timedwait(arg1: _Cnd_t, arg2: _Mtx_t, arg3: *const _timespec64) -> _Thrd_result;
}
extern "C" {
    pub fn _Cnd_broadcast(arg1: _Cnd_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Cnd_signal(arg1: _Cnd_t) -> _Thrd_result;
}
extern "C" {
    pub fn _Cnd_register_at_thread_exit(
        arg1: _Cnd_t,
        arg2: _Mtx_t,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Cnd_unregister_at_thread_exit(arg1: _Mtx_t);
}
extern "C" {
    pub fn _Cnd_do_broadcast_at_thread_exit();
}
extern "C" {
    pub fn __std_atomic_compare_exchange_128(
        _Destination: *mut ::std::os::raw::c_longlong,
        _ExchangeHigh: ::std::os::raw::c_longlong,
        _ExchangeLow: ::std::os::raw::c_longlong,
        _ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __std_atomic_has_cmpxchg16b() -> ::std::os::raw::c_char;
}
pub const _Atomic_memory_order_relaxed: _bindgen_ty_14 = 0;
pub const _Atomic_memory_order_consume: _bindgen_ty_14 = 1;
pub const _Atomic_memory_order_acquire: _bindgen_ty_14 = 2;
pub const _Atomic_memory_order_release: _bindgen_ty_14 = 3;
pub const _Atomic_memory_order_acq_rel: _bindgen_ty_14 = 4;
pub const _Atomic_memory_order_seq_cst: _bindgen_ty_14 = 5;
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
extern "C" {
    pub fn __std_atomic_get_mutex(_Key: *const ::std::os::raw::c_void) -> *mut _Smtx_t;
}
pub type __std_win_error = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __type_info_node {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}?__type_info_root_node@@3U__type_info_node@@A"]
    pub static mut __type_info_root_node: __type_info_node;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __std_type_info_data {
    pub _UndecoratedName: *const ::std::os::raw::c_char,
    pub _DecoratedName: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __std_type_info_data"][::std::mem::size_of::<__std_type_info_data>() - 16usize];
    ["Alignment of __std_type_info_data"][::std::mem::align_of::<__std_type_info_data>() - 8usize];
    ["Offset of field: __std_type_info_data::_UndecoratedName"]
        [::std::mem::offset_of!(__std_type_info_data, _UndecoratedName) - 0usize];
    ["Offset of field: __std_type_info_data::_DecoratedName"]
        [::std::mem::offset_of!(__std_type_info_data, _DecoratedName) - 8usize];
};
extern "C" {
    pub fn __std_type_info_compare(
        _Lhs: *const __std_type_info_data,
        _Rhs: *const __std_type_info_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __std_type_info_hash(_Data: *const __std_type_info_data) -> usize;
}
extern "C" {
    pub fn __std_type_info_name(
        _Data: *mut __std_type_info_data,
        _RootNode: *mut __type_info_node,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct type_info {
    pub vtable_: *const type_info__bindgen_vtable,
    pub _Data: __std_type_info_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of type_info"][::std::mem::size_of::<type_info>() - 24usize];
    ["Alignment of type_info"][::std::mem::align_of::<type_info>() - 8usize];
    ["Offset of field: type_info::_Data"][::std::mem::offset_of!(type_info, _Data) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}??1type_info@@UEAA@XZ"]
    pub fn type_info_type_info_destructor(this: *mut type_info);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Collvec {
    pub _Page: ::std::os::raw::c_uint,
    pub _LocaleName: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Collvec"][::std::mem::size_of::<_Collvec>() - 16usize];
    ["Alignment of _Collvec"][::std::mem::align_of::<_Collvec>() - 8usize];
    ["Offset of field: _Collvec::_Page"][::std::mem::offset_of!(_Collvec, _Page) - 0usize];
    ["Offset of field: _Collvec::_LocaleName"]
        [::std::mem::offset_of!(_Collvec, _LocaleName) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Ctypevec {
    pub _Page: ::std::os::raw::c_uint,
    pub _Table: *const ::std::os::raw::c_short,
    pub _Delfl: ::std::os::raw::c_int,
    pub _LocaleName: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Ctypevec"][::std::mem::size_of::<_Ctypevec>() - 32usize];
    ["Alignment of _Ctypevec"][::std::mem::align_of::<_Ctypevec>() - 8usize];
    ["Offset of field: _Ctypevec::_Page"][::std::mem::offset_of!(_Ctypevec, _Page) - 0usize];
    ["Offset of field: _Ctypevec::_Table"][::std::mem::offset_of!(_Ctypevec, _Table) - 8usize];
    ["Offset of field: _Ctypevec::_Delfl"][::std::mem::offset_of!(_Ctypevec, _Delfl) - 16usize];
    ["Offset of field: _Ctypevec::_LocaleName"]
        [::std::mem::offset_of!(_Ctypevec, _LocaleName) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Cvtvec {
    pub _Page: ::std::os::raw::c_uint,
    pub _Mbcurmax: ::std::os::raw::c_uint,
    pub _Isclocale: ::std::os::raw::c_int,
    pub _Isleadbyte: [::std::os::raw::c_uchar; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Cvtvec"][::std::mem::size_of::<_Cvtvec>() - 44usize];
    ["Alignment of _Cvtvec"][::std::mem::align_of::<_Cvtvec>() - 4usize];
    ["Offset of field: _Cvtvec::_Page"][::std::mem::offset_of!(_Cvtvec, _Page) - 0usize];
    ["Offset of field: _Cvtvec::_Mbcurmax"][::std::mem::offset_of!(_Cvtvec, _Mbcurmax) - 4usize];
    ["Offset of field: _Cvtvec::_Isclocale"][::std::mem::offset_of!(_Cvtvec, _Isclocale) - 8usize];
    ["Offset of field: _Cvtvec::_Isleadbyte"]
        [::std::mem::offset_of!(_Cvtvec, _Isleadbyte) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub _W_decimal_point: *mut u16,
    pub _W_thousands_sep: *mut u16,
    pub _W_int_curr_symbol: *mut u16,
    pub _W_currency_symbol: *mut u16,
    pub _W_mon_decimal_point: *mut u16,
    pub _W_mon_thousands_sep: *mut u16,
    pub _W_positive_sign: *mut u16,
    pub _W_negative_sign: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 152usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::_W_decimal_point"]
        [::std::mem::offset_of!(lconv, _W_decimal_point) - 88usize];
    ["Offset of field: lconv::_W_thousands_sep"]
        [::std::mem::offset_of!(lconv, _W_thousands_sep) - 96usize];
    ["Offset of field: lconv::_W_int_curr_symbol"]
        [::std::mem::offset_of!(lconv, _W_int_curr_symbol) - 104usize];
    ["Offset of field: lconv::_W_currency_symbol"]
        [::std::mem::offset_of!(lconv, _W_currency_symbol) - 112usize];
    ["Offset of field: lconv::_W_mon_decimal_point"]
        [::std::mem::offset_of!(lconv, _W_mon_decimal_point) - 120usize];
    ["Offset of field: lconv::_W_mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, _W_mon_thousands_sep) - 128usize];
    ["Offset of field: lconv::_W_positive_sign"]
        [::std::mem::offset_of!(lconv, _W_positive_sign) - 136usize];
    ["Offset of field: lconv::_W_negative_sign"]
        [::std::mem::offset_of!(lconv, _W_negative_sign) - 144usize];
};
extern "C" {
    pub fn _lock_locales();
}
extern "C" {
    pub fn _unlock_locales();
}
extern "C" {
    pub fn _configthreadlocale(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlocale(
        _Category: ::std::os::raw::c_int,
        _Locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn _get_current_locale() -> _locale_t;
}
extern "C" {
    pub fn _create_locale(
        _Category: ::std::os::raw::c_int,
        _Locale: *const ::std::os::raw::c_char,
    ) -> _locale_t;
}
extern "C" {
    pub fn _free_locale(_Locale: _locale_t);
}
extern "C" {
    pub fn ___lc_locale_name_func() -> *mut *mut u16;
}
extern "C" {
    pub fn ___lc_codepage_func() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ___lc_collate_cp_func() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _Getdays() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _Getmonths() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _Gettnames() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _W_Getdays() -> *mut u16;
}
extern "C" {
    pub fn _W_Getmonths() -> *mut u16;
}
extern "C" {
    pub fn _W_Gettnames() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _Max_size: usize,
        _Format: *const ::std::os::raw::c_char,
        _Timeptr: *const tm,
        _Lc_time_arg: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn _Wcsftime(
        _Buffer: *mut u16,
        _Max_size: usize,
        _Format: *const u16,
        _Timeptr: *const tm,
        _Lc_time_arg: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn _Getcoll() -> _Collvec;
}
extern "C" {
    pub fn _Getctype() -> _Ctypevec;
}
extern "C" {
    pub fn _Getcvt() -> _Cvtvec;
}
extern "C" {
    pub fn _Getdateorder() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Mbrtowc(
        arg1: *mut u16,
        arg2: *const ::std::os::raw::c_char,
        _Max_multibyte: usize,
        arg3: *mut mbstate_t,
        arg4: *const _Cvtvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Strcoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const _Collvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Strxfrm(
        _String1: *mut ::std::os::raw::c_char,
        _End1: *mut ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const _Collvec,
    ) -> usize;
}
extern "C" {
    pub fn _Tolower(arg1: ::std::os::raw::c_int, arg2: *const _Ctypevec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Toupper(arg1: ::std::os::raw::c_int, arg2: *const _Ctypevec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Wcrtomb(
        arg1: *mut ::std::os::raw::c_char,
        arg2: u16,
        arg3: *mut mbstate_t,
        arg4: *const _Cvtvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Wcscoll(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: *const u16,
        arg5: *const _Collvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Wcsxfrm(
        _String1: *mut u16,
        _End1: *mut u16,
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const _Collvec,
    ) -> usize;
}
extern "C" {
    pub fn _Getwctype(arg1: u16, arg2: *const _Ctypevec) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _Getwctypes(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *const _Ctypevec,
    ) -> *const u16;
}
extern "C" {
    pub fn _Towlower(arg1: u16, arg2: *const _Ctypevec) -> u16;
}
extern "C" {
    pub fn _Towupper(arg1: u16, arg2: *const _Ctypevec) -> u16;
}
extern "C" {
    pub fn _Stolx(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _Stoulx(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _Stollx(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _Stoullx(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
pub const broma_Platform_None: broma_Platform = 0;
pub const broma_Platform_Windows: broma_Platform = 2;
pub const broma_Platform_iOS: broma_Platform = 4;
pub const broma_Platform_Android32: broma_Platform = 8;
pub const broma_Platform_Android64: broma_Platform = 16;
pub const broma_Platform_Android: broma_Platform = 24;
pub const broma_Platform_MacIntel: broma_Platform = 32;
pub const broma_Platform_MacArm: broma_Platform = 64;
pub const broma_Platform_Mac: broma_Platform = 96;
#[doc = " @brief The platform currently being processed in a bind statement."]
pub type broma_Platform = ::std::os::raw::c_int;
#[doc = " @brief Binding offsets for each platform."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct broma_PlatformNumber {
    pub imac: isize,
    pub m1: isize,
    pub ios: isize,
    pub win: isize,
    pub android32: isize,
    pub android64: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_PlatformNumber"][::std::mem::size_of::<broma_PlatformNumber>() - 48usize];
    ["Alignment of broma_PlatformNumber"][::std::mem::align_of::<broma_PlatformNumber>() - 8usize];
    ["Offset of field: broma_PlatformNumber::imac"]
        [::std::mem::offset_of!(broma_PlatformNumber, imac) - 0usize];
    ["Offset of field: broma_PlatformNumber::m1"]
        [::std::mem::offset_of!(broma_PlatformNumber, m1) - 8usize];
    ["Offset of field: broma_PlatformNumber::ios"]
        [::std::mem::offset_of!(broma_PlatformNumber, ios) - 16usize];
    ["Offset of field: broma_PlatformNumber::win"]
        [::std::mem::offset_of!(broma_PlatformNumber, win) - 24usize];
    ["Offset of field: broma_PlatformNumber::android32"]
        [::std::mem::offset_of!(broma_PlatformNumber, android32) - 32usize];
    ["Offset of field: broma_PlatformNumber::android64"]
        [::std::mem::offset_of!(broma_PlatformNumber, android64) - 40usize];
};
#[doc = " @brief A C++ type declaration."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Type {
    pub is_struct: bool,
    pub name: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Type"][::std::mem::size_of::<broma_Type>() - 40usize];
    ["Alignment of broma_Type"][::std::mem::align_of::<broma_Type>() - 8usize];
    ["Offset of field: broma_Type::is_struct"]
        [::std::mem::offset_of!(broma_Type, is_struct) - 0usize];
    ["Offset of field: broma_Type::name"][::std::mem::offset_of!(broma_Type, name) - 8usize];
};
#[doc = " @brief List of attributes that could be applied to a class or a function"]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Attributes {
    #[doc = "< Any docstring pulled from a `[[docs(...)]]` attribute."]
    pub docs: std_string,
    #[doc = "< All the platforms that link the class or function"]
    pub links: broma_Platform,
    #[doc = "< All the platforms that are missing the class or function"]
    pub missing: broma_Platform,
    #[doc = "< List of classes that this class or function depends on"]
    pub depends: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Attributes"][::std::mem::size_of::<broma_Attributes>() - 64usize];
    ["Alignment of broma_Attributes"][::std::mem::align_of::<broma_Attributes>() - 8usize];
    ["Offset of field: broma_Attributes::docs"]
        [::std::mem::offset_of!(broma_Attributes, docs) - 0usize];
    ["Offset of field: broma_Attributes::links"]
        [::std::mem::offset_of!(broma_Attributes, links) - 32usize];
    ["Offset of field: broma_Attributes::missing"]
        [::std::mem::offset_of!(broma_Attributes, missing) - 36usize];
    ["Offset of field: broma_Attributes::depends"]
        [::std::mem::offset_of!(broma_Attributes, depends) - 40usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct broma_FunctionProto {
    #[doc = "< Attributes associated with the function."]
    pub attributes: broma_Attributes,
    #[doc = "< The return type of the function."]
    pub ret: broma_Type,
    #[doc = "< All arguments, represented by their type and their name."]
    pub args: std_vector,
    #[doc = "< The function's name."]
    pub name: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_FunctionProto"][::std::mem::size_of::<broma_FunctionProto>() - 160usize];
    ["Alignment of broma_FunctionProto"][::std::mem::align_of::<broma_FunctionProto>() - 8usize];
    ["Offset of field: broma_FunctionProto::attributes"]
        [::std::mem::offset_of!(broma_FunctionProto, attributes) - 0usize];
    ["Offset of field: broma_FunctionProto::ret"]
        [::std::mem::offset_of!(broma_FunctionProto, ret) - 64usize];
    ["Offset of field: broma_FunctionProto::args"]
        [::std::mem::offset_of!(broma_FunctionProto, args) - 104usize];
    ["Offset of field: broma_FunctionProto::name"]
        [::std::mem::offset_of!(broma_FunctionProto, name) - 128usize];
};
pub const broma_FunctionType_Normal: broma_FunctionType = 0;
#[doc = "< A constructor."]
pub const broma_FunctionType_Ctor: broma_FunctionType = 1;
#[doc = "< A destructor."]
pub const broma_FunctionType_Dtor: broma_FunctionType = 2;
#[doc = " @brief A member function's type."]
pub type broma_FunctionType = ::std::os::raw::c_int;
#[doc = " @brief The signature of a member function."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_MemberFunctionProto {
    pub _base: broma_FunctionProto,
    pub type_: broma_FunctionType,
    pub is_const: bool,
    pub is_virtual: bool,
    #[doc = "< Whether or not this function is a callback.\n< In Geode, this determines the function's calling convention (optcall or thiscall)."]
    pub is_callback: bool,
    pub is_static: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_MemberFunctionProto"]
        [::std::mem::size_of::<broma_MemberFunctionProto>() - 168usize];
    ["Alignment of broma_MemberFunctionProto"]
        [::std::mem::align_of::<broma_MemberFunctionProto>() - 8usize];
    ["Offset of field: broma_MemberFunctionProto::type_"]
        [::std::mem::offset_of!(broma_MemberFunctionProto, type_) - 160usize];
    ["Offset of field: broma_MemberFunctionProto::is_const"]
        [::std::mem::offset_of!(broma_MemberFunctionProto, is_const) - 164usize];
    ["Offset of field: broma_MemberFunctionProto::is_virtual"]
        [::std::mem::offset_of!(broma_MemberFunctionProto, is_virtual) - 165usize];
    ["Offset of field: broma_MemberFunctionProto::is_callback"]
        [::std::mem::offset_of!(broma_MemberFunctionProto, is_callback) - 166usize];
    ["Offset of field: broma_MemberFunctionProto::is_static"]
        [::std::mem::offset_of!(broma_MemberFunctionProto, is_static) - 167usize];
};
#[doc = " @brief A class's member variables."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_MemberField {
    #[doc = "< For platform-specific members, all platforms this member is defined on"]
    pub platform: broma_Platform,
    #[doc = "< The name of the field."]
    pub name: std_string,
    #[doc = "< The type of the field."]
    pub type_: broma_Type,
    #[doc = "< The number of elements in the field when it's an array (pretty much unused since we use std::array)."]
    pub count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_MemberField"][::std::mem::size_of::<broma_MemberField>() - 88usize];
    ["Alignment of broma_MemberField"][::std::mem::align_of::<broma_MemberField>() - 8usize];
    ["Offset of field: broma_MemberField::platform"]
        [::std::mem::offset_of!(broma_MemberField, platform) - 0usize];
    ["Offset of field: broma_MemberField::name"]
        [::std::mem::offset_of!(broma_MemberField, name) - 8usize];
    ["Offset of field: broma_MemberField::type_"]
        [::std::mem::offset_of!(broma_MemberField, type_) - 40usize];
    ["Offset of field: broma_MemberField::count"]
        [::std::mem::offset_of!(broma_MemberField, count) - 80usize];
};
#[doc = " @brief Any class padding."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct broma_PadField {
    #[doc = "< The amount of padding, separated per platform."]
    pub amount: broma_PlatformNumber,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_PadField"][::std::mem::size_of::<broma_PadField>() - 48usize];
    ["Alignment of broma_PadField"][::std::mem::align_of::<broma_PadField>() - 8usize];
    ["Offset of field: broma_PadField::amount"]
        [::std::mem::offset_of!(broma_PadField, amount) - 0usize];
};
#[doc = " @brief A function that is bound to an offset."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_FunctionBindField {
    pub prototype: broma_MemberFunctionProto,
    #[doc = "< The offsets, separated per platform."]
    pub binds: broma_PlatformNumber,
    #[doc = "< The (optional) inline body of the function as a raw string."]
    pub inner: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_FunctionBindField"]
        [::std::mem::size_of::<broma_FunctionBindField>() - 248usize];
    ["Alignment of broma_FunctionBindField"]
        [::std::mem::align_of::<broma_FunctionBindField>() - 8usize];
    ["Offset of field: broma_FunctionBindField::prototype"]
        [::std::mem::offset_of!(broma_FunctionBindField, prototype) - 0usize];
    ["Offset of field: broma_FunctionBindField::binds"]
        [::std::mem::offset_of!(broma_FunctionBindField, binds) - 168usize];
    ["Offset of field: broma_FunctionBindField::inner"]
        [::std::mem::offset_of!(broma_FunctionBindField, inner) - 216usize];
};
#[doc = " @brief A inline function body that should go in a header file (.hpp)."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_InlineField {
    #[doc = "< The inline body of the function as a raw string."]
    pub inner: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_InlineField"][::std::mem::size_of::<broma_InlineField>() - 32usize];
    ["Alignment of broma_InlineField"][::std::mem::align_of::<broma_InlineField>() - 8usize];
    ["Offset of field: broma_InlineField::inner"]
        [::std::mem::offset_of!(broma_InlineField, inner) - 0usize];
};
#[doc = " @brief A class field."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Field {
    #[doc = "< The index of the field. This starts from 0 and counts up across all classes."]
    pub field_id: usize,
    #[doc = "< The name of the parent class."]
    pub parent: std_string,
    pub inner: std_variant,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Field"][::std::mem::size_of::<broma_Field>() - 296usize];
    ["Alignment of broma_Field"][::std::mem::align_of::<broma_Field>() - 8usize];
    ["Offset of field: broma_Field::field_id"]
        [::std::mem::offset_of!(broma_Field, field_id) - 0usize];
    ["Offset of field: broma_Field::parent"][::std::mem::offset_of!(broma_Field, parent) - 8usize];
    ["Offset of field: broma_Field::inner"][::std::mem::offset_of!(broma_Field, inner) - 40usize];
};
#[doc = " @brief A top-level class declaration."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Class {
    pub attributes: broma_Attributes,
    #[doc = "< The name of the class."]
    pub name: std_string,
    #[doc = "< Parent classes that the current class inherits.\n< This includes parent classes, and any classes declared in a `[[depends(...)]]` attribute."]
    pub superclasses: std_vector,
    #[doc = "< All the fields parsed in the class."]
    pub fields: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Class"][::std::mem::size_of::<broma_Class>() - 144usize];
    ["Alignment of broma_Class"][::std::mem::align_of::<broma_Class>() - 8usize];
    ["Offset of field: broma_Class::attributes"]
        [::std::mem::offset_of!(broma_Class, attributes) - 0usize];
    ["Offset of field: broma_Class::name"][::std::mem::offset_of!(broma_Class, name) - 64usize];
    ["Offset of field: broma_Class::superclasses"]
        [::std::mem::offset_of!(broma_Class, superclasses) - 96usize];
    ["Offset of field: broma_Class::fields"]
        [::std::mem::offset_of!(broma_Class, fields) - 120usize];
};
#[doc = " @brief A top-level free function binding."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Function {
    #[doc = "< The free function's signature."]
    pub prototype: broma_FunctionProto,
    #[doc = "< The offsets of free function, separated per platform."]
    pub binds: broma_PlatformNumber,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Function"][::std::mem::size_of::<broma_Function>() - 208usize];
    ["Alignment of broma_Function"][::std::mem::align_of::<broma_Function>() - 8usize];
    ["Offset of field: broma_Function::prototype"]
        [::std::mem::offset_of!(broma_Function, prototype) - 0usize];
    ["Offset of field: broma_Function::binds"]
        [::std::mem::offset_of!(broma_Function, binds) - 160usize];
};
#[doc = " @brief Broma's root grammar (the root AST).\n\n See the user's guide for an example on how to traverse this AST."]
#[repr(C)]
#[derive(Debug)]
pub struct broma_Root {
    pub classes: std_vector,
    pub functions: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of broma_Root"][::std::mem::size_of::<broma_Root>() - 48usize];
    ["Alignment of broma_Root"][::std::mem::align_of::<broma_Root>() - 8usize];
    ["Offset of field: broma_Root::classes"][::std::mem::offset_of!(broma_Root, classes) - 0usize];
    ["Offset of field: broma_Root::functions"]
        [::std::mem::offset_of!(broma_Root, functions) - 24usize];
};
extern "C" {
    #[doc = " @brief Pass a file for Broma to parse into an AST.\n\n This function throws, so make sure to handle errors properly if needed.\n\n @param fname The path of the file you want to parse, as a string."]
    #[link_name = "\u{1}?parse_file@broma@@YA?AURoot@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z"]
    pub fn broma_parse_file(fname: *const std_string) -> broma_Root;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic>() - 4usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic>() - 4usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic>() - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_wchar_t_close0"]
        [::std::mem::size_of::<std__Yarn<u16>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_wchar_t_close0"]
        [::std::mem::align_of::<std__Yarn<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_wchar_t_close0"]
        [::std::mem::size_of::<std__Yarn<u16>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_wchar_t_close0"]
        [::std::mem::align_of::<std__Yarn<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Locbase_open0_int_close0"]
        [::std::mem::size_of::<std__Locbase>() - 1usize];
    ["Align of template specialization: std__Locbase_open0_int_close0"]
        [::std::mem::align_of::<std__Locbase>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std__Yarn_open0_char_close0"]
        [::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Iosb_open0_int_close0"]
        [::std::mem::size_of::<std__Iosb>() - 1usize];
    ["Align of template specialization: std__Iosb_open0_int_close0"]
        [::std::mem::align_of::<std__Iosb>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_pair_open1_broma_Type_std_string_close1_std_allocator_open1_std_pair_open2_broma_Type_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_pair_open1_broma_Type_std_string_close1_std_allocator_open1_std_pair_open2_broma_Type_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_broma_Type_std_string_close0"]
        [::std::mem::size_of::<std_pair<broma_Type, std_string>>() - 72usize];
    ["Align of template specialization: std_pair_open0_broma_Type_std_string_close0"]
        [::std::mem::align_of::<std_pair<broma_Type, std_string>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_pair_open1_broma_Type_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_pair_open1_broma_Type_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_broma_Type_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_pair < broma_Type , std_basic_string > > () - 72usize] ;
    ["Align of template specialization: std_pair_open0_broma_Type_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_pair < broma_Type , std_basic_string > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_variant_open0_broma_InlineField_broma_FunctionBindField_broma_PadField_broma_MemberField_close0"] [:: std :: mem :: size_of :: < std_variant > () - 256usize] ;
    ["Align of template specialization: std_variant_open0_broma_InlineField_broma_FunctionBindField_broma_PadField_broma_MemberField_close0"] [:: std :: mem :: align_of :: < std_variant > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_broma_Field_std_allocator_open1_broma_Field_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_broma_Field_std_allocator_open1_broma_Field_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_broma_Field_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_broma_Field_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_broma_Class_std_allocator_open1_broma_Class_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_broma_Class_std_allocator_open1_broma_Class_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_broma_Class_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_broma_Class_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_broma_Function_std_allocator_open1_broma_Function_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_broma_Function_std_allocator_open1_broma_Function_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_broma_Function_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_broma_Function_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
